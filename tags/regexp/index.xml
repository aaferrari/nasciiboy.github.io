<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regexp on nba - GNU&#39;s Rock</title>
    <link>http://nasciiboy.github.io/tags/regexp/</link>
    <description>Recent content in Regexp on nba - GNU&#39;s Rock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <copyright>GPL 3.0</copyright>
    <lastBuildDate>Sat, 15 Jul 2017 21:36:03 -0500</lastBuildDate>
    
	<atom:link href="http://nasciiboy.github.io/tags/regexp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>regexp4-go (dia cero)</title>
      <link>http://nasciiboy.github.io/prog/regexp4-go/</link>
      <pubDate>Sat, 15 Jul 2017 21:36:03 -0500</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/regexp4-go/</guid>
      <description>regexp4 es un &amp;ldquo;motor&amp;rdquo; de expresiones regulares de la familia de los motores regulares Recursive Regexp Raptor, o expresado de otra forma: una libreria de expresiones regulares hecha desde cero, reinventando la rueda (o no) de la manera (que para mi es la) mas simple posible. sin arboles de evaluacion, ni liberacion de memoria, ni cosas raras o esa es la intencion, almenos de las versiones en C
cual es entonces la necesidad de que exista esta version en go, podrias preguntar.</description>
    </item>
    
    <item>
      <title>regexp3-go (dia cero)</title>
      <link>http://nasciiboy.github.io/prog/regexp3-go/</link>
      <pubDate>Sat, 11 Feb 2017 10:26:04 -0600</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/regexp3-go/</guid>
      <description>Hace un año, luego de &amp;ldquo;maquetar&amp;rdquo; algunos libros en org-mode, decidi crear mi propio lenguaje de marcas ligeras, con casinos y colegialas japonesas, programar un substituto del comando man/info y aniquilar a html/latex como sistema de documentacion.
Un mes mas tarde fruto de la necesidad de parsear el texto del nuevo lenguaje y mi incapacidad de entender como utilizar una libreria de expresiones regulares, nacio Recursive Regexp Raptor (alias regexp3) que es un motor de expresiones regulares para C, otro mes mas tarde salio a la web la primer version en forma de repositorio en github y ahora&amp;hellip; ni hay un nuevo lenguaje, ni un substituto de man/info, ni ha muerto html y he dedicado mas horas de las que jamas pense en regexp3 (y regexp4 &amp;ldquo;el sucesor&amp;rdquo;)</description>
    </item>
    
    <item>
      <title>Performance comparison of regular expression engines</title>
      <link>http://nasciiboy.github.io/prog/performance-comparison-of-regular-expression-engines/</link>
      <pubDate>Fri, 16 Dec 2016 20:22:03 -0600</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/performance-comparison-of-regular-expression-engines/</guid>
      <description>Hola gente, hace unos meses tome el codigo de dark100 &amp;ldquo;Performance comparison of regular expression engines&amp;rdquo; (pueden ver el orginal aqui) para hacer algunas pruebas a un pequeño motor regexp que programe en mi tiempo libre?, bueno &amp;hellip; acabo de actualizar la prueba (aqui)
El proceso fue el siguiente
 Optener el codigo fuente de cada motor (PCRE2, RE2, tre, oniguruma)
 Compilar cada motor localmente (intel x86-64 celeron 847), es decir</description>
    </item>
    
  </channel>
</rss>