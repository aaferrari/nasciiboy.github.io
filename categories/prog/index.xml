<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prog on nba - GNU&#39;s Rock</title>
    <link>https://nasciiboy.github.io/categories/prog/</link>
    <description>Recent content in Prog on nba - GNU&#39;s Rock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <copyright>GPL v3.0</copyright>
    <lastBuildDate>Fri, 23 Mar 2018 21:41:50 -0600</lastBuildDate>
    
        <atom:link href="https://nasciiboy.github.io/categories/prog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CAT</title>
      <link>https://nasciiboy.github.io/prog/cat/</link>
      <pubDate>Fri, 23 Mar 2018 21:41:50 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/cat/</guid>
      <description>&lt;p&gt;Hace tiempo, mucho tiempo, cuando iniciaba mis aventuras con C, tenia la urgente
necesidad de ingresar un &amp;ldquo;grafico&amp;rdquo; dentro de un arreglo de caracteres, el asunto
es que dicho grafico contenia por supuesto algunos caracteres &amp;ldquo;especiales&amp;rdquo; para
el propio C y en ese caso (segun mis primeras intuiciones) habia dos opcciones:
(1) escapar los caracteres o (2) colocar el grafico en un fichero y leerlo.&lt;/p&gt;

&lt;p&gt;La primer opcion no me convencia, por que ensuciava el codigo desfigurando y
descuadrando el grafico. La segunda opcion aunque mas elegante,
requeria la lectura de un fichero externo a resguardo de quien sabe que
personaje de dudosas habilidades.&lt;/p&gt;

&lt;p&gt;Asi pues, no recuerdo muy bien como, llegue a la siguiente solucion, que radica
en &amp;ldquo;romper&amp;rdquo; las macros del preprocesador de C.&lt;/p&gt;

&lt;p&gt;cortar y pegar en un fichero (digamos &lt;code&gt;CAT.c&lt;/code&gt;) o cliclar &lt;a href=&#34;https://nasciiboy.github.io/data/CAT.c&#34;&gt;aca&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define H 24
#define W 83
#define CAT( row, cont ) strcpy( &amp;amp;map[ row ][ 0 ], #cont )

int main(){
  char map[ H ][ W ];
  CAT( 0,&amp;quot;... ...         .........                   ........         ..............  ...&amp;quot;);
  CAT( 1,&amp;quot;... .  ............      .............             ..........     ......      ..&amp;quot;);
  CAT( 2,&amp;quot;............. _|      _|              ...     _|             ......   ..........&amp;quot;);
  CAT( 3,&amp;quot;............. _|_|    _|    _|_|_|    _|_|_|  _|  _|      _|_|             .....&amp;quot;);
  CAT( 4,&amp;quot;............. _|  _|  _|  _|    _|  _|_|      _|_|      _|_|_|_|           .....&amp;quot;);
  CAT( 5,&amp;quot;............. _|    _|_|  _|    _|      _|_|  _|  _|    _|            ..........&amp;quot;);
  CAT( 6,&amp;quot;............. _|      _|    _|_|_|  _|_|_|    _|    _|    _|_|_|   .............&amp;quot;);
  CAT( 7,&amp;quot;..             .....                                         ........         ..&amp;quot;);
  CAT( 8,&amp;quot;..            ..       ..  ...                 ..............                 ..&amp;quot;);
  CAT( 9,&amp;quot;..  ...........         .... .............                                ......&amp;quot;);
  CAT(10,&amp;quot;......                                         |                 |     .........&amp;quot;);
  CAT(11,&amp;quot;......   __ \    __|  _ \   __|   __|     __|  __|   _` |   __|  __|       .....&amp;quot;);
  CAT(12,&amp;quot;......   |   |  |     __/ \__ \ \__ \   \__ \  |    (   |  |     |       ..   ..&amp;quot;);
  CAT(13,&amp;quot;......   .__/  _|   \___| ____/ ____/   ____/ \__| \__,_| _|    \__|        ....&amp;quot;);
  CAT(14,&amp;quot;......  _|                                                            ....... ..&amp;quot;);
  CAT(15,&amp;quot;....          . ............. .        ...............                      . ..&amp;quot;);
  CAT(16,&amp;quot;....               ..          ........         ....  .....             ....  ..&amp;quot;);
  CAT(17,&amp;quot;.....          .....  .    _   _   _   _   _   _   ..        ... ...........  ..&amp;quot;);
  CAT(18,&amp;quot;.....   ........   ....   / \ / \ / \ / \ / \ / \   ........        ...       ..&amp;quot;);
  CAT(19,&amp;quot;.. ..            ...     ( b | u | t | t | o | m )         .    ................&amp;quot;);
  CAT(20,&amp;quot;.. . .       ....         \_/ \_/ \_/ \_/ \_/ \_/       .. ........          ...&amp;quot;);
  CAT(21,&amp;quot;.... .   .....  .....                            ........                  .....&amp;quot;);
  CAT(22,&amp;quot;.... .    .......              ................ ..    ..        ...........   ..&amp;quot;);
  CAT(23,&amp;quot;.... ..     ...............  ..........................   ......................&amp;quot;);

  for( int i = 0; i &amp;lt; H; i++ )
    printf( &amp;quot;&amp;gt;&amp;gt;%.*s&amp;lt;&amp;lt;\n&amp;quot;, 80, &amp;amp;map[ i ][ 1 ] );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pueden compilar con &lt;code&gt;gcc -Wall CAT.c&lt;/code&gt; y si sois incredulos, substituir &lt;code&gt;gcc&lt;/code&gt; con &lt;code&gt;g++&lt;/code&gt;,
&lt;code&gt;clang&lt;/code&gt; o &lt;code&gt;clang++&lt;/code&gt; que el compilador no va a lanzar ninguna alerta!&lt;/p&gt;

&lt;p&gt;Como consideraciones especiales, el preprocesador &lt;strong&gt;NO&lt;/strong&gt; escapara las comillas
al principio y final (por ello las columnas del arreglo tienen 2 caracters mas
(+1 del signo de terminacion &lt;code&gt;\0&lt;/code&gt; que incluye &lt;code&gt;strcpy&lt;/code&gt;)) y las comillas tienen que
ser pares.&lt;/p&gt;

&lt;p&gt;podeis intentar con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CAT( 0, &amp;quot;&amp;quot;&amp;quot;&amp;quot; );
  printf( &amp;quot;&amp;gt;&amp;gt;%s&amp;lt;&amp;lt;\n&amp;quot;, &amp;amp;map[0][0] );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o tambien&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CAT( 0, &amp;quot;\ \n\\&amp;quot; );
printf( &amp;quot;&amp;gt;&amp;gt;%s&amp;lt;&amp;lt;\n&amp;quot;, &amp;amp;map[0][0] );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://nasciiboy.github.io/prog/markdown/</link>
      <pubDate>Sun, 18 Mar 2018 13:17:26 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/markdown/</guid>
      <description>

&lt;p&gt;pues resulta que los humanos nos diferenciamos de las demas creaturas por que
podemos depositar y almacenar &lt;strong&gt;el conocimiento&lt;/strong&gt; en medios externos a nuestro
propio cuerpo mediante un formato de codificacion (grafica o &amp;ldquo;tactil&amp;rdquo;)
particular, sea como &lt;a href=&#34;https://es.wikipedia.org/wiki/Pictograma&#34;&gt;pictogramas&lt;/a&gt; o
&lt;a href=&#34;https://es.wikipedia.org/wiki/Logograma&#34;&gt;logogramas&lt;/a&gt;, (o representaciones
intangibles digitales de ceros y unos).&lt;/p&gt;

&lt;p&gt;Ya que como especie nos dispersamos por el globo y como volar, el
teletransporte ni la telepatia forman parte de nuestras habilidades, se formaron
grupusculos aislados que terminaron por inventarse y/o adaptar y/o diverger
dialectos y metolodogias para preservar y difundir su informacion&amp;hellip;
y asi hemos estado con cambios minusculos durente miles de años  ¯\_(ツ)_/¯ limitados a la
subsistencia, hasta que con la imprenta (supongo) el motor de vapor y luego las
cable-comunicaciones dio inicio la transmicion masiva (no sexual) de informacion&lt;/p&gt;

&lt;p&gt;Desde entonces, la poblacion ha crecido aun mas, los limites de las comunidades
se hacen cada vez menos obvios y en general la cantidad de procesadores
biologicos dedicados a labores puramente intelectuales se incrementa.&lt;/p&gt;

&lt;p&gt;En los ultimos 200 años la produccion de informacion junto a su intercambio han
modificado nuestra forma de interactuar con el ambiente, al grado de transformar
a la especie misma, sus costumbres, metas inconcientes y batallas por la
egemonia. Como un divulgador cientifico dijo alguna vez&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;la vida es una guerra de informacion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;la aparicion de la informatica a traido nuevas batallas, pongamos como ejemplo
la representacion misma del lenguaje. En los incipientes albores de las
computadoras, limitadas en capaciad de calculo y almacenamiento, cual fue la
forma de representar y almacenar los caracteres con mas o menos eficiencia? 2
bits? 4 bits? alguien dijo 8? o 16? El ganador de aquella primer
confrontacion fue &lt;a href=&#34;https://es.wikipedia.org/wiki/ASCII&#34;&gt;ASCII&lt;/a&gt;,
un simbolo de identidad entre los informaticos. Traducido, el acronimo vendria a
ser &amp;ldquo;Código Estándar Estadounidense para el Intercambio de Información&amp;rdquo; y se
basa en asignar un codigo numerico para cada caracter del ingles moderno, en un
rango decimal que va del 0 a 127, conteniendo numeros, letras en minuscula, mayusculas,
signos de puntuacion y ademas algunos codigos especificos de control (Fin de
transmision, salto de linea, retroceso, Escape, etc)&lt;/p&gt;

&lt;p&gt;La construccion misma de los procesadores, que estandariso los buses de datos
en multiplos de 8 bits (16, 32, 64, 128, 256, &amp;hellip;.) junto a la llegada de
ordenadores a mercados no angloparlantes, obligaron a los fabricantes a
aprovechar el octavo bit libre en la codificacion ASCII, para adaptarlo a los
distintos sistemas de escritura&amp;hellip; y en otros casos, para enriqueser los
simbolos graficos desplegados por los equipos&lt;/p&gt;

&lt;p&gt;Con el tiempo, aquellos primeros equipos comenzaron a intercomunicarse, viendo
la inminente necesidad de acordar un nuevo estardar de codificacion, donde
tuvieran cabida todos los caracteres de escritura. Dicho acuerdo recivio el
nombre de &lt;a href=&#34;https://es.wikipedia.org/wiki/Unicode&#34;&gt;UNICODE&lt;/a&gt; asignando un
codigo y nombre a cada caracter dentro los valores almacenables en 32 bits (que
pueden codificarse en secuencias de 8 (UTF-8), 16 (UTF-16) y 32 (UTF-32) bits)&lt;/p&gt;

&lt;p&gt;De forma paralela mientras se encontraba la forma de representar el lenguaje escrito,
tambien se buscaron maneras para transladar el contenido de los libros
tradicionales impresos en papel a los monitores digitales, y viceversa, es decir,
mediante la informacion almacenada digitalmente, poder facilitar la
creacion de libros impresos.&lt;/p&gt;

&lt;p&gt;Dicho enfoque inicialmente ignoro la naturaleza del nuevo medio, mas rico,
interactivo, interconectado e inmediato. Apenas se limito a emular la
representacion tradicional en papel, agregando una complejidad innecesaria para
la creacion de documentacion. Entre los varios formatos que tomaron esta
vision, encontrariamos como representante principal a &lt;a href=&#34;https://es.wikipedia.org/wiki/tex&#34;&gt;TeX&lt;/a&gt; y en
menor medida a &lt;a href=&#34;https://es.wikipedia.org/wiki/Roff&#34;&gt;roff&lt;/a&gt;, junto a sus
respectivas variaciones como LaTeX, Texinfo, nroff o groff. Sin embargo, el
formato que se termino por imponerse fue HTML (un derivado del lenguaje de marcas
extensible &lt;a href=&#34;https://es.wikipedia.org/wiki/xml&#34;&gt;XML&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Lamentablemente en el caso de TeX al estar ideado paro &lt;em&gt;hacer libros&lt;/em&gt; complicaba
el proceso de la escritura, lo que termino por limitarlo casi en exclusiva al
ambito academico. Por su parte HTML contaba con un engorroso
sistema de marcas de apertura, cierre, estructura del documento, enfasis e
instrucciones para la representacion visual, que puesto en manos humanas
eran casi imposible de escribir, muy engorroso y complicado,
situacion que desencadeno en la imposibilidad de formalizarlo y adaptarlo para la
creacion de documentacion academica y literal&lt;/p&gt;

&lt;p&gt;Ante este sin sentido de formatos, aparecieron nuevas visiones centradas en la
sencilles, abandonando la idea del papel como fin ultimo. En esta ocacion,
el proposito fue una escritura sencilla, entendible por humanos sin necesidad de un
programa especial y exportable a los &amp;ldquo;viejos&amp;rdquo; formatos.&lt;/p&gt;

&lt;p&gt;La transicion a este pensamiento apenas empieza, habiendo una vasta variedad de
contendientes, todos incompletos y mediocres, limitados en su concepcion a ser
simples facilitadores para los formatos HTML y Latex.&lt;/p&gt;

&lt;p&gt;Dentro de algunos exponentes de esta vision denominada &lt;em&gt;Lenguajes de marcado
ligejo&lt;/em&gt; tenemos a
&lt;a href=&#34;https://es.wikipedia.org/wiki/org-mode&#34;&gt;org-mode&lt;/a&gt;,
&lt;a href=&#34;https://es.wikipedia.org/wiki/wikitext&#34;&gt;wikitext&lt;/a&gt;,
&lt;a href=&#34;https://es.wikipedia.org/wiki/ReStructuredText&#34;&gt;ReStructured Text&lt;/a&gt; y
&lt;a href=&#34;https://es.wikipedia.org/wiki/markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La incognita ahora es: alguno de estos lograra suplantar a sus predecesores?
veremos una nueva concepcion de la documentacion? apareceran otros contendientes?&lt;/p&gt;

&lt;h2 id=&#34;que-es-markdown&#34;&gt;Que es markdown?&lt;/h2&gt;

&lt;p&gt;Un lenguaje de marcas ligero que no cuenta con una estandarizacion ni en
sintaxis, ni en implementacion. Su sintaxis de resaltado es ambigua y pobre, pero
intenta cubrir su mediocridad insertando directamente marcas XML en el
texto &amp;ldquo;humanamente legible&amp;rdquo;&amp;hellip; diluyendo asi su proposito, pero convirtiendolo en
un &amp;ldquo;buen&amp;rdquo; facilitador para la escritura de HTML&lt;/p&gt;

&lt;h3 id=&#34;syntaxis&#34;&gt;Syntaxis&lt;/h3&gt;

&lt;h3 id=&#34;encabezados&#34;&gt;Encabezados&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Encabezado principal
## Segundo nivel
### 3er. nivel
algo de texto
### 3er. nivel
mas texto

# Otro encabezado principal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Toda linea que inicia con uno o varios &lt;code&gt;#&lt;/code&gt; seguido por al menos un espacio en
blanco, es un encabezado.&lt;/p&gt;

&lt;p&gt;El texto (en la misma linea) donde esta el o los &lt;code&gt;#&lt;/code&gt; sera el titulo del encabezado.&lt;/p&gt;

&lt;p&gt;El nivel del encabezado depende del numero de &lt;code&gt;#&lt;/code&gt; al inicio de la linea, es
decir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; == &lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;##&lt;/code&gt; == &lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;###&lt;/code&gt; == &lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;####&lt;/code&gt; == &lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#####&lt;/code&gt; == &lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A que encabezado pertenece el texto? al primero que aparezca por encima de
el&lt;/p&gt;

&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;

&lt;p&gt;Disponemos de dos tipos de listas, ordenadas (numeradas) y no
ordenadas, para las primeras colocamos un numero (el que sea) seguido de un
punto y comenzamos a escribir&lt;/p&gt;

&lt;p&gt;listas ordenadas&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;1. elemento uno
2. elemento dos
3. elemento tres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para las segundas (listas no ordenadas) simplemente un guion al inicio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- elemento uno
- elemento dos
- elemento tres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;markdown no permite que un elemento tenga mas de un parrafo, por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;1. primer elemento de la lista
2. segundo elemento de la lista
3. tercer elemento de la lista
   con una linea adicional

   este texto, a pesar de estar indentado, no forma parte
   del tercer elemento, es un parrafo independiente

igual de independiente que este
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para hacer esto tendriamos que recurrrir a a html en si, convirtiendo lo
anterior en&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;p&amp;gt;primer elemento de la lista&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;p&amp;gt;segundo elemento de la lista&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;p&amp;gt;tercer elemento de la lista con una linea adicional&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;la linea adicional&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citas&#34;&gt;Citas&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;gt; esto es una cita

&amp;gt; esto tambien
&amp;gt; es una
&amp;gt; cita
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resaltado&#34;&gt;Resaltado&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;**bold**          ==&amp;gt; &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;
__bold__          ==&amp;gt; &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;
*italic*          ==&amp;gt; &amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt;
_italic_          ==&amp;gt; &amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt;
***bold&amp;amp;italic*** ==&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;bold&amp;amp;italic&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;
___bold&amp;amp;italic___ ==&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;bold&amp;amp;italic&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;
`code`            ==&amp;gt; &amp;lt;code&amp;gt;code&amp;lt;/code&amp;gt;
~~strike~~        ==&amp;gt; &amp;lt;s&amp;gt;strike&amp;lt;/s&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enlaces&#34;&gt;Enlaces&lt;/h3&gt;

&lt;p&gt;cualquier texto que cumpla con la regexp &lt;code&gt;(https?|ftp|file)://\S+&lt;/code&gt; (o algo asi) se
convierte en un enlace&lt;/p&gt;

&lt;p&gt;tambien se puede colocar un texto alternativo como &amp;ldquo;fachada&amp;rdquo; del enlace, con la sintaxis&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[texto-alternativo](enlace)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;imagenes&#34;&gt;imagenes&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;![texto-alternativo](enlace)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bloques-de-codigo&#34;&gt;Bloques de Codigo&lt;/h3&gt;

&lt;p&gt;hay dos sintaxis para esto, primero envolver una region con tres comillas
invertidas ``` contenidas en una linea propia, sin espacios al inicio. Colocar el nombre del lenguaje en el que se supone esta escrito
el codigo es opcional&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
``` lenguaje
mi codigo
+ codigo
y + codigo
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tiene el mismo efecto, dejar cuatro espacios en blanco al inicio de
cada linea, separando el texto con una linea en blanco al inicio y al final&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;texto estandar

    esto es codigo
    y esto tambien es codigo
    y tambien esto

+ texto estandar
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enlaces-1&#34;&gt;enlaces&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Markdown&#34;&gt;https://es.wikipedia.org/wiki/Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joedicastro.com/pages/markdown.html&#34;&gt;http://joedicastro.com/pages/markdown.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html&#34;&gt;http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joedicastro.com/comparativa-de-lenguajes-de-marcado-ligero.html&#34;&gt;http://joedicastro.com/comparativa-de-lenguajes-de-marcado-ligero.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nasciiboy.github.io/emacs/org-mode/&#34;&gt;https://nasciiboy.github.io/emacs/org-mode/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Desing Patterns (GoF)</title>
      <link>https://nasciiboy.github.io/prog/gof/</link>
      <pubDate>Tue, 13 Mar 2018 20:55:49 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/gof/</guid>
      <description>

&lt;p&gt;Cuando era &amp;ldquo;pequeño&amp;rdquo;, al oir &lt;em&gt;Patrones de diseño&lt;/em&gt;, lo unico que mi diminuta mente
consebia era a un grupo de programadores a tope de egocentrismo, gozosos de
inventarse terminos rimbombantes y pretenciosos, que solo ellos pudieran
entender mientras reian y con una mano sujetaban sus monoculos y con la otra
un a-y-h-p-a-d&lt;/p&gt;

&lt;p&gt;En aquella epoca de ignorancia, cada vez que iniciaba a programar algo
medianamente complejo, siempre me preguntaba si no existia algun escrito
perdido que proporcionara las herramientas para extructurar el codigo de forma
organica, audaz e inteligente, como si de diseñar un organismo se tratara, donde
todo funcionara en una armonica melodia y cada segmento de codigo tomara el
lugar de un instrumento musical identificable, a la vez que se mezclaba con
todos los demas.&lt;/p&gt;

&lt;p&gt;Resulta pues, que sin proponermelo, fuera por la disposicion del codigo de
ejemplo en los libros, por el uso de comandos del sistema o por necesidad y
cabezoneria de resolver ciertos problemas, algunas de estas formas misticas de
estructurar el codigo fueron apareciendo e incorporandose en forma de
experiencia practica, no muy racionalizada, pero aun asi interiorizada en los musculos&lt;/p&gt;

&lt;p&gt;mas sorprendente aun, fue descubrir, que estas &amp;ldquo;tecnicas para organizar codigo&amp;rdquo;
ya existian y no estaban ocultas. Resulta que aquella palabra extravagante
&lt;em&gt;Patron de diseño&lt;/em&gt; era eso mismo que estube buscando desde el inicio, &amp;ldquo;el metodo
para estructurar el codigo de una forma razonable, inteligente (y en ocaciones organica)&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;hellip; y el material donde se presentaron a sociedad los patrones lleba por nombre
&lt;em&gt;Desing Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; o tambien
apodado como &lt;em&gt;GoF&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; y la mejor manera que encuentro para presentar el material, no es otra que
dejar unos extractos:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los estudios de programadores expertos de lenguajes convencionales muestran
 que el conocimiento y la experiencia no se organizan simplemente en torno a la
 sintaxis, sino en estructuras conceptuales mayores, tales como algoritmos,
 estructuras de datos y modismos, asi como en maneras de lograr un determinado
 objetivo. Los diseñadores probablemente no piensan en la notacion
 que estan usando para documentar su diseño, sino que intentan comparar la
 situacion actual de diseño con planos, algoritmos, estructuras de datos y
 modismos que han aprendido en el pasado.&lt;/p&gt;

&lt;p&gt;Los informaticos nominan y catalogan las estructuras de datos y algoritmos,
 pero no suelen dar nombre a otros tipos de patrones. Los patrones de diseño
 proporcionan un vocabulario comun que los diseñadores usan para comunicar,
 documentar y explorar alternativas de diseño. Los patrones de diseño hacen que
 un sistema parezca menos complejo, permitiendonos hablar de el con un mayor
 nivel de abstraccion del que permite una notacion de diseño o un lenguaje de
 programacion. Los patrones de diseño elevan el nivel en el que diseñamos y
 discutimos diseños con nuestros colegas.&lt;/p&gt;

&lt;p&gt;Una vez que haya absorbido los patrones de diseño, su
 vocabulario de diseño cambiara casi con toda seguridad. Hablara directamente
 en terminos de los nombres de los patronesde diseño. Se oira asi mismo decir
 cosas como &amp;ldquo;aqui deberiamos usar el patron Observer&amp;rdquo;, o &amp;ldquo;extraigamos una
 estrategia de estas clases&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;tambien:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una de las mejores cosas de los patrones es que apartan las decisiones de
diseño del reino de la mera intuicion. Permiten que los autores sean
explicitos sobre las ventajas e inconvenientes que proporcionan, lo que
facilita ver los fallos de sus patrones y discutir con ellos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;y finalmente la definicion misma de los patrones ::&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Un patron de diseño nomina, da los motivos y explica sistematicamente un
diseño general que resuelve un problema de diseño recurrente en los sistemas
orientados a objetos. Describe el problema, la solucion, cuando aplicar este
y sus consecuencias. Tambien ofrece trucos de implementacion y ejemplos. La
solucion es una disposicion general de clases y objetos que resuelven el
problema. Esta adaptada e implementada para resolver el problema en un
determinado contexto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;imposible explicarlo mejor!&lt;/p&gt;

&lt;p&gt;Solo unas breves anotaciones personales para el yo del pasado:&lt;/p&gt;

&lt;p&gt;Primero, al libro le hace falta codigo &amp;ldquo;real&amp;rdquo; (almenos en la vercion que poseo.
La vercion en ingles menciona un CD con material, pero desconosco su alcance).
Se presentan fragmentos de codigo solo lo suficientemente desarrollados
como para (si se presta atencion y se guarda dicho codigo con avaricia) poder
crear una implementacion &amp;ldquo;basada en&amp;rdquo; y hacerla funcionar. Esto no cumple
demaciado con mis estadares didacticos para subnormal, pero es mejor que nada.&lt;/p&gt;

&lt;p&gt;Segundo, se utilizan diagramas algo cripticos con una sintaxis &amp;ldquo;inventada y
vieja&amp;rdquo;, asi que revisar el apendice que habla de ello, para darle algo de
sentido. Ademas para el codigo utilizan un C++ &amp;ldquo;primitivo&amp;rdquo; y algo de otro
lenguaje llamado smalltalk, que aunque sencillo (en el caso de tener un bagaje
minimo con C++) seguramente no sera donde termines aplicando los patrones&lt;/p&gt;

&lt;p&gt;y finalmente, La secciones de Implementacion, Codigo de Ejemplo y Usos Conocidos
de cada patron, en una primer lectura pueden abrumar y/o quedar en nada. Son
muchos patrones (aunque varios con aplicaciones &amp;ldquo;similares&amp;rdquo;), lo mas sensato es
enterarse donde, como y para que aplicarlos, asociarlos con su nombre y luego ya
si se da la oportunidad, investigar como implementar una vercion en codigo
practico y de ser posible, implementarla en el lenguaje donde te sientas comodo&lt;/p&gt;

&lt;p&gt;y ya esta, este jodido año estara en su mayoria dedicado a conocer, implementar
y adaptar patrones. Chahh, con esto y dominar las interfaces/composicion (y
canales) de Go sera mas que suficiente&amp;hellip; si no se cuela otro hobbie por
medio&amp;hellip; asm para gameboy (love2d, rust, (e)lisp, asm de arduino, haskell,
educacion escolarisada, trabajo(???)), no te acerces, alejate, a-l-e-j-a-t-e&lt;/p&gt;

&lt;h2 id=&#34;cobaya&#34;&gt;cobaya&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/nasciiboy/GoF_Desing-Patterns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como cualquier material que me importe un poco, Patrones de Diseño (GoF) ha
valido una adaptacion al formato de marcas (siempre en desarrollo, lento, lento
desarrollo del) morg (patrones == mas-desarrollo).&lt;/p&gt;

&lt;p&gt;La mision comenzo a principios de noviembre (&amp;hellip; supongo, porque el primer commit
es del 2 de diciembre). El material de referencia fue un pdf
infecto en español de aquellos que traen &amp;ldquo;fotocopias&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Lo primero fue transcribir a mano alzada palabra a palabra. Al principio probe a
aplicar un ocr, pero la tecnologia esa aun entrega resultados bastante jodidos,
sobre todo si como en este caso el texto no se ve y esta dispuesto de forma
optima. Lo mas dificultoso, fueron las secciones finales del PDF, pues tenia paginas en
desorden, asi como algunos bordes de texto desaparecido.&lt;/p&gt;

&lt;p&gt;Luego de la mecanografiada vino una revision superficial, y al mismo tiempo (con
otro pdf algo infecto) la adaptacion del material en ingles al morg,
que es de donde se extraen las imagenes en el producto final. Al principio la
idea era hacer una version en SVGs de las imagenes, tanto para la version en
ingles como en español&amp;hellip; pero es mucho, mucho trabajo y en este momento no
tengo el interes (o necesidad) para hacerlo.&lt;/p&gt;

&lt;p&gt;ya terminada tanto la adaptacion en ingles (sin correccion alguna y apenas
uno que otro enfasis del texto, solo adaptacion) como la primer revision
del texto en español, llego el momento de leer a detalle el material y aprender
formalmente, o esa era la idea. En la segunda revision, se corrigieron muchas
distografias, algunas tan aberrantes como &lt;strong&gt;patrnose&lt;/strong&gt; (patrones), lol, como es
posible escribir de esa manera? digo, entiendo substituir un caracter por alguno
en su cercania en el teclado, pero cambiar varias letras de posicion unicamente
puede revelar desordenes cognitivos exacervados &amp;hellip; ademas de eso, se corrigieron &amp;ldquo;lineas
repetidas&amp;rdquo;, palabras &amp;ldquo;inventadas&amp;rdquo; y oraciones no incluidas.&lt;/p&gt;

&lt;p&gt;No todos los errores los inclui, algunos ya estaban presentes en el material
traducido y los deje tal cual.&lt;/p&gt;

&lt;p&gt;Para las regiones en el PDF que no estaban visibles, utilice el traductor y la
version en ingles&lt;/p&gt;

&lt;p&gt;Finalmente el repositorio cuenta con versiones en html de los materiales, solo
por que el exportador del morg lo permite y para que quien no concuerde con mi
vision de documentacion en texto plano disponible directamente en el &amp;ldquo;editor&amp;rdquo; de
texto (emacs (por el momento como apaño) y con un marcador de por medio) tambien pueda aprovecharlo.&lt;/p&gt;

&lt;p&gt;si te es de utilidad y ademas corriges algunos palabros y encima quieres
agregarlos al repo pero sin que quede registrado, puedes enviarme el texto
corregido tal cual por correo (ademas de la cuenta habitual (ver el fondo),
tengo cuenta en protonmail, tambien como nasciiboy), cifrar y tomar
consideraciones extra&amp;hellip; claro, solo si se considera que difundir la cultura (en
todas sus formas) es incorrecto.&lt;/p&gt;

&lt;p&gt;El resto, como revisar, enfatizar y corregir la version en ingles, asi como todo
lo relacionado con las imagenes, lo dejo en manos de las generaciones por venir&lt;/p&gt;

&lt;p&gt;(o coloque un mandelbrot como &amp;ldquo;caratula&amp;rdquo; del libro, porque no se&amp;hellip; hay algo que
diga mas patron y diseño que un mandelbrot?)&lt;/p&gt;

&lt;p&gt;happy typping!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWK</title>
      <link>https://nasciiboy.github.io/prog/awk/</link>
      <pubDate>Mon, 05 Mar 2018 20:37:52 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/awk/</guid>
      <description>

&lt;p&gt;AWK es un lenguaje de programacion diseñado para procesar datos basados en
texto.&lt;/p&gt;

&lt;p&gt;El comando awk tiene la sitaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk CODIGO TEXTO-DE-ENTRADA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;awk toma el texto de entrada y lo divide en &lt;em&gt;Registros&lt;/em&gt; (por defecto lineas delimitadas
por &lt;code&gt;\n&lt;/code&gt;) y estas a su ves se dividen en campos (por defecto una secuencia de
caracteres que no sean un espacio).&lt;/p&gt;

&lt;p&gt;una ves awk recive la entrada, realiza un bucle secuencial por sus registros
(lineas) y a estos les aplica una orden que tiene la syntaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;condicion { accion }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;estas ordenes, pueden agruparse en una sola linea separandolas con punto y coma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;condicion_1 { accion_1 }; condicion_2 { accion_2 }; condicion_3 { accion_3 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o con saltos de linea,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;condicion_1 { accion_1 }
condicion_2 { accion_2 }
condicion_3 { accion_3 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;condicion&#34;&gt;condicion&lt;/h2&gt;

&lt;p&gt;la condicion para ser positiva simplemente debe ser distinta a cero. Si esto es
asi y no se especifica una accion, por defecto se imprime el registro
actual con un salto de linea al final. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produce&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;registro uno
registro dos
registro tres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si cambiamos la condicion por una cadena de caracteres, por ejemplo &lt;code&gt;awk &#39;&amp;quot;cadena&amp;quot;&#39;&lt;/code&gt;, el
resultado seria identico, ya que una cadena tambien es &lt;q&gt;distinta a cero&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Ahora, los registros de awk se dividen en campos y estos pueden &amp;ldquo;invocarse&amp;rdquo; como
&lt;code&gt;$1&lt;/code&gt; (primer campo), &lt;code&gt;$2&lt;/code&gt; (segundo campo), &lt;code&gt;$3&lt;/code&gt; (tercer campo) y asi
sucesivamente. Si el campo no existe, sera una cadena de caracteres vacia. El
campo &lt;code&gt;$0&lt;/code&gt; contiene registro en si mismo (la linea)&lt;/p&gt;

&lt;p&gt;Bien? Pues podriamos utilizar un campo especifico para compararlo con una cadena, de la
siguiente forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;$1 == &amp;quot;registro&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para de nuevo producir el resultado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;registro uno
registro dos
registro tres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por si no fuera suficiente, podemos comparar cada registro con una expresion
regular, asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;/re..stro/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde la seccion comprendida entre &lt;code&gt;/&lt;/code&gt; y &lt;code&gt;/&lt;/code&gt; vendria a ser la expresion
regular.&lt;/p&gt;

&lt;p&gt;A continuacion tenemos un ejemplo mas elaborado aplicando la comparacion con dos
expresiones regulares unidas en una condicion OR:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;/uno/ || /dos/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produciria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;registro uno
registro dos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tambien podemos hace una busqueda de una expresion regular dentro de una cadena
con la sintaxis &lt;code&gt;&amp;quot;cadena&amp;quot; ~ /regexp/&lt;/code&gt;&amp;hellip; y por supesto esta cadena bien puede
ser un campo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;$2 ~ /^[a-z]{3}$/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accion&#34;&gt;accion&lt;/h2&gt;

&lt;p&gt;en la &lt;em&gt;accion&lt;/em&gt; se permite especificar un variado numero de caracteristicas
propias de un lenguaje de programacion, como pueden ser condiciones &lt;code&gt;if&lt;/code&gt;, bucles
&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, declaracion de variables, asignaciones, invocacion a
funciones (nativas de awk y creadas por el usuario) y demas cosas magicas,
misticas y misteriosas como leer del teclado, leer ficheros o invocar comandos
del sistema&lt;/p&gt;

&lt;p&gt;cuando se declara una accion &amp;ldquo;solitaria&amp;rdquo; se asume que la condicion es verdadera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;{print $2}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;imprimiria los campos dos de cada registro en una linea propia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uno
dos
tres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por su parte con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;{print $2 &amp;quot; &amp;quot; $1}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se invertiria el orden de los capos de entrada en la salida&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uno registro
dos registro
tres registro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si la funcion &lt;code&gt;print&lt;/code&gt; no recive parametros, imprimiria el registro en si&lt;/p&gt;

&lt;h2 id=&#34;begin-end&#34;&gt;BEGIN &amp;amp; END&lt;/h2&gt;

&lt;p&gt;awk cuenta con dos &amp;ldquo;condiciones&amp;rdquo; especiales que permiten realizar acciones antes
de que inicie el bucle por los registros (condicion &lt;code&gt;BEGIN&lt;/code&gt;) y despues de que
este termine (condicion &lt;code&gt;END&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | awk &#39;BEGIN{print &amp;quot;inicio – invirtiendo entrada&amp;quot;};END{print &amp;quot;inversion finalizada&amp;quot;};{print $2 &amp;quot; &amp;quot; $1};&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produce&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inicio – invirtiendo entrada
uno registro
dos registro
tres registro
inversion finalizada
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el orden de las condiciones &lt;code&gt;BEGIN&lt;/code&gt; y &lt;code&gt;END&lt;/code&gt; no tiene importancia&amp;hellip; a menos que
se declaren mas de una vez, en cuyo caso se evaluaran segun aparescan&lt;/p&gt;

&lt;h2 id=&#34;ficheros&#34;&gt;ficheros&lt;/h2&gt;

&lt;p&gt;a medida que el &lt;em&gt;codigo&lt;/em&gt; enviado a awk aumenta de complejidad podemos colocarlo
en un fichero e indicarle a awk donde se encuentra el codigo de la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ awk -f fichero-de-codigo entrada-de-texto
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scripts&#34;&gt;scripts&lt;/h2&gt;

&lt;p&gt;tambien podemos crear un script en si, al que &amp;ldquo;enviar&amp;rdquo; la entrada. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /usr/bin/awk -f

# esto es un comentario
# aqui el inicio
BEGIN{print &amp;quot;inicio – invirtiendo entrada&amp;quot;}

# aqui la(s) condicion(es)
{print $2 &amp;quot; &amp;quot; $1}

# aqui el final
END{print &amp;quot;inversion finalizada&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;colocado en un fichero de nombre &amp;ldquo;prueba.awk&amp;rdquo;, se invocaria como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./prueba.awk entrada-de-texto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;registro uno\nregistro dos\nregistro tres&amp;quot; | ./a.awk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;em&gt;NOTA&lt;/em&gt; awn se encuentra en &lt;code&gt;/usr/bin/awk&lt;/code&gt; y/o &lt;code&gt;/bin/awk&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&#34;un-simple-sumador-de-campos&#34;&gt;un simple sumador de campos&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#! /usr/bin/awk -f

# esto es un comentario
# aqui el inicio
BEGIN {
    campo_a = 0
    campo_b = 0
    print &amp;quot;----- -----&amp;quot;
}

# aqui la(s) condicion(es)
{
    printf( &amp;quot;%5d %5d\n&amp;quot;, $1, $2 )
    campo_a += $1
    campo_b += $2
}

# aqui el final
END {
    print &amp;quot;===== =====&amp;quot;
    printf( &amp;quot;%5d %5d\n&amp;quot;, campo_a, campo_b )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un ejemplo de uso&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;1 3\n2 6\n3 9\n4 12&amp;quot; | ./a.awk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produce&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----- -----
    1     3
    2     6
    3     9
    4    12
===== =====
   10    30
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;miscelanea&#34;&gt;miscelanea&lt;/h2&gt;

&lt;p&gt;canbiar la variable interna &lt;code&gt;IGNORECASE&lt;/code&gt; a un valor distinto de 0, proboca que
awk ignore la diferencia entre mayusculas y minusculas&lt;/p&gt;

&lt;p&gt;la funcion interna &lt;code&gt;sub(a, b)&lt;/code&gt; busca la primer coincidencia con una cadena, numero o regexp en el
registro actual (&lt;code&gt;a&lt;/code&gt;) y la substituye por un numero o cadena (&lt;code&gt;b&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;la funcion interna &lt;code&gt;gsub(a, b)&lt;/code&gt; tiene los mismos parametros de &lt;code&gt;sub&lt;/code&gt; solo que se realizan
substituciones &lt;em&gt;para todas&lt;/em&gt; las coincidencias&lt;/p&gt;

&lt;p&gt;una forma rudimentaria para capturar agrupaciones dentro de un array (solo gawk)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gawk &#39;match($0, pattern, ary) {print ary[1]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printf &amp;quot;abcdef\nbkhtne&amp;quot; | gawk &#39;match($0, /b(.*)e/, a) {print a[1]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una forma de iterar por los caracteres de un registro/cadena&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  split($0, chars, &amp;quot;&amp;quot;)
  for (i=1; i &amp;lt;= length($0); i++) {
    printf(&amp;quot;%s\n&amp;quot;, chars[i])
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iterar sobre los campos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ for( i=1; i&amp;lt;=NF; i++ ) print &amp;quot;linea:&amp;quot; NR &amp;quot;:campo:&amp;quot; i &amp;quot;:&amp;quot; $i }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enlaces-y-cosas&#34;&gt;enlaces y cosas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://web.archive.org/web/20060622132928/http://www.linux-es.org:80/art.php?id=206&#34;&gt;AWK paso a paso&amp;hellip; y sin usar el ratón&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xavi.ivars.me/arxius/manuals/awk/manual_awk.pdf&#34;&gt;El lenguaje de programacion awk/gawk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/AWK&#34;&gt;https://es.wikipedia.org/wiki/AWK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2957684/awk-access-captured-group-from-line-pattern&#34;&gt;https://stackoverflow.com/questions/2957684/awk-access-captured-group-from-line-pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;un &amp;ldquo;juego&amp;rdquo; escrito en awk:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/TheMozg/awk-raycaster
$ cd awk-raycaster

# reducir el tamaño de los caracteres de terminal hasta que se vea bien
$ awk -f awkaster.awk
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Programming Howto (19-01-18)</title>
      <link>https://nasciiboy.github.io/prog/programming-howto/</link>
      <pubDate>Fri, 19 Jan 2018 21:58:23 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/programming-howto/</guid>
      <description>

&lt;p&gt;Hace tiempo que tenia intenciones de escribir mi version sobre por que la
programacion rockea y cual deberia ser el camino a seguir&amp;hellip; je, je, pero como
estoy bastante lejos de considerarme &amp;ldquo;un programador&amp;rdquo; (de la misma forma que
solo considero a un musico a quien vive de la musica y/o reconosco y
apresio su obra). No se, pienso que unicamente los consejos de un experto
(«alquien que domina un tema tan a profundidad, que es capas de intuir,
investigar, aplicar y desarrollarlo de formas aun no documentadas») tienen valia
y son dignos de atencion&amp;hellip; sin embargo, quien demonios es un experto?  he?
conoces a algun experto? yo no&lt;/p&gt;

&lt;p&gt;asi que, sin ser ningun experto, pero dandomelas de cuñado + unos años de
bagancia, dispersion, lecturas aleatorias, libros decepcionantes, saberes
aprendidos (y olvidados por falta de aplicacion) y otros vaivenes de proyectos
que terminan llendo a ningun sitio, creo, he almacenado la suficiente
experiencia para almenos dar un par de consejos a mi yo del pasado si es que lee
esto de alguna forma&lt;/p&gt;

&lt;p&gt;pero primero y copipasteando &lt;a href=&#34;https://henrikwarne-com.cdn.ampproject.org/c/s/henrikwarne.com/2012/06/02/why-i-love-coding/amp/&#34;&gt;un post&lt;/a&gt;
(en engrish) (con algunas modificaciones hirientes) &amp;ldquo;&lt;strong&gt;Las razones por las que me encanta programar!&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;La alegría de hacer cosas. La programación se basa fundamentalmente en la
creación de soluciones a problemas. Al final del día, se ha creado algo que
no existía esa mañana, y eso es en sí mismo satisfactorio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La fascinación de crear objetos complejos en forma de rompecabezas que
entrelazan piezas móviles y verlas trabajar en ciclos sutiles, jugando con
las consecuencias de los principios incorporados desde el principio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La alegría de aprender siempre, que nace de la naturaleza no repetitiva de la
tarea. Mientras uno construye el programa, se amplía constantemente la
comprensión tanto del problema como de la solución. Además, casi no hay
límite a lo se puede aprender para mejorar «lenguajes, algoritmos,
metodología, herramientas, &amp;hellip;»&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;El programador, como el poeta, trabaja sólo ligeramente alejado de los
pensamientos puros. Construye sus castillos en el aire, desde el aire,
creando por el ejercicio de la imaginación. Sin embargo, el constructo
programático, a diferencia de las palabras del poeta, es real en el sentido
de que se mueve y trabaja, produciendo resultados visibles separados del
propio constructo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La expresividad del código. Suena contraintuitivo, dada la especificación
estricta de un lenguaje de programación, y las relativamente pocas
construcciones que contiene (comparado con un lenguaje natural para humanos), pero
hay un número casi infinito de formas de escribir un programa para resolver
un problema dado (no trivial). Primero y ante todo, se decide el nombre de
clases, métodos y variables, pero también el algoritmo, la partición de la
lógica y finalmente la distribucion del codigo. Todos estos factores se
combinan para dar al programador gran libertad para expresar la solución.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;materiales&#34;&gt;Materiales&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cualquier procesador donde pueda instalarse un sistema GNU (o BSD) (ni
androides, o winbugs son dignos de la tarea, hay que formatear del disco esas
aberraciones), si se trata de un hardware de la manzana puede servir, pero no
te conformes con imitaciones genericas e instala GNU, con sus 3 letras, asi en
grande y en mayuscula&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con poder ejecutar una terminal puro y duro es suficiente para cacharrear, mas
  si se desa una experienca completa y con un entorno grafico GNOME (el mas
  chulo de todos), los requerimientos minimos serian&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;procesador de doble nucleo (basicamente cualquiera procesador de &lt;strong&gt;sobremesa&lt;/strong&gt;
salido en los ultimos 10 años, una laptop? ja, ja, ja y ja, si te va el
BDSM, adelante)&lt;/li&gt;
&lt;li&gt;al menos 3GB de ram, 2 en casos exepcionales y siendo bastante conservadores
con el uso de esta. Preferentemente 4GB en adelente y de ser posible 8 para
&amp;ldquo;jamas&amp;rdquo; tener ninguna preocupacion&lt;/li&gt;
&lt;li&gt;1TB de almacenamieto (HDD y/o SDD), para almacenar mucho codigo, libros y
musica, seehh mucha musica. El almacenamiento nunca es suficiente, el
interne es grande y generoso. Si esta dentro del presupuesto mejor montar
una placa ATX o Micro ATX con 4 o mas puertos SATA&lt;/li&gt;

&lt;li&gt;&lt;p&gt;muchos puertos usb, nunca son suficientes: teclado, raton, adaptador wifi,
gamepad inalambrico, cable del mobil, memorias, etc, etc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Un monitor. Preferentemente dos con entradas acordes a la placa. Con cualquier
monitor roñoso es posbile programar, pero como se va a pasar mucho tiempo con
la vista fija leyendo, preferir la mejor calidad de imagen y
resolucion. Tamaño? 17 pulgadas en adelante&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Un teclado en condiciones, con teclas que no se peguen, mecanico si entra en
el presupuesto&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;un raton que funcione, tambien que no sea roñoso (logitech tiene calidad y buen precio)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unos audifonos de diadema, comodos y con calidad de sonido decente, no tienen
que ser caros, solo confiables, sin ruido ni distorcion (llevo con unos sony
MDR-ZX100 cerca de 3 años y han cumplido su funcion (~15 dolares))&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;un cuaderno y pluma o lapiz. Mas que para tomar apuntes, para hacer dibujos y
diagramas que ayuden a visualizar ideas&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;una silla comoda, con movimiento reclinable, giratorio, pero que de soporte a
la columna&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preparativos&#34;&gt;Preparativos&lt;/h2&gt;

&lt;p&gt;Aprende a instalar la distribucion GNU, romper particiones, cosas basicas de
repositorios y administracion del sistema. Ser un Sysadmin es aburrido y carente
de emocion, asi que no indagues demasiado&lt;/p&gt;

&lt;p&gt;con cual (distro) empezar? &lt;strong&gt;Debian&lt;/strong&gt;, instalas, configuras hasta que todo funcione y se
amolde a tus necesidades y te olvidas un par de años sobre actualizar cosas,
quiza si estas acostumbrado a los entornos &amp;ldquo;retro&amp;rdquo; pero con un toque de
elegancia Linux Mint. Otra opcion seria OpenSuse, anuque en esta simpre siento
que es algo incomoda-como-que-corporativa-o-algo-asi, no se.&lt;/p&gt;

&lt;p&gt;Si el hardware es muy quisquilloso (o nuevo) prueba con fedora&amp;hellip;&lt;/p&gt;

&lt;p&gt;o si eres mas audas con algun derivado de Arch. Hay muchas distros por hay
fuera, pero ve a las grandes, con gente (mucha gente) detras y que no se queden en un
experimento&lt;/p&gt;

&lt;p&gt;M-e-c-a-n-o-g-r-a-f-i-a, o si, aprendela! lo pospuse cerca de 3 años (despues de
la era del ñu) perdiendo el tiempo entre la lectura e ingresar datos
penosamente, picando teclas viendo el teclado&lt;/p&gt;

&lt;p&gt;El entrenamiento sera de aproximadamente 3 meses hasta tener confiansa y
fluides, pero valdra cada segundo invertido, a diferencia de lo que la
modernidad indica, el teclado es (de momento) la interfaz mas eficiente para
interactuar con el sistema (nota: la &lt;a href=&#34;https://es.wikipedia.org/wiki/Disortograf%C3%ADa&#34;&gt;distografia&lt;/a&gt; y pesima redaccion es algo mas
dificultoso mejorar, incluso incurable).&lt;/p&gt;

&lt;p&gt;Cual distribucion de teclado? español?  ingles?  ninguna! &lt;strong&gt;programmer dvorak&lt;/strong&gt;
en ingles, buscate la vida, pero cambia los control, blockmayus (y otras teclas)
de posicion, asi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/nascii-dvorak.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Es preferible que aprendas ingles (aun pendiente), mas diria que los primeros
años del trayecto no es necesario, hay muchas cosas que requieren atencion y &lt;em&gt;los basicos&lt;/em&gt;
estan en español. Por el trayecto y el contacto cotidiano (musical, visual y sintactico)
se aprende lo suficiente para apañarse, mas preparate apropiadamente en esa
lengua, tarde o temprano te sera necesaria&lt;/p&gt;

&lt;h2 id=&#34;the-thing&#34;&gt;the thing&lt;/h2&gt;

&lt;p&gt;antes de proseguir, una duda que tenia al principio y aqui es el sitio donde
debo responderla. Puedo aprender por mi cuenta o es necesario ir a un instituto
a que un iluminado me transmita estos misterios?&lt;/p&gt;

&lt;p&gt;primero, la programacion es compleja y a la vez muy sencilla. Sus bases no
requieren ninguna habilidad intelectual exepcional&amp;hellip; suponiendo que no seas subnormal&amp;hellip; a
menos que tu subnormalidad radique en ser retraido, ensimismado, egolatra y obsesivo
compulsivo, situacion en donde la subnormalidad amolda perfectamante con un
equipo de computo y las largas horas que pasaras frente a este, descubriendo
un ancho e inabarcable oceano de conocimiento y diversion!&lt;/p&gt;

&lt;p&gt;pero puesto al tema, vale la pena asistir a un aula o pagarle a un
tutor? diria que no, de hecho seria desperdiciar tiempo y dinero cuando aun no
sabes si eres apto, como saber si eres apto? si apredes lo eres, si no
pueeeessssshhh noh.&lt;/p&gt;

&lt;p&gt;Si, alguien iniciado te puede ahorrar mucho, mucho tiempo indicando donde
deberias invertir tu esfuerzo o aclarando algunos puntos especificos. Aun asi,
la programacion (como cualquier otra cosa) requiere mas transpiracion y esfuerzo
que intelecto (quiza algo inerente al ineficiente &amp;ldquo;diseño humano&amp;rdquo;), es decir, para
aprender a programar y hacerlo bien, es necesario practicar, fallar, probar,
fallar de nuevo, olvidar, volver a intentar, aprender un nuevo &amp;ldquo;truco&amp;rdquo; mas y
repeter el proceso nuevamente, paso a paso durante unos cuantos años&amp;hellip; cuantos?
los suficientes como para olvidar que algun dia no tenias ni puta idea y ahora
esos momentos preteritos parecen hilarantes, es mas, si alguien en tu mismo
estado inicial se acerca a preguntar por guia seguro que, o lo miras con
indiferencia, o con misericordia por el largo recorrido que tiene por delante&lt;/p&gt;

&lt;p&gt;asi que en resumen, si! puedes aprender &amp;ldquo;por tu cuenta&amp;rdquo;. La mejor y mas paciente
guia es un libro bien escrito, claro, en ocaciones explicito a niveles
pornograficos, en otras misterioso y arido&lt;/p&gt;

&lt;p&gt;ahora si &amp;gt; que, como y por que&amp;hellip; Aprende C, con Emacs, Bash y GCC&lt;/p&gt;

&lt;p&gt;Si bien C no es &amp;ldquo;el lenguaje&amp;rdquo; mas cool del barrio, si que es base y fundamento
para la practica totalidad de lenguajes populares actuales, los principios estan
hay. Si, si, es verdad, C es severo, pero no demaciado, mas el esfuerzo que
viene con el aporta los siguientes puntos te seran de utilidad&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Con C, te haces una idea general de los fundamentos de la maquina,
almacenamiento, procesamiento, texto, codigo ejecutable, compilacion,
ejecucion, pero sobre todo, se desvela la magia detras del paradicma &amp;ldquo;UNIX&amp;rdquo;,
con la debida desmitificacion de la linea de comandos, tuberias, y retornos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C es ridiculamente pequeño, solo tiene los rudimentos, pero no creas que sera
sencillo, aun lo mas basico como saber hacer un bucle, un
(post|pre)(incremento|decremento) tiene que ser dominado, switches,
if-else&amp;rsquo;s, declaracion de variables, arreglos, estructuras, funciones (y sus
parametros), recursividad, punteros, punteros a funciones, arreglos con
punteros a funciones, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conocer sobre Programacion orientada a objetos es inecesario en este punto,
  es una complicacion adicional y prematura&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GCC y terminal, ohhh yhea! aprende los tres comandos minimos, a moverte por
los directorios, crear ficheros, ejecutar programas y compilarlos, nada mejor
que una pantalla obscura con letras intimidantes para sentirte poderoso&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Emacs! Editores hay cientos, Emacs, solo uno&amp;hellip; (o no). Ningun programa que
halla existido o existira le hace sombra a este imponente y glorioso
interprete de elisp con piel de editor de texto, puede que desconoscas el
significado de estas palabras, mas con dedicar una tarde a sus &amp;ldquo;atajos&amp;rdquo;
fundamentales es suficiente para crear tus ficheritos de programacion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con el tiempo descubriras que emacs es abrumador, &lt;em&gt;el fruto mas puro que la
  programacion puede entregar&lt;/em&gt;, no conoce fronteras ni limitaciones&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuando dices que &amp;ldquo;sabes&amp;rdquo; programar en C, se hace el silencio, los presentes
se miran entre ellos y luego te miran con respeto&amp;hellip; o no&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sin importar el punto, herramiento, lenguaje o programa, lo que ha de aprenderse
es inmenso, en lugar de lanzarte directamente a la boragine informatica, tomalo
serenamente, una cosa a la vez, aprede cuando sea necesario, lee sobre nuevos
temas, sigue enlaces, pero no te comprometas, ni te exijas memorizacion alguna o
puedes abrumarte. Veras que con el tiempo recordaras sin notarlo aquellos
comandos, funciones y atajos que de verdad necesitas, e iras sumando
conocimentos incrementalmente&amp;hellip; aunque el cerebro humano es limitado (llega un
momento en que el buffer se satura y cuando entra algo nuevo, algo sale sin que
te des cuenta&amp;hellip;)&lt;/p&gt;

&lt;h3 id=&#34;los-libros&#34;&gt;Los libros&lt;/h3&gt;

&lt;h4 id=&#34;como-programar-en-c-c-y-o-java-4th-edicion-deitel-deitel&#34;&gt;COMO PROGRAMAR EN C (/C++ (y/o Java)) 4th edicion (Deitel &amp;amp; Deitel)&lt;/h4&gt;

&lt;p&gt;Son aproximadamente 500 paginas. Explicaciones detalladas y &amp;ldquo;didacticas&amp;rdquo;,
  incrementales, muy incrementales.&lt;/p&gt;

&lt;p&gt;Puedes aprender de 0 a &amp;ldquo;iniciado&amp;rdquo;, te dejara una idea muy clara de como es
  programar (en los &amp;ldquo;90&amp;rdquo; antes del internet&amp;hellip; &lt;em&gt;programar &amp;ldquo;de verdad&amp;rdquo;&lt;/em&gt;), eso si (con este como con
  todos los libros) intenta realizar todos los ejercicios que puedas, &lt;em&gt;TODOS&lt;/em&gt;,
  haciendolos sabras si aprendiste algo o no, ademas, creo que solo asi se
  acondiciona el cerebro para esto&lt;/p&gt;

&lt;p&gt;Si hay una seccion que no terminas de entender, no te preocupes, sigue
  leyendo hasta el final, ejecuta los programas propuestos, meconografia si
  quieres y luego de ver el programa en accion intenta entender de que se
  trata, vuelve a leer el capitulo y asi lo tendras mas claro&lt;/p&gt;

&lt;p&gt;Sobre GCC, Bash apenas necesitas lo basico en algun post lo encontraras o en
  su defecto hojea &lt;a href=&#34;https://nasciiboy.github.io/data/bash.pdf&#34;&gt;este&lt;/a&gt; para bash y &lt;a href=&#34;https://nasciiboy.github.io/data/GCC.pdf&#34;&gt;este&lt;/a&gt; otro para
  gcc, sobre los makes, je, nunca lo aprendiste&amp;hellip;&lt;/p&gt;

&lt;p&gt;de Emacs, con el tutorial integrado (&lt;code&gt;Ctrl-h&lt;/code&gt; y luego &lt;code&gt;t&lt;/code&gt;), tambien y aunque
  esta un poco retro y fuera de interne &lt;a href=&#34;https://nasciiboy.github.io/data/rpublica-emacs.zip&#34;&gt;rpublica&lt;/a&gt; o
  consulta la siguiente &lt;a href=&#34;http://quijotelibre.com/recursos-gnu-emacs-y-org-mode/&#34;&gt;recopilacion&lt;/a&gt; del quijote libre&lt;/p&gt;

&lt;h4 id=&#34;c-k-r-2-da-version&#34;&gt;C (K&amp;amp;R) (2^da version)&lt;/h4&gt;

&lt;p&gt;Un libro aspero casi hostil, pero muy clarificador sobre como esta construida
  la biblioteca estandar, de hecho diria que enseña a implimentarla.&lt;/p&gt;

&lt;p&gt;El estilo esta algo desfasado y con seguridad nunca lo utilices en &amp;ldquo;el mundo real&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Mas importante que las formas, es el contenido, diria que esta es la
  verdadera prueba, el bautiso de fuego&lt;/p&gt;

&lt;h4 id=&#34;pausa&#34;&gt;Pausa&lt;/h4&gt;

&lt;p&gt;dedicate a programar en C, algo deverias tener en mente en este
  momento, esto te ayudara a afirmar los conocimientos.&lt;/p&gt;

&lt;p&gt;Si lo que te interesa son los videojuegos, programa algo en
  &lt;a href=&#34;https://github.com/nasciiboy/NCURSES-Programming-HOWTO&#34;&gt;ncurses&lt;/a&gt; (&lt;a href=&#34;http://nasciiboy.github.io/prog/cobaya.zip&#34;&gt;tambien relacianado&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;luego, quiza lee superficialmente el resto del libro de Deitel
  para colocar en tu cerebro de que va eso del POO (o OOP), ademas de conocer
  los rostros de C++ y Java&lt;/p&gt;

&lt;h4 id=&#34;the-go-programming-language&#34;&gt;The Go Programming Language&lt;/h4&gt;

&lt;p&gt;uff, a las bases de C, se les recubre con un toque de &amp;ldquo;programacion moderno&amp;rdquo; y
  obtienes Go, un languje con una POO casi invisible ademas de poco
  convencional. Te suman una libreria estandar en condiciones, gestor de
  dependencias, documentacion, pruebas y &amp;ldquo;perfilado&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Un todo en uno, que llebara tus bases a programas &amp;ldquo;grandes&amp;rdquo; sin sacrificar
  (demaciado) rendimiento ni incluir conceptos complejos, encima, como C es un
  lenguje compacto, puedes ver por &lt;a href=&#34;https://github.com/nasciiboy/TGPL/&#34;&gt;aca&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;patrones-de-diseño-gof&#34;&gt;Patrones de Diseño (GoF)&lt;/h4&gt;

&lt;p&gt;el paso definitivo en el camino entre ser un programador mediocre sin respeto
  ni admiracion al espiritu que habita en el silicio&amp;hellip; o un cuñao medio
  entendido.&lt;/p&gt;

&lt;p&gt;En resumen, unos diseños para ensamblar abstracciones sobre las abstracciones
  (sobre las abstracciones hardware) de lo que deberias saber en este punto&lt;/p&gt;

&lt;p&gt;Apartir de aqui, puedes ingresar a la carrera (mates, sistemas, redes y esas
cosas que dan cache), buscar trabajo, o quiza si eres afortunado encerrarte a
programar en solitario una temporada por mero hobbie, o finalmente abandonar y
aprender otra cosa&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TextTable2HtmlTable (Volume Three)</title>
      <link>https://nasciiboy.github.io/prog/morg-table-iii/</link>
      <pubDate>Mon, 15 Jan 2018 14:31:33 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-table-iii/</guid>
      <description>

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://nasciiboy.github.io/img/jb130510.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-como-parsear-una-tabla-en-texto-plano-para-convertirla-en-una-tabla-html-u-otra-cosa-y-escribir-tres-post-sobre-ello-con-explicaciones-cripticas-codigo-de-ejemplo-en-golang-tercera-parte-conclucion&#34;&gt;o, como &amp;ldquo;parsear&amp;rdquo; una tabla en texto plano para convertirla en una tabla html (u otra cosa) y escribir tres post sobre ello con explicaciones cripticas (+ codigo de ejemplo en Golang) – Tercera Parte &amp;ldquo;Conclucion&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;finalizando con &amp;ldquo;la saga&amp;rdquo; de post mal escritos, en la &lt;a href=&#34;../morg-table-ii/&#34;&gt;entrega
anterior&lt;/a&gt; se mostro el metodo de analizar la tabla en texto
plano como un conjunto de cuadrilateros &amp;ldquo;con contorno&amp;rdquo; enviando un emisario al
punto 0,0 (y,x) de la cuadricula.&lt;/p&gt;

&lt;p&gt;En esta ocacion se ha preparado el codigo como una especie de simulacion de lo
que seria un paquete &amp;ldquo;serio&amp;rdquo;&amp;hellip; sin probar en un campo real y por ello
posiblemente cuente con carencias aberrantes, pero como antes mencione, cuando
lo incorpore al proyecto morg, dificil sera aplicarlo en otro proyecto sin
intercepcion de por medio, ademas colocarlo aqui servira de testigo si quiero
saber como era el concepto inicial&lt;/p&gt;

&lt;p&gt;la interfaz al usuario se limita a ver unas cuantas constantes (que no puede
usar ni modificar), dos funciones y dos estructuras (todas sin documentacion alguna)
(&lt;code&gt;go doc&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const RIGHT = iota ...
const CORNER = &#39;+&#39;
const HEDGE  = &#39;-&#39;
const HEDGEF = &#39;~&#39;
const HEDGEH = &#39;=&#39;
const OUTSIDE = &#39;\uFFFD&#39;
const VEDGE = &#39;|&#39;
func TextTable2HtmlTable(data string) (string, error)
type Cell struct{ ... }
type Table struct{ ... }
    func Text2Table(txtTable string) (t Table, e error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;las funciones regresan errores (algo cripticos) y las tablas pueden dividirse con un
encabezado, cuerpo y &amp;ldquo;pie&amp;rdquo;. Una funcion (&lt;code&gt;Tex2Table&lt;/code&gt;) convierte el texto en una
tabla (&lt;code&gt;Table&lt;/code&gt;)  procesada de celdas (&lt;code&gt;Cell&lt;/code&gt;) y la otra (&lt;code&gt;TextTable2HtmlTable&lt;/code&gt;)
entrega una tabla en formato html apartir de su entrada en texto plano.&lt;/p&gt;

&lt;p&gt;Un ejemplo de tabla seria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+-------------------------------------------------+
| una tabla realmente dificil de dibujar a mano   |
+------+----+----+----+---------------------------+
|  jo  | jo | jo | jo | y mas jos como encabezado |
+======+====+====+====+====+======================+
|             a            |          b           |
+------------------+-------+------+---------------+
|        c         |   d   |  e   |               |
+--------+---------+-------+------+      f        |
|   g    |      h                 |               |
+--------+--+----------------+----+-+-------------+
|           |        j       |      |             |
|  i        +--------+-------+   k  |      l      |
|           |    m   |   n   |      |             |
+~~~~~~~~~~~+~~~~~~~~+~~~~~~~+~~+~~~+~~~~~~~~~~~~~+
|      con un pie de pagina     |   o algo asi    |
+-------------------------------+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que produce:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;thead&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;th colspan=&amp;quot;13&amp;quot;&amp;gt;&amp;lt;p&amp;gt; una tabla realmente dificil de dibujar a mano &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;p&amp;gt; jo &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;th colspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; jo &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;p&amp;gt; jo &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; jo &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;th colspan=&amp;quot;6&amp;quot;&amp;gt;&amp;lt;p&amp;gt; y mas jos como encabezado &amp;lt;/p&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;8&amp;quot;&amp;gt;&amp;lt;p&amp;gt; a &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;p&amp;gt; b &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;p&amp;gt; c &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; d &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; e &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;2&amp;quot; rowspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; f &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; g &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;9&amp;quot;&amp;gt;&amp;lt;p&amp;gt; h &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot; rowspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; i &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;6&amp;quot;&amp;gt;&amp;lt;p&amp;gt; j &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot; rowspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; k &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td rowspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;p&amp;gt; l &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; m &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; n &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;tfoot&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;p&amp;gt; con un pie de pagina &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;p&amp;gt; o algo asi &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tfoot&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y se ve (sin css por medio) asi:&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;thead&gt;
  &lt;tr&gt;&lt;th colspan=&#34;13&#34;&gt;&lt;p&gt; una tabla realmente dificil de dibujar a mano &lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;&lt;p&gt; jo &lt;/p&gt;&lt;/th&gt;&lt;th colspan=&#34;2&#34;&gt;&lt;p&gt; jo &lt;/p&gt;&lt;/th&gt;&lt;th&gt;&lt;p&gt; jo &lt;/p&gt;&lt;/th&gt;&lt;th colspan=&#34;3&#34;&gt;&lt;p&gt; jo &lt;/p&gt;&lt;/th&gt;&lt;th colspan=&#34;6&#34;&gt;&lt;p&gt; y mas jos como encabezado &lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;&lt;td colspan=&#34;8&#34;&gt;&lt;p&gt; a &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;5&#34;&gt;&lt;p&gt; b &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td colspan=&#34;5&#34;&gt;&lt;p&gt; c &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;3&#34;&gt;&lt;p&gt; d &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;3&#34;&gt;&lt;p&gt; e &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;2&#34; rowspan=&#34;2&#34;&gt;&lt;p&gt; f &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td colspan=&#34;2&#34;&gt;&lt;p&gt; g &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;9&#34;&gt;&lt;p&gt; h &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td colspan=&#34;3&#34; rowspan=&#34;2&#34;&gt;&lt;p&gt; i &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;6&#34;&gt;&lt;p&gt; j &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;3&#34; rowspan=&#34;2&#34;&gt;&lt;p&gt; k &lt;/p&gt;&lt;/td&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;p&gt; l &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td colspan=&#34;3&#34;&gt;&lt;p&gt; m &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;3&#34;&gt;&lt;p&gt; n &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tfoot&gt;
  &lt;tr&gt;&lt;td colspan=&#34;10&#34;&gt;&lt;p&gt; con un pie de pagina &lt;/p&gt;&lt;/td&gt;&lt;td colspan=&#34;3&#34;&gt;&lt;p&gt; o algo asi &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;pasemos a &lt;a href=&#34;https://nasciiboy.github.io/data/table3.go&#34;&gt;el codigo&lt;/a&gt; (guardar-como) (las pruebas
por &lt;a href=&#34;https://nasciiboy.github.io/data/table3_test.go&#34;&gt;aca&lt;/a&gt;, un &lt;code&gt;go test -v&lt;/code&gt; en una carpeta sin otro codigo go):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package katana


// importaciones estandar sin cosas raras
import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;sort&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;errors&amp;quot;
)

// constantes que se pueden modificar sin mucho problema para
// alterar el aspecto de una tabla
const OUTSIDE = &#39;\uFFFD&#39; // unicode.RuneError = &#39;\uFFFD&#39;
const CORNER  = &#39;+&#39;      //  +----+     //  +--------+-----+--------+
const VEDGE   = &#39;|&#39;      //  |    |     //  | header       |  Yhee! |
const HEDGE   = &#39;-&#39;      //  +----+     //  +========+=====+========+
                                        //  | body-A | B   |   C    |
                                        //  +~~~~~~~~+~~~~~+~~~~~~~~+
const HEDGEH  = &#39;=&#39;  // h == head       //  | Yhak!  |    footer    |
const HEDGEF  = &#39;~&#39;  // f == foot       //  +--------+-----+--------+


// convierte una tabla en texto plano (perfectamente entregada) en una estructura
// con los datos procesados, o entrega un error
func Text2Table( txtTable string ) (t Table, e error) {
  // se convierte la cadena de entrada en una cuadricula de runas
  runeTable := gridify( txtTable )
  // si no hay cuadricula, la cadena de entrada no tenia nada
  if runeTable == nil { return t, errors.New( &amp;quot;empty input&amp;quot; ) }

  // buscamos si existe un divisor de encabezado y pie en la tabla
  var yHead, yFoot int = 0, -1 // valores magicos de inicio
  for y, row := range runeTable {
    // si la fila es un encabezado
    if isHead( row ) {
      if yHead ==  0 {
        yHead = y
      // no puede haber mas de un encabezado
      } else { return t, fmt.Errorf( &amp;quot;there can only be one header, repetition in row %d&amp;quot;, y ) }
    }
    // si la fila es un pie
    if isFoot( row ) {
      if yFoot == -1 {
        yFoot = y
      // no puede haber mas de un pie
      } else { return t, fmt.Errorf( &amp;quot;there can only be one footer, repetition in row %d&amp;quot;, y ) }
    }
  }

  // se normalizan las columnas de encabezado y pie para simplificar el
  // analisis de contornos
  if yHead !=  0 { normalizeRuneTableRow( runeTable, yHead ) }
  if yFoot != -1 { normalizeRuneTableRow( runeTable, yFoot ) }

  // -----&amp;gt; basicamente lo mismo que en el post anterior con algun cambio poco interesante
  g         := new( grid ).init( runeTable )
  rows      := make( [][]*quad, 0, 10 )
  row       := make(   []*quad, 0,  5 )
  hotPoints := make( map[point]bool )
  xEdges, yEdges := map[int]bool{ 0: true }, map[int]bool{ 0: true }

  for next, y := new(point), 0; next != nil;  {
    s := g.newQuad(*next)

    if e = s.tourist(); e != nil {
      return t, fmt.Errorf( &amp;quot;square.tourist: %v&amp;quot;, e )
    }

    xEdges[ s.cornerC.x ] = true
    yEdges[ s.cornerA.y ] = true

    if y != s.cornerD.y {
      rows = append( rows, row)
      row  = make( []*quad, 0, 5 )
      y    = s.cornerD.y
    }

    row = append( row, s )

    if g.visit( s.cornerA.nmv( DOWN ) ) == &#39;|&#39; {
      hotPoints[ s.cornerA ] = true
    }

    if _, exist := hotPoints[ s.cornerC ]; exist {
      delete( hotPoints, s.cornerC )
      next = &amp;amp;s.cornerC
    } else if g.visit( s.cornerC.nmv( RIGHT ) ) == &#39;-&#39; {
      next = &amp;amp;s.cornerC
    } else {
      next = pullNextPoint( hotPoints )

      if next == nil { rows = append( rows, row) }
    }
  }
  // &amp;lt;--------------


  xS, yS :=  mapToSortIntArray(xEdges), mapToSortIntArray(yEdges)
  // internamente se utiliza una estructura para las celdas con
  // paremetros irrelevantes para la interfaz final, asi que se
  // copian a la estructura final
  table := make( [][]Cell, len( rows ) )
  for y, row := range rows {
    table[y] = make([]Cell, len( row ) )
    for x, q := range row {
      table[y][x].rowspan = rangeCells( q.cornerD.y, q.cornerA.y, yS )
      table[y][x].colspan = rangeCells( q.cornerD.x, q.cornerB.x, xS )
      table[y][x].data    = cutCellTxt( g.data, q.cornerD, q.cornerB )
    }

    // estos dos ifs son para identificar cuales filas pertenecen al
    // encabezado o pie (si existen), ademas se asignan al mismo tiempo.
    // De lo contrario, la seccion de la tabla (encabezado, cuerpo o pie)
    // es un &amp;quot;nil&amp;quot;
    if yHead != 0 &amp;amp;&amp;amp; (row[0].cornerA.y == yHead) {
      yHead  = y + 1
      t.Head = table[:yHead]
    }
    if yFoot != -1 &amp;amp;&amp;amp; (row[0].cornerD.y == yFoot) {
      yFoot  = y
      t.Foot = table[yFoot:]
    }
  }
  // la asignacion del cuerpo
  if yFoot == -1 { yFoot = len( table ) }
  if yFoot - yHead &amp;gt; 0 { t.Body = table[yHead:yFoot] }

  return
}

// la tabla en si [fila][celda]
type Table struct {
  Head [][]Cell
  Body [][]Cell
  Foot [][]Cell
}

// la celda, con informacion de cuantas columnas y filas abarca
// y el texto &amp;quot;rectangular&amp;quot; que contiene
type Cell struct {
  colspan, rowspan int
  data string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jo, la funcion principal quedo bastante extensa, lo cual no es bueno para hacer
pruebas&amp;hellip; pero creo que esto facilita entender el flujo del programa sin saltar
de un lado a otro del codigo. Es cierto que puede dividirse en fragmentos con un
nombre apropiado e incluso colocarlos con un orden descendente, ¡pero! pasar
parametros de un lado a otro no me entusiasma demaciado, tampoco hacer una
estructura mas que tenga dichos datos con metodos (para evitar la copia de parametros)&lt;/p&gt;

&lt;p&gt;La funcion que optiene y genera el formato html creo me ha quedado bastante
estetica y compacta, considerando el numero de acciones que realiza&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// en lugar de tener tres funciones distintas segun la seccion
// de la tabla a imprimir, utilizo un truco con estos dos arreglos
var zs = [3]string{ &amp;quot;thead&amp;quot;, &amp;quot;tbody&amp;quot;, &amp;quot;tfoot&amp;quot; }
var ys = [3]string{    &amp;quot;th&amp;quot;,    &amp;quot;td&amp;quot;,    &amp;quot;td&amp;quot; }

// la funcion que convierte directamente de texto a html
func TextTable2HtmlTable( data string ) (string, error) {
  t, e := Text2Table( data ) // se optiene la tabla procesada
  // si hubo un errror se informa
  if e != nil { return &amp;quot;&amp;quot;, fmt.Errorf( &amp;quot;Text2Table: %v&amp;quot;, e ) }

  buf := new( bytes.Buffer ) // un buffer por eficiencia
  fmt.Fprintf( buf,  &amp;quot;&amp;lt;table border=\&amp;quot;1\&amp;quot;&amp;gt;\n&amp;quot; )

  // aqui se itera sobre las tres secciones de la tabla
  // el indice es para el truco antes mencionado
  for i, sec := range [3][][]Cell{ t.Head, t.Body, t.Foot } {
    if sec == nil { continue } // si esta vacia la seccion se pasa a la siguiente

    fmt.Fprintf( buf,  &amp;quot;&amp;lt;%s&amp;gt;\n&amp;quot;, zs[i] )  // abre la seccion
      for _, row := range sec {           // bucle por la seccion, genera las filas
        buf.WriteString( &amp;quot;  &amp;lt;tr&amp;gt;&amp;quot; )       // imprime la etiqueta de fila
        for _, cell := range row {        // bucle por la fila, genera las celdas
          fmt.Fprintf( buf, &amp;quot;&amp;lt;%s&amp;quot;, ys[ i ] )
          if cell.colspan != 1 { fmt.Fprintf( buf, &amp;quot; colspan=\&amp;quot;%d\&amp;quot;&amp;quot;, cell.colspan ) }
          if cell.rowspan != 1 { fmt.Fprintf( buf, &amp;quot; rowspan=\&amp;quot;%d\&amp;quot;&amp;quot;, cell.rowspan ) }
          fmt.Fprintf( buf, &amp;quot;&amp;gt;&amp;lt;p&amp;gt;%s&amp;lt;/p&amp;gt;&amp;lt;/%s&amp;gt;&amp;quot;, SpaceSwap( cell.data, &amp;quot; &amp;quot; ), ys[ i ] )
        }
        buf.WriteString( &amp;quot;&amp;lt;/tr&amp;gt;\n&amp;quot; )      // se cierra la fila
      }
    fmt.Fprintf( buf,  &amp;quot;&amp;lt;/%s&amp;gt;\n&amp;quot;, zs[i] ) // se cierra la seccion
  }

  fmt.Fprintf( buf, &amp;quot;&amp;lt;/table&amp;gt;\n&amp;quot; )        // termina la tabla

  return buf.String(), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y listo, el resto es calderilla!&lt;/p&gt;

&lt;p&gt;por implementar, en este punto seria un juego hacer el exportador a digamos,
algun hijo de TeX, lo que si sera duro, es hacer un conversor tabla a texto y
algo complejo tambien un analizador de la orientacion del texto para agregar
estos datos a la tabla (centrado, a la izquierda a la derecha)&lt;/p&gt;

&lt;p&gt;por otro lado tambien sienta una buena base para generar tablas (o umls) como
imagenes o svgs, incluso un analizador de ascii a un dibujo o cosas por el
estilo&amp;hellip; un buen proyecto para alguien sin ideas&amp;hellip;&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TextTable2HtmlTable (Volume Two)</title>
      <link>https://nasciiboy.github.io/prog/morg-table-ii/</link>
      <pubDate>Wed, 10 Jan 2018 18:44:03 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-table-ii/</guid>
      <description>

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://nasciiboy.github.io/img/1ef7ys9dnksz.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-como-parsear-una-tabla-en-texto-plano-para-convertirla-en-una-tabla-html-u-otra-cosa-codigo-de-ejemplo-en-golang-segunda-parte&#34;&gt;o, como &amp;ldquo;parsear&amp;rdquo; una tabla en texto plano para convertirla en una tabla html (u otra cosa) (+ codigo de ejemplo en Golang) – Segunda Parte&lt;/h2&gt;

&lt;p&gt;En el &lt;a href=&#34;../morg-table/&#34;&gt;post anterior&lt;/a&gt; expuse una manera para parsear tablas
relativamente complejas, con una tecnica relativamente sencilla, con un codigo
relativamente interesante&amp;hellip; ahora la tecnica y la sintaxis ha cambiado, en
lugar de &amp;ldquo;concatenar&amp;rdquo; las columnas, se realiza un analisis de los contornos de
las celdas; ademas la sintaxis ha sido modificada para ser compatible con la que
utiliza (un estilo) de reStructuredText (es mas sencillo y supongo, (algun
dia&amp;hellip;) el editor del formato, tendra un programa auxiliar que mitigue el
fastidio de dibujar lineas):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                  +----------------------+
|   mi tabla compleja  |          |   mi tabla compleja  |
|-------|----|---------|          +-------+----+---------+
|  a    | b  |    c    |          |  a    | b  |    c    |
|---|---|----|----|----|          +---+---+----+----+----+
| d | e | f  |  g |  i |      \   | d | e | f  |  g |  i |
|   |   |----|----|----|  =====\  |   |   +----+----+----+
|   |   | i  |    j    |  =====/  |   |   | i  |    j    |
|   |---|----|---------|      /   |   +---+----+---------+
|   | k | l  |         |          |   | k | l  |         |
|   |   |----|    m    |          |   |   +----+    m    |
|   |   | n  |         |          |   |   | n  |         |
|   |   |----|---------|          |   |   +----+---------+
|   |   | o  |    p    |          |   |   | o  |    p    |
|---|---|----|---------|          +---+---+----+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pero, por que el cambio? bueno esta nueva version (sutilmente expuesta anteriormente)
permite evitar ambiguedades entre los delimitadores de la tabla y el contenido
de cada &amp;ldquo;celda&amp;rdquo;, ademas &lt;a href=&#34;https://nasciiboy.github.io/data/table2.go&#34;&gt;el codigo&lt;/a&gt; (guardar-como) no es demaciado complejo (pruebas
por &lt;a href=&#34;https://nasciiboy.github.io/data/table2_test.go&#34;&gt;aca&lt;/a&gt;, un &lt;code&gt;go test -v&lt;/code&gt; en una carpeta sin otro codigo go)&lt;/p&gt;

&lt;p&gt;Basicamente solo se modifica la forma de analizar la tabla. La convenienca de
pasar los datos de entrada a una cuadricula de runas y conocer la
dimencion-posicion relativa de las celdas con respecto a las demas, permanece sin
cambios.&lt;/p&gt;

&lt;p&gt;El codigo es severamente basico y asume datos de entrada correctos (en caso
contrario no seria extraño entrar en bucles infinitos). Aun no estoy conforme
con la estructura literarea del codigo, es poco intuitivo y casi nada
secuencial, tambien dudo un poco de los objetos que se utilizan, pero en fin las
bases estan aqui, el codigo de referencia estara dentro de
&lt;code&gt;github.com/nasciiboy/morg/katana/table.go&lt;/code&gt; en el repo de morg (algun dia) y
lamentablemente sera poco reutilizable debido a la naturaleza (actual) de la
forma en como se recorre el texto de entrada&amp;hellip; pero bueno, al ajo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// constantes para definir el contorno de la tabla
const CORNER  = &#39;+&#39;  //  +----+
const VEDGE   = &#39;|&#39;  //  |    |
const HEDGE   = &#39;-&#39;  //  +----+

// y una constante para indicar que la posicion se encuentra
// fuera de la cuadricula de la tabla
const OUTSIDE = &#39;\uFFFD&#39; // unicode.RuneError = &#39;\uFFFD&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unas estructuras fundamentales&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type cell  struct {
  y, x, y2, x2 int
  data string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en &lt;code&gt;cell&lt;/code&gt;, iran los datos &amp;ldquo;listos para usar&amp;rdquo; de cada celda&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// la cuadricula cuadricular
type grid struct {
  data [][]rune
  w, h int
}

// inicializar la cuadricula
func (g *grid) init( data string ) *grid {
  g.data = gridify( data )
  g.h = len( g.data )
  if g.h &amp;gt; 0 {
    g.w = len( g.data[0] )
  } else { g.w = 0 }

  return g
}

// visitar una posicion de la celda y conocer
// el caracter que en ella habita o saber si es una
// posicion mas alla de los bordes (OUTSIDE)
func (g *grid) visit( p point ) rune {
  if p.x &amp;lt; 0 || p.y &amp;lt; 0 || p.x &amp;gt;= g.w || p.y &amp;gt;= g.h ||
     g.h &amp;lt; 1 || g.w &amp;lt; 1 {
    return OUTSIDE
  }

  return g.data[p.y][p.x]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;point es un objeto que representa una ubicacion, tiene dos metodos para avanzar
en una de cuatro direcciones. El primer metodo (&lt;code&gt;mv&lt;/code&gt;) mueve el punto, el segundo
(&lt;code&gt;nmv&lt;/code&gt;) regresa una simulacion del movimiento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ( RIGHT = iota; UP; LEFT; DOWN )

type point struct { y, x int }

func (p *point) mv( dir byte ) point {
  switch dir {
  case RIGHT: p.x += 1
  case UP   : p.y -= 1
  case LEFT : p.x -= 1
  case DOWN : p.y += 1
  }

  return *p
}

func (p point) nmv( dir byte ) point {
  return p.mv( dir )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hay un otro objeto casi identico a las celdas, pero este cuenta con cuatro
puntos, uno para cada una de las esquinas de la celda, ummm, para dejar abierta
la posibilidad de mejorar la comprabacion del contorno de la celda, lanzar
mensajes de error y esas cosas&amp;hellip; supongo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type square struct {
  topLeft, topRight, bottomLeft, bottomRight point
  *grid
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tiene un puntero a &lt;code&gt;grid&lt;/code&gt;, para saber sobre que cuadricula se realiza la
busqueda del contorno. Hay una funcion de conveniecia para crear squares:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (g *grid) newSquare( p point ) *square {
  return &amp;amp;square{ grid: g, topLeft: p }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y a continuacion, la funcion para iniciar el recorrido por el perimetro de una celda desde
su posicion superior izquierda hacia la derecha (en sentido de las manecillas
del reloj).&lt;/p&gt;

&lt;p&gt;Es poco elegante, pero las bases para su mejora se encuentran hay&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (s *square) tourist( ) bool {
  s.topRight    = s.findUpCorner( s.topLeft )
  s.bottomRight = s.findRightCorner( s.topRight )
  s.bottomLeft  = s.findDownCorner( s.bottomRight )

  return true
}

func (g *grid) findCorner( p point, dir byte ) (c point) {
  edge := rune(VEDGE)
  if dir == UP || dir == DOWN { edge = HEDGE }

  for {
    switch g.visit( p.mv( dir ) ) {
    case CORNER : return p
    case edge   : continue
    }
  }

  return p
}

func (g *grid) findUpCorner( p point ) point {
  for p = g.findCorner( p, RIGHT ); g.visit( p.nmv( DOWN ) ) != VEDGE; p = g.findCorner( p, RIGHT ) {}
  return p
}

func (g *grid) findDownCorner( p point) point {
  for p = g.findCorner( p, LEFT  ); g.visit( p.nmv( UP   ) ) != VEDGE; p = g.findCorner( p, LEFT  ) {}
  return p
}

func (g *grid) findRightCorner( p point) point {
  for p = g.findCorner( p, DOWN  ); g.visit( p.nmv( LEFT ) ) != HEDGE; p = g.findCorner( p, DOWN  ) {}
  return p
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tengo muchas dudas, sobre la combinacion de cuadricula y squares, aun no termino
de verlo claro&lt;/p&gt;

&lt;p&gt;ahora si el plato fuerte&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// recibe una tabla como cadena y regresa la tabla en html (como cadena)
func TextTable2HtmlTable( data string ) string {
  // crea e inicializa la cuadricula
  g := new( grid ).init( data )
  // para conocer todos los bordes de las celdas (ver post anterior)
  xEdges, yEdges := map[int]bool{ 0: true }, map[int]bool{ 0: true }

  rows := make( [][]*cell, 0, 10 ) // almacena la tabla procesada [fila][columna]
  row  := make(   []*cell, 0,  5 ) // la fila actual
  // las celdas son punteros para evitar la copia de estructuras completas
  // de esta forma, si es necesaria la reaccignacion de memoria, unicamente
  // se copian los punteros.
  // la dimencion inicial, es la que considere razonable

  // aqui se almacena el inicio de futuras celdas
  //
  // en general, siempre se almacena la posicion que representa
  // la posicion inferior izquierda de las celdas, SOLO si hay un
  // caracter VEDGE debajo de esta, de otra forma no habria
  // una celda a explorar en esa posicion... ja, ja, ja, es algo un poco
  // anti-intuitivo, pero las unicas esquinas de las celdas que se necesitan
  // revisar para explorar todas en orden, son las esquinas superior derecha
  // de la celda actual, continuando hacia el final derecho de la fila, y luego
  // explorar las esquinas inferiores izquierdas de las celdas (almacenadas en
  // esta tabla hash, ve una tabla &amp;quot;cruda&amp;quot; y realiza simulaciones mentales
  hotPoints := make( map[point]bool )

  // se inicia el ciclo por las celdas, la primera se encuentra en la posicion
  // [0,0] (puntero a un nuevo punto... piensalo)
  // next es un puntero para no tener un centinela (adicional) dedicado, es
  // decir, si next == nil, ha terminado la exploracion
  for next, y := new(point), 0; next != nil;  {
    s := g.newSquare(*next) // un nuevo square en la posicion actual
    s.tourist()             // se averiguan los margenes del square

    // anotamos los limites derecho e inferior de la celda
    // el &amp;quot;true&amp;quot; no tiene importancia, se eligio por que es necesario asignar
    // un valor, y un booleano es lo mas simple que hay
    xEdges[ s.topRight.x   ] = true
    yEdges[ s.bottomLeft.y ] = true

    // ... si el indice de fila actual es distinto al anterior
    if y != s.topLeft.y {
      rows = append( rows, row)     // agregamos la fila anterior a la tabla
      row = make( []*cell, 0, 5 )   // una nueva fila actual
      y = s.topLeft.y               // actualizamos el indice
    }

    // creamos una celda con los datos definitivos
    r := &amp;amp;cell{ y: s.topLeft.y, x: s.topLeft.x, y2: s.bottomRight.y, x2: s.bottomRight.x }
    // se extrae el texto de la cuadricula
    r.data = cutRectangularText( g.data, r )
    // se agrega la celda a la fila actual
    row = append( row, r )

    // si la posicion del borde inferior izquierdo es el inicio
    // de otra celda, se agrega a los puntos calientes
    if g.visit( s.bottomLeft.nmv( DOWN ) ) == VEDGE {
      hotPoints[ s.bottomLeft ] = true
    }

    // terminamos con la celda actual, vamos con la siguiente
    //
    // si, hemos cambiado de fila y estamos viendo un punto caliente
    // (posicion inferior izquierda) de la fila anterior, necesitamos
    // retirarla de los puntos calientes
    if _, exist := hotPoints[ s.topRight ]; exist {
      delete( hotPoints, s.topRight ) // quitamos el elemento
      next = &amp;amp;s.topRight              // la siguiente celda a la derecha

      // si aun no hemos cambiado de fila, la siguiente celda deberia
      // estar (o no) a la derecha de la celda actual.
      // comprobamos si es asi
    } else if g.visit( s.topRight.nmv( RIGHT ) ) == HEDGE {
      next = &amp;amp;s.topRight

      // llegamos al final de la fila, veamos cual es la celda con la posicion
      // (fila y columna) mas arriba a la izquierda
    } else {
      // regresa dicha posicion y la quita del mapa de puntos calientes
      next = pullNextPoint( hotPoints )

      // si ya no hay puntos calientes, agregamos la ultima fila a la tabla
      if next == nil { rows = append( rows, row) }
    }
  }

  // se ordenan los mapas con las ubicaciones de todos los bordes en la tabla
  xS, yS :=  mapToSortIntArray(xEdges), mapToSortIntArray(yEdges)

  // ya analizada y ordenada la tabla, solo resta la exportacion
  return tableToHtml( rows, xS, yS )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
func tableToHtml( table [][]*cell, xS, yS []int ) string {
  buf := new( bytes.Buffer )  // un buffer para hacerlo mas eficiente

  fmt.Fprintf( buf,  &amp;quot;&amp;lt;table border=\&amp;quot;1\&amp;quot;&amp;gt;\n&amp;quot; )

  // ciclo por las filas
  for _, row := range table {
    fmt.Fprintf( buf, &amp;quot;&amp;lt;tr&amp;gt;&amp;quot; )

    // ciclo por las columnas
    for _, cell := range row {
      fmt.Fprintf( buf, &amp;quot;&amp;lt;td&amp;quot; )
      // ver el funcionamiento de rangeCells en el post anterior!
      if colspan := rangeCells(cell.x, cell.x2, xS); colspan != 1 {
        fmt.Fprintf( buf, &amp;quot; colspan=\&amp;quot;%d\&amp;quot;&amp;quot;, colspan )
      }
      if rowspan := rangeCells(cell.y, cell.y2, yS); rowspan != 1 {
        fmt.Fprintf( buf, &amp;quot; rowspan=\&amp;quot;%d\&amp;quot;&amp;quot;, rowspan )
      }
      // la celda en si, SpaceSwap es una conveniencia para hacer las pruebas
      // sin hacer demaciados escapes de \n, \&amp;quot; y espacios
      fmt.Fprintf( buf, &amp;quot;&amp;gt;&amp;lt;p&amp;gt;%s&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;&amp;quot;, SpaceSwap( cell.data, &amp;quot; &amp;quot; ) )
    }

    fmt.Fprintf( buf, &amp;quot;&amp;lt;/tr&amp;gt;\n&amp;quot; )
  }
  fmt.Fprintf( buf, &amp;quot;&amp;lt;/table&amp;gt;\n&amp;quot; )

  return buf.String()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por ultimo el misterioso codigo para conocer cual es la celda mas a la izquierda
y arriba en el mapa de puntos calientes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func pullNextPoint( m map[point]bool ) *point {
  if len( m ) == 0 { return nil }

  n := point{}
  // para establecer un valor inicial de comparacion util
  for key, _ := range m {
    n = key
    break
  }

  for key, _ := range m {
    // si la cerda esta mas arriba va primero
    if key.y &amp;lt; n.y {
      n = key

    // si estan en la misma fila, pero es una columna anterior
    // va primero
    } else if key.y == n.y &amp;amp;&amp;amp; key.x &amp;lt; n.x  {
      n = key
    }
  }

  delete( m, n ) // saca el siguiente elemento
  return &amp;amp;n      // regresa el siguiente elemento
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y listo, sin miles de lineas ni (demaciadas) complejidades inecesarias (cof, cof
puñetero &lt;del&gt;y apestoso, apestoso&lt;/del&gt; codigo python de reStructuredText)&lt;/p&gt;

&lt;p&gt;el codigo fuente completo tiene mucha calderilla auxiliar conveniente
(sobre todo del paquete &lt;code&gt;github.com/nasciiboy/txt&lt;/code&gt;). Lo coloque directamente
para evitar dependencias inecesarias para el ejemplo, su comprension/mejora
queda a modo de reto personal&amp;hellip;&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TextTable2HtmlTable (Volume One)</title>
      <link>https://nasciiboy.github.io/prog/morg-table/</link>
      <pubDate>Fri, 15 Dec 2017 20:02:05 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-table/</guid>
      <description>

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://nasciiboy.github.io/img/mikoto.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-como-parsear-una-tabla-en-texto-plano-para-convertirla-en-una-tabla-html-u-otra-cosa-codigo-de-ejemplo-en-golang&#34;&gt;o, como &amp;ldquo;parsear&amp;rdquo; una tabla en texto plano para convertirla en una tabla html (u otra cosa) (+ codigo de ejemplo en Golang)&lt;/h2&gt;

&lt;p&gt;convertir una tabla como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|---------------------------------------------------------------------|
| MiTabla Fila  1 | De Creacion           | Estructurales             |
|-----------------|-----------------------|---------------------------|
| MiTabla Fila  2 | De Creacion           | Estructurales             |
|-----------------|-----------------------|---------------------------|
| MiTabla Fila  3 | De Creacion           | Estructurales             |
|-----------------|-----------------------|---------------------------|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;es decir, con un numero de &amp;ldquo;celdas&amp;rdquo; siempre constante, a pesar de tener su
complejidad, es relativamente sencillo el programar unas cuantas funciones sin
tener mucha idea y lograr convertirla en cualquier otro formato, por ejemplo (y
por conveniencia) HTML&lt;/p&gt;

&lt;p&gt;sin embargo, como demonios &lt;em&gt;parsear&lt;/em&gt; (&lt;em&gt;analizar&lt;/em&gt;) algo como (de ahora en
adelante &lt;strong&gt;estilo A&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|                            Proposito                                |
|---------------------------------------------------------------------|
|                 | De Creacion           | Estructurales             |
|-----------------|-----------------------|---------------------------|
| Ambito | Clase  | @l(#Factory Method)   | @l(#Adapter) (de clases)  |
|        |        |-----------------------|---------------------------|
|        |        |     nenteot           | @l(#Builder)              |
|        |        |  @l(#Bonlder)         |                           |
|        |--------|-----------------------|---------------------------|
|        | Objeto | @l(#Abstract Factory) | @l(#Adapter) (de objetos) |
|        |        |-----------------------|---------------------------|
|        |        | @l(#Beuuuua)          | @l(#Bridge)               |
|        |        |-----------------------|---------------------------|
|        |        |                       | @l(#Flyweight)            |
|        |        |-----------------------|---------------------------|
|        |        |                       | @l(#Proxy)   | kas        |
|--------|--------|-----------------------|--------------|------------|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esta tabla, a simple vista mas compleja, delimita sus celdas mediante signos
&amp;ldquo;tuberia&amp;rdquo; al inicio y fin, y sus bordes por tuberias y &amp;ldquo;menos&amp;rdquo; (&lt;code&gt;|----|&lt;/code&gt;), pero
manteniendo todas las filas con una longitud constante. Sin embargo cada celda,
puede abarcar una longitud (relativa a las columnas de al rededor) arbitraria
tanto en altura como en anchura&lt;/p&gt;

&lt;p&gt;pero antes de continuar veamos un ejemplo de sintaxis de tablas alternativo, el
que utiliza reStructuredText (&lt;strong&gt;estilo B&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---------------------------------------------------------------------+
|                            Proposito                                |
+-----------------+-----------------------+---------------------------+
|                 | De Creacion           | Estructurales             |
+-----------------+-----------------------+---------------------------+
| Ambito | Clase                          | @l(#Adapter) (de clases)  |
|        |                                +---------------------------+
|        |                                | @l(#Builder)              |
|        |                                |                           |
|        +--------+-----------------------+---------------------------+
|        | Objeto | @l(#Abstract Factory) | @l(#Adapter) (de objetos) |
|        |        +-----------------------+---------------------------+
|        |        | @l(#Beuuuua)          | @l(#Bridge)               |
|        |        +-----------------------+---------------------------+
|        |        |                       | @l(#Flyweight)            |
|        |        +-----------------------+--------------+------------+
|        |        |                       | @l(#Proxy)   | kas        |
+--------+--------+-----------------------+--------------+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bastante distinto, he!?, la mayor diferencia, son las intercecciones de las
celdas, que facilitan un poco el analisis de la tabla, al hacer explicitos
dichos simbolos, ademas de dejar de forma explicita cuando un signo tuberia es
una division, pues en sus margenes va acompañada por los &amp;ldquo;mas&amp;rdquo; (&lt;code&gt;+&lt;/code&gt;). Obviamente donde
este conjunto no este emparejado, las tuberias serian solo parte del texto plano&lt;/p&gt;

&lt;p&gt;y pasemos a un ejemplo mas de sitaxis (&lt;strong&gt;estilo C&lt;/strong&gt;), solo por que si y para
que dudes de tu existencia, si logras captar las obcuras sutilesas de su construccion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|                            Proposito                                |
|---------------------------------------------------------------------|
|                 | De Creacion           | Estructurales             |
|---------------------------------------------------------------------|
| Ambito | Clase                          | @l(#Adapter) (de clases)  |
|        |                                |---------------------------|
|        |                                | @l(#Builder)              |
|        |                                |                           |
|        |------------------------------------------------------------|
|        | Objeto | @l(#Abstract Factory) | @l(#Adapter) (de objetos) |
|        |        |---------------------------------------------------|
|        |        | @l(#Beuuuua)          | @l(#Bridge)               |
|        |        |---------------------------------------------------|
|        |        |                       | @l(#Flyweight)            |
|        |        |---------------------------------------------------|
|        |        |                       | @l(#Proxy)   | kas        |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bien? pues olvida todo lo que sabes y desconoces, por que aqui coloco mi solucion
(sin tener idea) para el estilo de tabla &lt;strong&gt;A&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;primero, consideremos que las tablas (HTML) son simplemente un metodo para
dibujar mosaicos rectangulares con texto (o algo), asi que deberiamos averiguar
las posiciones de inicio y fin de cada celda rectangular&lt;/p&gt;

&lt;p&gt;la segunda consideracion y que es la que toma html, es averiguar cuantas
casillas abarca cada celda tanto de largo como de alto&amp;hellip; ademas de su aparicion
secuencial (de derecha a izquierda) &amp;ldquo;por filas&amp;rdquo;&lt;/p&gt;

&lt;p&gt;como ya sabemos que una tabla no dejan de ser dibujos de cuadrados, podriamos
enviar un emisario a la posicion 0,0 de la tabla en texto plano e identificar el
primer cuadrado, luego buscar un segundo cuadrado en la misma primer fila,
cerrarla, abrir una nueva fila y seguir asi hasta terminar, para finalmente establecer el
tamaño de la celda mas pequeña, y conforme a esta, establecer la dimencion de
todas las demas&amp;hellip; o ir por un camino mas escabroso donde las celdas pueden
tener tablas internas, y estas a su ves tablas internas, &amp;hellip;, hasta el infinito&lt;/p&gt;

&lt;p&gt;no podria ser mas sencillo, pero como de momento no tengo idea de como hacer un
&lt;em&gt;automata segidor de contornos rectangulares&lt;/em&gt; (con &amp;ldquo;codigo elegante&amp;rdquo;), voy a
proceder de una forma menos sofisticada dividendo toda la tabla en filas y estas a
su vez en segmentos, averiguando donde estan las intercecciones de cada celda,
para con ello asignar las dimenciones de las celdas una ves identifique sus
valores, o, algo asi!&lt;/p&gt;

&lt;p&gt;primero debemos dividir nuestra tabla por lineas y segmentos&lt;/p&gt;

&lt;p&gt;aqui esta la funcion que divide un string por sus lineas en un slice de
strings. Si, esto puede hacerse directamente con la libreria estandar de Go, pero el
comportamiento su comportamiento no me termina de convencer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func GetLines( str string ) []string {
  result := make( []string, 0, 64 )
  last := 0;
  for i, c := range str {
    if c == &#39;\n&#39; {
      result = append( result, str[last:i] )
      last = i + 1
    }
  }

  if last &amp;lt; len( str ) { result = append( result, str[last:] ) }

  return result
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui estan las estructuras base sobre las que gira el codigo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const (
  cText = 0
  cEdge = &#39;-&#39;
)

type Rect  struct { y, x, y2, x2 int }
type Sec   struct { a, b, t int }
type Mikoto []Sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Rect&lt;/code&gt; sera el inicio y fin de nuestra celda rectangular&amp;hellip; puedes cambiar el
nombre, je, je, je, estos son los detalles que se presentan cuando vas
descubriendo a base de prueba y error como hacer algo nuevo. &lt;code&gt;Sec&lt;/code&gt; sera un
segmento de cada linea que representa el punto de inicio (&lt;code&gt;a&lt;/code&gt;) y fin (&lt;code&gt;b&lt;/code&gt;) de
cada uno, &lt;code&gt;t&lt;/code&gt; es el tipo del segmento (o texto (&lt;code&gt;cText&lt;/code&gt;) o un
divisor (&lt;code&gt;cEdge&lt;/code&gt;)). Finalmente &lt;code&gt;Mikoto&lt;/code&gt; es un arreglo de segmentos, que vedrian a
conformar la linea ya analizada, por que &lt;code&gt;Mikoto&lt;/code&gt;? por una obscura referecia
hilarante a nivel personal, que nada tiene que ver con buenas metodologias de
programacion, aunque, como es mi maldito codigo, creo que imprimir el estilo &amp;ldquo;de la
casa&amp;rdquo; es cuando menos una forma de hacerlo divertido. Por cierto, lo de nombrar
los tipos con su primer letra en mayuscula, mas que por temas de exportacion
fuera del paquete, lo hago para poder crear tipos locales con el mismo nombre
pero en minuscula (asi: &lt;code&gt;var rect Rect&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;mmm, todo este rollo de codigo esta dentro de dos ficheros lo que trato de
explicar aqui esta en &lt;a href=&#34;https://nasciiboy.github.io/data/table.go&#34;&gt;table.go&lt;/a&gt; y aulgunas (insuficientes) pruebas en
&lt;a href=&#34;https://nasciiboy.github.io/data/table_test.go&#34;&gt;table_test.go&lt;/a&gt;. Colocalas dentro de una carpeta sin otro
codigo, y ejecuta con &lt;code&gt;go test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;a partir de este momento, el codigo fuera de cualquier funcion, es parte de la
funcion principal &lt;code&gt;func TextTable2HtmlTable( data string ) string&lt;/code&gt;, el demas
vendra correctamente dentro de su funcion correspondiente. Inicio &amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lines := GetLines( data )
mikotos := make( []Mikoto, 0, 5 )
for _, l := range lines {
  mikotos = append( mikotos, scissors(l) )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok, paso a dividir la cadena de entrada (la tabla) en lineas, para despues crear un slice
&lt;code&gt;mikotos&lt;/code&gt; de &lt;code&gt;Mikoto&lt;/code&gt;, recordemos que &lt;code&gt;Mikoto&lt;/code&gt; es la representacion segmentada
de cada linea, y este slice, vendria a ser toda la tabla segmentada por filas y
en estas en segmentos. Asi pues, inicio un bucle enviando cada linea al
segmentador &lt;code&gt;scissors&lt;/code&gt; (tijeras) y agrego esta linea segmentada en un indice del
slice &lt;code&gt;mikotos&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;asi se ve &lt;code&gt;scissors&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func scissors( line string ) []Sec {
  secs, sec := make( []Sec, 0, 5 ), Sec{}

  for x := 1; x &amp;lt; len( line ); x++ {
    switch line[x] {
    case cEdge: x += skipSep ( line[x:] ); sec.t = cEdge
    default   : x += skipText( line[x:] ); sec.t = cText
    }

    sec.b = x
    secs = append( secs, sec )
    sec.a = x
  }

  return secs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se declara un slice (&lt;code&gt;secs&lt;/code&gt;) que sera regresado con los segmentos de la linea de entrada,
y tambien un segmento (&lt;code&gt;sec&lt;/code&gt;) que tendra el segmento actual (con los valores de inicio,
fin y tipo&lt;/p&gt;

&lt;p&gt;se inicia el ciclo por la linea, el numero magico &lt;em&gt;1&lt;/em&gt; es para esquivar el &lt;code&gt;|&lt;/code&gt; al
inicio de la linea, por supuesto se asume que los datos de entrada son
correctos&amp;hellip;&lt;/p&gt;

&lt;p&gt;Luego se averigua con el &lt;code&gt;switch&lt;/code&gt; si tenemos o un segmento de texto o de
separacion y se procede a averiguar su longitud y establecer su tipo. Despues
agregamos el segmento actual dentro del slice, y, repetimos el bucle una y otra
vez, hasta llegar al final de la linea. Pon atencion a como (no) se establece el
punto de inicio del primer bucle, ademas de prepararlo para el siguiente&lt;/p&gt;

&lt;p&gt;las funciones para averiguar los limites del segmento son&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func skipSep( data string ) int {
  for i, c := range data {
    switch c {
    case cEdge: continue
    case &#39;|&#39;  : return i
    }
  }

  return len(data)
}

func skipText( data string ) int {
  for i, c := range data {
    switch c {
    case &#39;|&#39;: return i
    default: continue
    }
  }

  return len(data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicamente se limitan a encontrar el primer &lt;code&gt;|&lt;/code&gt; que aparesca, pero, tienen su
propia funcion para (en un futuro) agregar distintos tipos de separadores, por
ejemplo encabezado y fondo de la tab!a, o, tambien para afinar la busqueda de
los limites&lt;/p&gt;

&lt;p&gt;continuando con la funcion principal tenemos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ncol, nrow := mikotosToEdgeCells(mikotos)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;te preguntaras, he? sin panico, brother, ya que tenemos la tabla completamente
segmentalizada, no es necesario iterar de nuevo directamente sobre el string de
texto, tenemos un primer grado de abstraccion y podemos ahorrar bastante
iterando con este, en lugar de volver a hacerlo sobre los datos en bruto. Lo que
hace la siguiente funcion es averiguar donde estan los margenes de inicio y fin
de cada celda y con ellos asignar mas adelante las dimenciones &amp;ldquo;en celdas&amp;rdquo; de
cada rectangulo&lt;/p&gt;

&lt;p&gt;La idea es esta: nuestras celdas tienen una longitud variable, pero su longitud
se mide en base de las celdas que cruza, mas que por su longitud &amp;ldquo;en
caracteres&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 0  5    15 2022      45  50  55
 ^  ^    ^  ^ ^       ^   ^   ^
 ______________________________
 |1_|_2__|__3_|___4___|_5_|_3_|  A
 |1_|_2__|3_|4|___5___|_6_|_7_|  B
 |1_|____2____|___4___|___5___|  C

    a&amp;lt;--C2---&amp;gt;b  = 3
    |         |
    5         22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;anotamos los bordes de las celdas de todas las filas, segun la posicion
donde aparecen, por ejemplo para este caso seria 0, 5, 15, 20, 22, 45, 50
y 55&lt;/p&gt;

&lt;p&gt;Dados los puntos de inicio y fin de una celda particural, podemos averiguar su
longitud, considerando el resto de celdas, hemmm, por ejemplo, tomando de la
fila C la columna 2, esta abarca las intercepcionens que van desde 5 a 22, que
en este caso serian 3 celdas (las tres de las celdas 2, 3 y 4 de la fila B). Si
aplicamos esto a la fila A celda 3, abarcaria 2 celdas, las dos de la fila B (3
y 4). Para otras celdas que mantienen su alineacion con respecto a todas las
demas, su longitud (en celdas) seria 1.&lt;/p&gt;

&lt;p&gt;Anotando todas las intercepciones y luego iterando sobre estas, podemos averiguar
cuantas celdas &amp;ldquo;toca&amp;rdquo; un rango arbitrario. Ya que la orientacion de estas
intercepciones solo esta en nuestra mente, se aplicara tanto para filas como
columnas indistintamente.&lt;/p&gt;

&lt;p&gt;La funcion encargada de lograr tal proeza esta aqui&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func mikotosToEdgeCells( mikotos []Mikoto ) (c, r []int){
  cols,    rows   := make( map[int]bool ), make( map[int]bool )
  cols[0], rows[0] = true, true

  for y, mikoto := range mikotos {
    for _, sec := range mikoto {
      if _, set := cols[sec.b]; !set { cols[sec.b] = true }
      if _, set := rows[y]; sec.t == cEdge &amp;amp;&amp;amp; !set { rows[y] = true }
    }
  }

  return mapToSortIntArray(cols), mapToSortIntArray(rows)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;consta de dos mapas &lt;em&gt;hash&lt;/em&gt;, uno para las columnas y otro para las filas, como ya
sabemos que deben iniciar en el punto 0, lo asignamos directamente, para el
resto solo debemos iterar sobre las filas segmentalizadas anotando donde estan
los bordes de las celdas: para las columnas seria el fin del segmento y para las
filas la aparicion de un segmento de borde. La consulta de existencia en el mapa
es opcional, pero recomendable. Utilizamos un mapa para evitar una iteracion sin
sentido por un arreglo de n elementos y n consultas&lt;/p&gt;

&lt;p&gt;una ves terminado el bucle, podemos ordenar los puntos de intercepcion en un
arreglo de enteros&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func mapToSortIntArray( m map[int]bool ) []int {
  arry, i := make([]int, len( m )), 0
  for key := range m { arry[i] = key; i++ }
  sort.Ints( arry )
  return arry
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora, para la funcion que se encarga de contabilizar cuantos segmentos toca un
rango dado, pasariamos el arreglo (de filas o columnas) y el segmento en si&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func rangeCells( a, b int, cells []int ) int {
  min := 0
  for min &amp;lt; len( cells ) &amp;amp;&amp;amp; a &amp;gt; cells[ min ] { min++ }
  max := min
  for max &amp;lt; len( cells ) &amp;amp;&amp;amp; b &amp;gt; cells[ max ] { max++ }

  if min == max {
    return 1
  } else if a &amp;lt; cells[min] {
    return max - min + 1
  }

  return max - min
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si, un bucle poco elgante, pero mis conocimientos no dan para mas, preguntar en
reddit tampco sirvio de mucho. Sospecho que es carne para matemagicos que no
andan por internet&amp;hellip; y que el nivel de los programadores &amp;ldquo;en general&amp;rdquo; es penoso
(como el mio)&lt;/p&gt;

&lt;p&gt;momento de pasar a donde se concentra toda la magia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alive := make( map[int]*Rect )
type Rows []*Rect
var rows []Rows
var cRow Rows
for y, mikoto := range mikotos {
  cRow = nil

  for _, sec := range mikoto {
    switch sec.t {
    case cEdge:
      alive[sec.a].y2 = y - 1
      delete( alive, sec.a )
    default:
      if _, live := alive[sec.a]; !live {
        p := &amp;amp;Rect{ y: y, x:sec.a, x2:sec.b }
        cRow = append( cRow, p )
        alive[sec.a] = p
      }
    }
  }

  if cRow != nil { rows = append( rows, cRow) }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto es un bucle por nuestra tabla segmentalizada. En concepto revisamos fila a
fila anotando cada secmento que no teniamos previamente dentro de nuestra
fila actual (&lt;code&gt;cRow&lt;/code&gt; (currentRow)) y abriendo una lista de rectangulos sin
cerrar (&lt;code&gt;alive&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Si el segmento forma parte de un segmento &amp;ldquo;vivo&amp;rdquo; lo ignoramos, y si encontramos
un segmento de cierre que encaja con uno vivo, lo cerramos y matamos.&lt;/p&gt;

&lt;p&gt;El correcto orden de apertura de cada nueva fila dentro de la lista global de
rectangulos por filas (&lt;code&gt;rows&lt;/code&gt;) se logra con la variable &lt;code&gt;cRow&lt;/code&gt;, que se reinicia
en cada iteracion por las filas y solo se incluye si aparecio un rectangulo
nuevo. El punto magico-mistico y misterioso, ademas de razon de la sincronia de
los cierres en la estructura de filas global (&lt;code&gt;rows&lt;/code&gt;) viene dado por el uso de
puenteros, sip! magicos punteros. Seguramente no encuentres este codigo muy
claro, pero dale vueltas, para mi no estaba disponible algo
asi&amp;hellip; bueno, si. algo en python (un lenguaje al que le tengo mania, en el peor
sentido de la palabra) y que tenia una muy, muy, muy rara implementacion de
algunos miles de lineas indecifrables en mi ignorancia&lt;/p&gt;

&lt;p&gt;Para finalizar, ya con nuestros rectangulos organizados, solo resta imprimir la
tabla y averiguar su longitud con respecto a otros rectangulos, con la
anteriormente expuesta &lt;code&gt;rangeCells&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buf := new( bytes.Buffer )
fmt.Fprintf( buf,  &amp;quot;&amp;lt;table border=\&amp;quot;1\&amp;quot;&amp;gt;\n&amp;quot; )

for _, rl := range rows {
  fmt.Fprintf( buf, &amp;quot;&amp;lt;tr&amp;gt;&amp;quot; )

  for _, rect := range rl {
    fmt.Fprintf( buf, &amp;quot;&amp;lt;td&amp;quot; )
    if colspan := rangeCells(rect.x, rect.x2, ncol); colspan != 1 {
      fmt.Fprintf( buf, &amp;quot; colspan=\&amp;quot;%d\&amp;quot;&amp;quot;, colspan )
    }
    if rowspan := rangeCells(rect.y, rect.y2, nrow); rowspan != 1 {
      fmt.Fprintf( buf, &amp;quot; rowspan=\&amp;quot;%d\&amp;quot;&amp;quot;, rowspan )
    }
    fmt.Fprintf( buf, &amp;quot;&amp;gt;%s&amp;lt;/td&amp;gt;&amp;quot;, rectToString(rect, lines) )
  }

  fmt.Fprintf( buf, &amp;quot;&amp;lt;/tr&amp;gt;\n&amp;quot; )
}

fmt.Fprintf( buf, &amp;quot;&amp;lt;/table&amp;gt;\n&amp;quot; )
return buf.String()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el texto de cada celda se optiene con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func rectToString( rect *Rect, lines []string ) string {
  s := &amp;quot;&amp;lt;p&amp;gt;&amp;quot;
  for y := rect.y; y &amp;lt;= rect.y2; y++ {
    s += lines[y][rect.x+1:rect.x2]
  }
  s += &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;
  return s
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que se alimento de nuestro anteriormente usado slice con lineas&lt;/p&gt;

&lt;h2 id=&#34;epilogo&#34;&gt;Epilogo&lt;/h2&gt;

&lt;p&gt;El problema es por demas complejo (o lo es para este subnormal que escribe), sin
embargo, tengo la firme creencia de que si podemos enterder un concepto (aun sin
poder explicar el como), con mucho, mucho, mucho estudio e insintencia, podemos
ser capaces de codificarlo y quiza tras muchas iteraciones optener un codigo
elegante.&lt;/p&gt;

&lt;p&gt;Si podemos decifrar su informacion, es porque la informacion esta hay,
simplemente ignoramos los mecanismos de nuestra mente&lt;/p&gt;

&lt;p&gt;Este no deja de ser un primer acercamiento a este problema, por ello la solucion
dista bastante de algo util en la vida real. Aun queda por implementarlo para
tablas que no sean solo de caracteres de ancho fijo, como en codificacion
unicode, resolver el dilema de escapes de las tuberias que debieran ser solo
texto, tablas no alineadas, fijar la sistaxis en general, examinar la alineacion
del texto sin mas datos que el texto en si, y otros puntos mas que aun no
contemplo, pero eso sera para otras sesiones de buena musica, mientras veo
fijamente el montor con un semblante serio&lt;/p&gt;

&lt;p&gt;ho, ho, ho, como tengo ganas de implementarlo en la siguiente iteracion de morg,
aunque en el transcurso de leer sobre patrones de diseño, seguro que nuevas
modificaciones se hacen presentes, ademas, adaptar esto y otras ideas sobre el
parseo a texto rectangular, llebaran una labor de revision fina, fina!&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Morg Mirror</title>
      <link>https://nasciiboy.github.io/prog/morg-mirror/</link>
      <pubDate>Fri, 08 Dec 2017 21:52:22 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-mirror/</guid>
      <description>&lt;blockquote&gt;
Una buena documentación es invaluable. Ya que cada uno tiene su propia definición de &#34;bueno&#34;, aquí está la mía:

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Los buenos documentos no me hacen buscar en la web&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Los buenos documentos tienen ejemplos de trabajo con los que puedo empezar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Los buenos documentos siguen convenciones claras que fomentan hábitos de lectura&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

para mí, comenzar un nuevo proyecto significa escribir algo de código para poder
entender el problema que estoy tratando de resolver mejor. Hay mucha carga
cognitiva, porque es un territorio inexplorado: tengo que pensar mucho en
nombrar y en las dependencias entre partes.
&lt;/blockquote&gt;

&lt;p&gt;(lo lamento, pero no anote la direccion del post en ingles de donde extraje
estas perlas literarias, era sobre algo de golang vs xxx)&lt;/p&gt;

&lt;p&gt;Y&amp;hellip; de que va este post? son algunas reflexiones que considero interesantes
surgidas de la experimentacion al intentar dar cara y ojos a ese formato de
documentacion imaginario llamado morg&lt;/p&gt;

&lt;p&gt;Sucede esto, el formato cuenta con enfasis del tipo &lt;code&gt;@e(enfasis)&lt;/code&gt;, bien, esto
aplicaria enfasis al texto &amp;ldquo;enfasis&amp;rdquo;. Da la casualidad que tambien para evitar
hacer cosas como &lt;code&gt;(@e(texto-con-enfasis-entre-parentesis))&lt;/code&gt; y como permito la
&lt;em&gt;concatenacion de &amp;ldquo;comandos&amp;rdquo;&lt;/em&gt; esto podria substituirse por
&lt;code&gt;@%e(texto-con-enfasis-entre-parentesis)&lt;/code&gt;, donde el &amp;ldquo;comando&amp;rdquo; &lt;code&gt;%&lt;/code&gt; significaria
&amp;ldquo;entre parentesis&amp;rdquo;&amp;hellip; y resulta que tambien podria substuirse algo similar al
caso &lt;code&gt;“@c(codigo)”&lt;/code&gt; por &lt;code&gt;@&amp;quot;c(codigo)&lt;/code&gt; y fue entonces donde me cuestione, &lt;em&gt;¿son
estas construcciones lo suficientemente claras para quien desconosca tal
sintaxis?&lt;/em&gt; por que, el proposito de formato es ser claro ante todo, tanto en su version
exportada, como directamente del &lt;em&gt;texto fuente&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pero vallamos mas alla, que tal si en &lt;em&gt;todo&lt;/em&gt; texto se substitulle cualquier
texto entre parentesis, como entre comillas, por su equivalente a sistaxis &lt;code&gt;@x()&lt;/code&gt;, es
decir todo &lt;code&gt;(texto entre parentesis)&lt;/code&gt; pasaria a ser &lt;code&gt;@%(texto entre parentesis)&lt;/code&gt;
y todo &lt;code&gt;“cita o algo”&lt;/code&gt; como &lt;code&gt;@&amp;quot;(cita o algo)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ignorando lo en principio absurdo de la propuesta, la segunda opcion, presenta
conveniencias a considerar&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;se puede &lt;em&gt;aplicar un estilo&lt;/em&gt; tanto de color, fuente e incluso modificar los
signos de &amp;ldquo;contecion&amp;rdquo; (&lt;code&gt;()&lt;/code&gt; y &lt;code&gt;“”&lt;/code&gt;) por cualquier otra cosa, en toda aparicion
y en solo una instruccion (de estilo)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;podria aplicarse un analisis al texto&amp;hellip; por algun motivo que no alcanso a visualizar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;el texto resaltado seria inconfundible y evidente, sin lugar
a dudas de lo que se desea transmitir mediante esta&amp;hellip; supongo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip; y no se me ocurre nada mas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;entonces, aparecio una revelacion aun mas extraña, que significan exactamente
estas marcas &amp;ldquo;invisibles&amp;rdquo; que rodean al texto, y pasaron desapersividas hasta
este momento, de hecho, cuantas construcciones de este tipo hay en la escritura
y, si de forma simplificada (y mas o menos comoda) se permitiese una mayor
cantidad de estas construcciones, (como la de codigo &lt;code&gt;@c()&lt;/code&gt;, atajos de teclado
&lt;code&gt;@k()&lt;/code&gt;, definiciones &lt;code&gt;@:()&lt;/code&gt; etc), que tanto podria desarrollarse el lenguaje?
podria presindirse con este (conveniente) resaltado de la necesidad de una
exportacion visual (ya que contendria toda la informacion)?&lt;/p&gt;

&lt;p&gt;momento, algo se me escapa, algo importante que no habia contemplado pero
supongo existe por alguna parte, simplemente no tuve necesidad de conocerlo,
razon por la cual paso desapersivido, mas ahora necesito conocerlo e ignoro su
nombre, &lt;em&gt;estructura logica del lenguaje&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;y que es esto, te preguntaras, pues la forma logica sobre la que se estructura
el lenguaje, es decir parrafos, secciones(?), listas, listas numeradas, tablas,
citas, bloques(?) y demas elementos comunes del lenguaje escrito. Digo, considerando que
cualquiera que lea esto los ha utilizado o almenos los reconoce en la lectura,
seria extraño que no estubiese definido de forma precisa como, cuando, porque y
las implicaciones de utilizar cada uno de estos&amp;hellip; y sus distintas
implementaciones en otros lenguajes, o es que acaso que en otras lenguas estos
no tienen su equivalente? tienen otros? porque, si en lugar de inventar bloques
arbitrarios (o etiquetas) para situaciones variadas, cuento con todas las
variaciones disponibles y sus casos de uso, quiza lo mas conveniente es aplicar
una sintaxis especifica para la mayoria de ellos, simplificarlos o incluso tras
un analisis crear nuevos&lt;/p&gt;

&lt;p&gt;y si existe este analisas, hay propuestas para nuevas construccones del
lenguaje escrito o incluso propuestas alternativo-experimentales mas eficientes?&lt;/p&gt;

&lt;p&gt;y asi acudi a reddit y a la wikipedia, mas, continuo sin respuesta, no dudo que
este tema &lt;em&gt;cuenta&lt;/em&gt; con convenciones y tesis, pero no he acudido al lugar
indicado, pues al igual que en la programacion, la mayoria o toca
superficilmante un tema para apenas saber nada de el, o se especializa en
una pequeña seccion de su interes y desconoce el resto, como me atreveria a
decir que ocurre en los temas de mi interes, donde dichos temas especificos
parecen conjuros obscuros que nadie apenas conoce, menos entiende, y si existe
informacion, se encuentra en un plano academico al que tardare en acceder, del
cual seguramente me entere por mera casualidad escudriñando en algun manual olvidado&lt;/p&gt;

&lt;p&gt;en fin, a grandes rangos aqui se contienen las inquietudes, el resto seria la
forma de trabajar con un fichero de traduccion &lt;em&gt;porg&lt;/em&gt;, la forma de modificarlo y
transferir los cambios tanto a la traduccion como al fichero fuente&lt;/p&gt;

&lt;p&gt;las letras serian mas si hablara sobre metodologias de adaptacion de un libro impreso a
su equivalente digital no pensado para impresion, traduccion y otros topicos,
pero eso sera mas tarde&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTC One M8 (flasheo)</title>
      <link>https://nasciiboy.github.io/prog/m8/</link>
      <pubDate>Thu, 23 Nov 2017 16:26:40 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/m8/</guid>
      <description>

&lt;p&gt;sucede que estas tranquilamente con tu dispositivo (un androide 4.4) que se
arrastra por la vida, un dia revisando la &lt;em&gt;playstore&lt;/em&gt; aparece que google te esta revisando las
aplicaciones para que no tengas que preocuparte por tontaaas de seguridad o virus. Te cuiada tanto que
ni te aviza, le dices que no tiene que hacerlo, pero insiste.&lt;/p&gt;

&lt;p&gt;Otro dia revisas tus apps y cual hongo &amp;ldquo;nace&amp;rdquo; un nuevo icono de nombre &lt;em&gt;Ajustes
de Google&lt;/em&gt;, va, si esto no lo instale yo, que generosidad&amp;hellip; y asi tu
dispositivo con pocos recursos, programado en java, sobre java, sobre un nucleo,
sobre un hardware con 500MB de ram y doble nucleo arm, no puede reproducir un
puñetero audio decentemente. Te cansas y cual windowsero le instalas un
rooteador truculento con anuncios incluidos (y a saber que mas) y te pones a
erradicar todo lo que se atraviesa por el camino, hasta que sale un mensaje cada
5 segundos sobre que el telefono ya no funciona&amp;hellip; hey, bravo!&lt;/p&gt;

&lt;p&gt;bueno que mas, a escuchar el mundo tal cual y no ver videos por la
noche&amp;hellip; NoooOOOOOOOHHHHHHHHH, llevame a mi, llevame a mi!&lt;/p&gt;

&lt;p&gt;por diversos motivos y una serie de eventos aleatorios fuera de control, termine
con un mobil de segunda mano al que por desgracia, pese a una &amp;ldquo;exaustiva
revision&amp;rdquo; tenia un defecto en el &amp;ldquo;touch&amp;rdquo; del display&amp;hellip; pero por otra parte
ha sido el primer afortunado con el que intento un flasheo y termina con
resultado (casi) feliz (lo del touch, es molesto). Aqui los pasos&lt;/p&gt;

&lt;p&gt;Primero debemos instalar en nuestro flamante y nada restrictivo PC de escritorio
un par de herramientas &lt;code&gt;adb&lt;/code&gt; y &lt;code&gt;fastboot&lt;/code&gt;. En freidora seria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf -y install android-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luego desde el dispositivo (cargado y sin conectar) vamos a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ajustes &amp;gt; Informacion &amp;gt; Compilacion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o algo asi, presionamos sobre &lt;em&gt;Numero de Compilacion&lt;/em&gt; 5 veces hasta que nos
indique que ya somos &amp;ldquo;developers&amp;rdquo;. Regresamos a Ajustes y vamos a &lt;em&gt;Opciones de
Desarrollador&lt;/em&gt;, tras esto, encendemos el &amp;ldquo;modo de depuracion (ADB)&amp;rdquo;. Luego
pasamos a conectar el dispositivo al equipo y deberia de aparecer un dialogo sobre si
damos permisos de depuracion al PC, a lo que decimos que si y siempre!&lt;/p&gt;

&lt;p&gt;Sucede que los dispositivos HTC, son muy bondadosos, tienen bloqueado
el dispotivibo contra cosas de consola, asi que en este punto vamos a &lt;a href=&#34;https://www.htcdev.com/&#34;&gt;la web&lt;/a&gt; de
&amp;ldquo;developers de HTC&amp;rdquo; y nos resgistramos (es necesario). Una vez cumplido el
tramite, y ya con nuestra cuenta logueada, en el navegador (desde el PC) pasamos
al terminal en modo root y tecleamos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb reboot bootloader # reinicia el mobil y entra en el &amp;quot;bios&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o alternativamente podemos (desconectar usb) apagar el equipo, luego presionar el &lt;code&gt;+&lt;/code&gt; en volumen y
el &lt;code&gt;POWER&lt;/code&gt; sin soltar, y entra en el bootloader (conectar usb)&lt;/p&gt;

&lt;p&gt;ahora, vamos a optener el &lt;em&gt;token&lt;/em&gt; de nuestro mobil, con el cual podremos
optener la llave de desbloqueo (o no)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot oem get_identifier_token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en mi equipo sale algo asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--( root ) - { /h/n/Downloads }
--| fastboot oem get_identifier_token
...
(bootloader)
(bootloader) &amp;lt; Please cut following message &amp;gt;
(bootloader) &amp;lt;&amp;lt;&amp;lt;&amp;lt; Identifier Token Start &amp;gt;&amp;gt;&amp;gt;&amp;gt;
(bootloader) 42EC933383A3F0D0E588FDFA06BC5B60
(bootloader) CE75OEUI897EUX89EUI5465EUIFGX5U5
(bootloader) 60C649D88C27020848589DB27353BC32
(bootloader) NAS421BB5DDA3926B6F88A1C9E6DE7C6
(bootloader) 2C3C1131C708DAE513785CA95F212DA5
(bootloader) 1A12QJB0Y4PI684EUI51UEI564PUIE5U
(bootloader) AF8AF2324322DE1BE93A7842EB8638CA
(bootloader) 801DBCFD5254990D1739D5DB17C83DC2
(bootloader) 2A48B420F729651167578764F178B52D
(bootloader) 3F87E96D0BD19DFA3067C64E483AD551
(bootloader) CA617AF1D897E4A27FE8C35604F5D4A4
(bootloader) 9A2DFB9C7FE465CC1102816C7B3C8E2D
(bootloader) DBEUIUI564UIE54UIE654UEIFAIL000L
(bootloader) E5A5B4A9D481EEC452744FDE5294CC0C
(bootloader) 61BF1D0D3740BA36F9DFBDAF306DD4F0
(bootloader) 54054AEDFE75B8CFB74E5769ED8F2318
(bootloader) &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Identifier Token End &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;
OKAY [  0.009s]
finished. total time: 0.009s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui tenemos que cortar y copiar esta seccion (obviamente disinta en tu caso):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Identifier Token Start &amp;gt;&amp;gt;&amp;gt;&amp;gt;
42EC933383A3F0D0E588FDFA06BC5B60
CE75OEUI897EUX89EUI5465EUIFGX5U5
60C649D88C27020848589DB27353BC32
NAS421BB5DDA3926B6F88A1C9E6DE7C6
2C3C1131C708DAE513785CA95F212DA5
1A12QJB0Y4PI684EUI51UEI564PUIE5U
AF8AF2324322DE1BE93A7842EB8638CA
801DBCFD5254990D1739D5DB17C83DC2
2A48B420F729651167578764F178B52D
3F87E96D0BD19DFA3067C64E483AD551
CA617AF1D897E4A27FE8C35604F5D4A4
9A2DFB9C7FE465CC1102816C7B3C8E2D
DBEUIUI564UIE54UIE654UEIFAIL000L
E5A5B4A9D481EEC452744FDE5294CC0C
61BF1D0D3740BA36F9DFBDAF306DD4F0
54054AEDFE75B8CFB74E5769ED8F2318
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Identifier Token End &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;regresamos a &lt;a href=&#34;https://www.htcdev.com/bootloader/unlock-instructions/page-2&#34;&gt;esta&lt;/a&gt; pagina de htc, vamos al final y (logueados) pegamos el recorte
en el recuadro magico. Enviamos!&lt;/p&gt;

&lt;p&gt;&amp;ldquo;despues de un perido de tiempo&amp;rdquo; (en la prueba fue instantaneo) reciviremos un
correo de &lt;em&gt;HTC-Unlockbootloader@htc.com&lt;/em&gt; con un adjunto &lt;strong&gt;Unclock_code.bin&lt;/strong&gt;
(guardarlo como el oro). Regresamos a la terminal e ingresamos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot flash unlocktoken Unclock_code.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se abrira en el movil la sugiente pantalla&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/step13.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;movemos con VOLUMEN +/- hacia el Yes y confirmamos con POWER.&lt;/p&gt;

&lt;p&gt;En este momento (no estoy seguro si es necesario pero) reiniciamos el equipo y
reentramos en el bootloader ahora desploqueado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot oem boot
adb reboot bootloader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/bootloader_screen.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;en este punto ya tenemos el mobil listo para flashear cualquier otro sistema. Si
desides arrepentirte puedes ingresar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot oem lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;de lo contrario, procedemos a instalar la ROM, en este caso un lineageOS, por
que fue lo primero que encontre y tenia soporte. De cualquier forma, parece que
el equipo cuenta con muchas roms, incluso desde la pagina de htc, nos
proporcianan el kernel que utilizan y los pasos necesarios si queremos compilar
por nuestra cuenta.&lt;/p&gt;

&lt;p&gt;Vamos a la pagina de descargas de lineage de este equipo
(&lt;a href=&#34;https://download.lineageos.org/m8&#34;&gt;https://download.lineageos.org/m8&lt;/a&gt;) y escogemos la &amp;ldquo;mas
nueva&amp;rdquo;, debe ser algo como &lt;code&gt;lineage-*.zip&lt;/code&gt; y pesar alrededor de 300-400MiB.
Para evitar inconvenientes tambien podemos bajar la suma hash y hacer la
comprobacion.&lt;/p&gt;

&lt;p&gt;Asi mismo, debemos optener el &lt;em&gt;recovery&lt;/em&gt; para instalar la rom, eso esta por aca &amp;gt;
&lt;a href=&#34;https://dl.twrp.me/m8/&#34;&gt;https://dl.twrp.me/m8/&lt;/a&gt;, tambien bajamos la mas nueva y verificamos la suma&lt;/p&gt;

&lt;p&gt;Si has seguido los pasos deberiamos estar el el bootloader. Procedemos a instalar
el recoveri, lo cual seria algo como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot flash recovery twrp-x.x.x-x-m8.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y ya que estamos, aprobechamos para transferir nuestro rom de lineaje, cosa que
creo puede hacerse desde el navegador de ficheros, pero continuemos con el ritual&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb push lineagexxxxxxxxx*.zip /sdcard/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reiniciamos y volvemos a entar en el bootleader&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot oem boot
adb reboot bootloader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora, creo que presionando POWER deberiamos regresar &lt;em&gt;un paso&lt;/em&gt; en el &amp;ldquo;bios&amp;rdquo; y
entrar en el menu &lt;em&gt;RECOVERY&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;aqui aproverchariamos para hacer un respaldo del equipo (cosa que no hice),
vamos a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Wipe &amp;gt; Advanced Wipe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;seleccionamos &lt;em&gt;Cache&lt;/em&gt;, &lt;em&gt;System&lt;/em&gt; y &lt;em&gt;Data&lt;/em&gt; y delizamos &amp;ldquo;la barra&amp;rdquo; para aprobar los
cambios&lt;/p&gt;

&lt;p&gt;Hacemos una vuelta atras en el menu y le damos a &lt;em&gt;Install&lt;/em&gt; buscamos nuestro rom
en el sistema (&lt;code&gt;/sdcard&lt;/code&gt;), selecionamos nuestro &lt;code&gt;lineage*.zip&lt;/code&gt; y aplicamos los
cambios deslizando de nuevo.&lt;/p&gt;

&lt;p&gt;Reiniciamos y ya deberiamos tener nuestro flamante sistema con androide 7 y sin
las cosas de google, je, ni pide usuario o mierdas similares!. Para terminar instalamos
el fdroid, el apk de vlc (desde su pagina) y a rockanrolear&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;happy hacking!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;pd:&lt;/em&gt; al parecer, el metodo es mas o menos similar pra cualquier movil, aunque el
viejo LG l50 se resiste a entrar en el &amp;ldquo;bios&amp;rdquo;, si lo consiguo ya habra segunda
parte)&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;pd2:&lt;/em&gt; el equipo de segunda mano se llebo todas mis fichas, y no tiene
recambio. Repararlo tampoco parece una opcion rozonable (por el precio), ja, ja,
ja, si lo logro re-vender a alguna entidad como la que me lo colo, creo que
compraria un equipo identico, principalmente por pasar la prueba y tener un
hardware mas que potable)&lt;/p&gt;

&lt;h2 id=&#34;fuentes&#34;&gt;fuentes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.lineageos.org/devices/m8/install&#34;&gt;https://wiki.lineageos.org/devices/m8/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dl.twrp.me/m8/&#34;&gt;https://dl.twrp.me/m8/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.htcdev.com/bootloader&#34;&gt;https://www.htcdev.com/bootloader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.htcdev.com/bootloader/unlock-instructions&#34;&gt;https://www.htcdev.com/bootloader/unlock-instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.htcdev.com/bootloader/unlock-instructions/page-2&#34;&gt;https://www.htcdev.com/bootloader/unlock-instructions/page-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.htcdev.com/bootloader/unlock-instructions/page-4/&#34;&gt;https://www.htcdev.com/bootloader/unlock-instructions/page-4/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.htcdev.com/bootloader/about_unlock_process&#34;&gt;https://www.htcdev.com/bootloader/about_unlock_process&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Return Of F</title>
      <link>https://nasciiboy.github.io/prog/the-return-of-f/</link>
      <pubDate>Thu, 16 Nov 2017 13:24:08 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/the-return-of-f/</guid>
      <description>

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/F.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo esa bonita tradicion de las entradas &lt;strong&gt;&amp;ldquo;que hacer despues de instalar
&lt;em&gt;X&lt;/em&gt;&amp;ldquo;&lt;/strong&gt;, llega el turno de hacer un:  &amp;ldquo;que hacer despues de instalar&amp;hellip; &lt;em&gt;Fedora&lt;/em&gt;&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;y, es que el tour por antergos fue un encanto mientras duro, pero cuando las
cosas se pusieron feas, la ultima opcion que quedaba fue regresar a las frias y
perversas garras (&lt;del&gt;reptili&lt;/del&gt;|fedori)anas.&lt;/p&gt;

&lt;p&gt;Jo, jo, jo, no todo es tan malo, creo, freidora tambien tiene de lo ultimo y por ahora el
unico problema es que el equipo no se apaga si no es con un reinicio y cortando
el switch de la fuente en el interludio&amp;hellip;. ja, ja, ja, es eso o hacerse de un
par de monitores con entrada no vga, o, conseguir un adaptador dvi-&amp;gt;vga, ya sera
para navidad&amp;hellip;&lt;/p&gt;

&lt;p&gt;La siguiente agrupacion de aplicaciones es la condensacion de varias
instalaciones condensadas en forma de &amp;ldquo;lista&amp;rdquo; (en texto plano) donde convive con
su equvalente para debian y arch, comentando a grandes rangos para que es cada
programa y anotando otros que aunque no utilizo son interesantes. Obviamente
cambia segun la distro y las aplicaciones disponibles en los repos&lt;/p&gt;

&lt;p&gt;pero bueno, este compendio esta probado en freidora 27. Cierto es que el
nucleo duro en la personalizacion de mi sistema se encuentra en &lt;code&gt;$HOME&lt;/code&gt;, una
particion permanente, y en futuras instalaciones tambien tendre una particion
para &lt;em&gt;root&lt;/em&gt;, para disminuir aun mas las configuraciones. Asi que la instalacion
de todas estas herramientas no deja de ser el paso mas sencillo. Si deseas
utilizar la configuracion tal cual, tendras que investigar como configurar
varias de estas, por ejemplo &lt;code&gt;surfraw&lt;/code&gt; o variables de entorno como en el caso de
instalar java.&lt;/p&gt;

&lt;p&gt;dividire los pasos en bloques con una pequeña explicacion de algunas cosas y al
final todos los comandos juntos en un solo bloque.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
dnf -y install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
dnf -y install mg emacs moc htop fish tilix util-linux-user gnome-tweak-tool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lo primero es instalar los repos rpmfusion para tener aun mas programas como
&lt;code&gt;moc&lt;/code&gt;. Los nonfree estan por los codecs, aunque creo que no sirve de nada
tenerlos si utilizas vlc. Es curioso, pero aparentemente todo lo que existe en
los repos de fedora tiene que ser solo y unicamente software libre, aunque esto
no incluye (supongo por motivos &amp;ldquo;practicos&amp;rdquo;) eliminar los blobs del kernel e
incluir algunos controladores de wifis.&lt;/p&gt;

&lt;p&gt;luego a instalar los programas indispensables antes de hacer otra cosa mas,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;como editor &lt;code&gt;emacs&lt;/code&gt; y &lt;code&gt;mg&lt;/code&gt; como opcion ligera y para casos de desastre, que
utilizar &lt;code&gt;vi&lt;/code&gt; es algo incomodo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;moc&lt;/code&gt; para poner musica, que sin ruido no se va a ninguna parte.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; para ver el rendimiento del sistema o matar procesos reveldes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;tilix&lt;/code&gt; por que es la terminal que mola de verdad y por que la tengo
supertuneada&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;fish&lt;/code&gt; como interprete y &lt;code&gt;util-linux-user&lt;/code&gt; por que trae el comando &lt;code&gt;chsh&lt;/code&gt; para
colocar fish como shell por defecto&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;finalmente &lt;code&gt;gnome-tweak-tool&lt;/code&gt; para las 3 extensiones que uso&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;luego de esto, aprovecho para compilar &lt;code&gt;ckb&lt;/code&gt; (no incluido en los repos), que se
encarga de controlar el teclado [aqui voz de gamer &amp;gt;] RGB [&amp;lt;], tambien muy
tuneado.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# desarrollo
dnf -y groupinstall &amp;quot;Development Tools&amp;quot;
dnf -y groupinstall &amp;quot;Development Libraries&amp;quot;
dnf -y install kernel-headers kernel-devel
dnf -y install svn subversion git mercurial bzr valgrind gource
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto instala librerias y herramientas de desarrollo, la ultima instruccion es
para obtener todos los sistemas de control de versiones populares&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;valgrind&lt;/code&gt; para ver el rendimiendo de aplicaciones y otras cosas de
programadores&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;gource&lt;/code&gt; te hace una visualizacion grafica y kool de los comits en un repo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# programacion
dnf -y install clisp gdb ghc clang guile rust rust-doc ldc nasm cargo qt-devel qt-doc qt-creator kf5-kirigami arduino avr-libc fritzing

## java
dnf -y install java-9-openjdk java-9-openjdk-devel maven
update-alternatives --config java
update-alternatives --config javac
java -version
javac -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicamente compiladres e interpretes, para C/C++, lisp, scheme, haskell, rust, ensamblador,
cosas de qt, arduino y java. No las utilizo todas, pero si llega el
apocalipsis de internet, tendre que hacer.&lt;/p&gt;

&lt;p&gt;Hace falta incluir &lt;code&gt;racket&lt;/code&gt; (no viene en repos), pero eso ya lo busco y bajo si hace falta&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# algunas librerias
dnf -y builddep emacs dosbox moc love supertuxkart tilix firefox inkscape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto es para &amp;ldquo;poblar&amp;rdquo; el sistema con algunas librerias y no tener que buscar. En
la mayoria de los casos es mas que suficiente&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# monitores
dnf -y install glances inxi ncdu
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glances&lt;/code&gt; e &lt;code&gt;inxi&lt;/code&gt; para informacion del sistema&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncdu&lt;/code&gt; para ver el uso de disco&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(para instalar &lt;code&gt;dfc&lt;/code&gt; (&amp;ldquo;uso de disco&amp;rdquo;), necesario es compilar desde el &lt;a href=&#34;https://github.com/Rolinh/dfc&#34;&gt;repo&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# documentacion
dnf -y install zeal asciidoc pandoc poppler-utils caca-utils texinfo ghostscript pdfshuffle
dnf -y install tesseract tesseract-langpack-spa
dnf -y install elinks surfraw
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zeal&lt;/code&gt; visor visual de documentacion offline para cosas de programacion, en
nome con el tema obscuro global (tweaks) tiene un aspecto agradable,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; un formato de documentacion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pandoc&lt;/code&gt; coversor de distintos formatos de documentacion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poppler-utils&lt;/code&gt; creo que trae cosas para manipular pdf&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caca-utils&lt;/code&gt; no me acuerdo que es&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; otro formato viejuno de documentacion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghostscript&lt;/code&gt; cosas de PostScript y PDF&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdfshuffle&lt;/code&gt; manipular pdfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tesseract&lt;/code&gt;, &lt;code&gt;tesseract-langpack-spa&lt;/code&gt; ocr&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elinks&lt;/code&gt;, &lt;code&gt;surfraw&lt;/code&gt; para hacer busquedas por interne desde cli&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# media
dnf -y install vlc blender inkscape dia gimp tiled pinta synfigstudio mypaint mtpaint gpick subdownloader
dnf -y install python-pip python3-pip
pip install subliminal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;paquetes para ver y crear cosas graficas y &lt;code&gt;vlc&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subliminal&lt;/code&gt; y &lt;code&gt;subdownloader&lt;/code&gt; para conseguir subtitulos&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# utilidades o algo...
dnf -y install thunderbird simple-scan gscan2pdf speedcrunch
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thunderbird&lt;/code&gt; cliente de correo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simple-scan&lt;/code&gt; y &lt;code&gt;gscan2pdf&lt;/code&gt; para que sirva de algo el scanner&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speedcrunch&lt;/code&gt; una calculadora&amp;hellip; emacs ya trae &lt;code&gt;calc&lt;/code&gt; que es mas util, pero
esta, esta curiosa&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# data
dnf -y install qbittorrent amule youtube-dl
dnf -y install dtrx unp unar zip unzip id3v2 cuetools shntool flac ffmpeg
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qbittorrent&lt;/code&gt;, &lt;code&gt;amule&lt;/code&gt; clientes p2p&lt;/li&gt;
&lt;li&gt;&lt;code&gt;youtube-dl&lt;/code&gt; bajar video|audio del yutu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dtrx&lt;/code&gt;, &lt;code&gt;unp&lt;/code&gt;, &lt;code&gt;unar&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt; (des|com)presion de archivos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id3v2&lt;/code&gt; metadatos de audio&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cuetools&lt;/code&gt;, &lt;code&gt;shntool&lt;/code&gt;, &lt;code&gt;flac&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt; para cortar y transformar flacs&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# emergencia... y cosas
dnf -y install smartmontools testdisk foremost gparted rsync
dnf -y install aircrack-ng macchanger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;las primeras son herramientas para comprobar y reparar discos, crear particiones
y sincronizar datos&lt;/p&gt;

&lt;p&gt;las segundas para romper wifis, aunque aun no he tenido oportunidad (o
necesidad) de probar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# extra
dnf copr enable carlwgeorge/ripgrep
dnf -y install ripgrep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una alternativa|complmento a &lt;code&gt;grep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;los repos &lt;code&gt;copr&lt;/code&gt; son el equivalente a un &lt;em&gt;ppa&lt;/em&gt; ubunteroso, asi que precaucion,
ser cautelosos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# codecs
dnf -y install gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free gstreamer1-plugins-bad-freeworld gstreamer1-plugins-bad-free-extras ffmpeg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;con &lt;code&gt;vlc&lt;/code&gt; como reproductor de videos y &lt;code&gt;moc&lt;/code&gt; por parte de los audios, no los he
necesitado y creo que tampoco hace diferencia instalarlos o no, pero hay estan&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# eliminar cosas inecesarias
dnf -y remove evolution gnome-calendar gnome-contacts gnome-maps gnome-terminal gnome-text-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;borrar algunas cosas que no ocupo&lt;/p&gt;

&lt;p&gt;y finalmente instalar &lt;code&gt;boinc&lt;/code&gt; para colaborar aunque sea anecdoticamente con &lt;strong&gt;la
ciencia&lt;/strong&gt;. Para esto no tengo los pasos concretos, sera en otra ocacion, pero
&lt;a href=&#34;https://fedoraproject.org/wiki/Installing_and_running_BOINC_client_in_Fedora_21&#34;&gt;este&lt;/a&gt;
post fue la clave para poder echarlo a andar, aunque es molesto tener ficheros
&amp;ldquo;de mas&amp;rdquo; en el home, sea por &lt;strong&gt;la ciencia&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-final&#34;&gt;el final&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
dnf -y install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
dnf -y install mg emacs moc htop fish tilix util-linux-user gnome-tweak-tool

# desarrollo
dnf -y groupinstall &amp;quot;Development Tools&amp;quot;
dnf -y groupinstall &amp;quot;Development Libraries&amp;quot;
dnf -y install kernel-headers kernel-devel
dnf -y install svn subversion git mercurial bzr valgrind gource

# programacion
dnf -y install clisp gdb ghc clang guile rust rust-doc ldc nasm cargo qt-devel qt-doc qt-creator kf5-kirigami arduino avr-libc fritzing

## java
dnf -y install java-9-openjdk java-9-openjdk-devel maven
update-alternatives --config java
update-alternatives --config javac
java -version
javac -version

# algunas librerias
dnf -y builddep emacs dosbox moc love supertuxkart tilix firefox inkscape

# monitores
dnf -y install glances inxi ncdu

# documentacion
dnf -y install zeal asciidoc pandoc poppler-utils caca-utils texinfo ghostscript pdfshuffle
dnf -y install tesseract tesseract-langpack-spa
dnf -y install elinks surfraw

# media
dnf -y install vlc blender inkscape dia gimp tiled pinta synfigstudio mypaint mtpaint gpick subdownloader
dnf -y install python-pip python3-pip
pip install subliminal

# utilidades o algo...
dnf -y install thunderbird simple-scan gscan2pdf speedcrunch

# data
dnf -y install qbittorrent amule youtube-dl
dnf -y install dtrx unp unar zip unzip id3v2 cuetools shntool flac ffmpeg

# emergencia... y cosas
dnf -y install smartmontools testdisk foremost gparted rsync
dnf -y install aircrack-ng macchanger

# extra
dnf copr enable carlwgeorge/ripgrep
dnf -y install ripgrep

# codecs
dnf -y install gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free gstreamer1-plugins-bad-freeworld gstreamer1-plugins-bad-free-extras ffmpeg

# eliminar cosas inecesarias
dnf -y remove evolution gnome-calendar gnome-contacts gnome-maps gnome-terminal gnome-text-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lol, tener cuidado siempre que utilicen &lt;code&gt;remove&lt;/code&gt; con la opcion &lt;code&gt;-y&lt;/code&gt; y el comodin
&lt;code&gt;*&lt;/code&gt;, lo he aprendido de forma inmisericorde, al eliminar &lt;code&gt;evolution*&lt;/code&gt; e irse con
el todo &lt;code&gt;gnome&lt;/code&gt; y el servidor de audio (pipewire), ja, ja, ja, el sistema (grafico) funciono lo
suficiente para reinstalar &lt;code&gt;gnome&lt;/code&gt; y luego quedarse colgado de forma
irremediable&amp;hellip; aunque ahora ya no inicia el entorno grafico, aparece el login,
luego abro una terminal y desde hay lanzo el entonro grafico con &lt;code&gt;startx&lt;/code&gt;, cual sera el
equivalente en wayland? &lt;code&gt;startw&lt;/code&gt;, &lt;code&gt;startg&lt;/code&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java &amp; Me(h)</title>
      <link>https://nasciiboy.github.io/prog/javame/</link>
      <pubDate>Fri, 10 Nov 2017 14:57:41 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/javame/</guid>
      <description>

&lt;p&gt;Por que &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/&#34;&gt;razones&lt;/a&gt;
concientes y sin coercion externa aprender java?&lt;/p&gt;

&lt;p&gt;en mi caso, hice un solemne juramento de no aprender java (y quiza python,
js&amp;hellip;) y en general nada 7 veces mas lento que C&amp;hellip; porque cualquier lenguaje un orden
de magnitud mas lento que C, es directamente una basura&amp;hellip; o tiene un ambito de uso
extremadamente especifico, como servir para crear extensiones o como
prompt. Fuera de este uso, nadie &amp;ldquo;serio&amp;rdquo; sacarlos deberia. Crear programas completos
directamente en esos lenguajes es una guarrada y una falta de
respeto por el espiritu que habita en el silicio. Por decir algo, es casi tan
aberrante como mi forma de escribir&amp;hellip;&lt;/p&gt;

&lt;p&gt;pero bueno, hace mucho tiempo que java merodea por el mundo, y en general es
unas 4-6 veces mas lento que C, asi que entra en la zona estelar de los lenguajes que
permiten la existencia de agua liquida. Entonces, por que mantenia una
resistencia interna a aprender java?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;todas las cosas hechas con Java dan la sensacion de estar lagueadas. (Arde en el
infierto android)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;deriva de C++ y C++ no es un lenguje agradable para programar (si tocas todas
sus posibilidades), por que tiene un monton de caracteristicas obscuras y
sutiles, que lo hacen absurdamente complejo, dificil de leer e imposible de
dominar (o no)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hiede a empresarial, y las cosas empresariales no son divertidas, y yo viene a
la programacion para estar cool (&amp;lt;== obscura referencia al manga GTO)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pero estonces, por que siquiera de estas explicaciones, que hechos se han
conjurado para ceder al mal?&lt;/p&gt;

&lt;p&gt;basicamente, mientras continuo el trepidante camino en la programacion
autodidacta sin tener idea (de mates, english o adonde dirigirme), y a medida
que va creciendo la complejidad de las cosas que &amp;ldquo;planeo&amp;rdquo; programar, la
intuicion y sentido comun me dice que muchos de esos secretos ancestrales se
encuentran alla afuera&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/believer.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;o en el peor de los casos, estan cerca de ser ser promulgados, por alguien&amp;hellip;&lt;/p&gt;

&lt;p&gt;como apenas inicio mis andansas por el mundo de las mategicas y el engrish aun
es arido en sus detalles, para no desaprobechar ese regalo llamado ser el
fracasado treinton sin empleo que se queda en la pc todo el dia sin hacer nahhh
y que vive permanentemente en la banca rota&amp;hellip; mejor leer cosas programacionales
en español, un  inquietante campo superpoblado con material que utiliza a
java como lenguaje universal, asi que por el bien del mundo, a joderse!&lt;/p&gt;

&lt;h2 id=&#34;instalar-java&#34;&gt;Instalar Java&lt;/h2&gt;

&lt;p&gt;Casi todos los sistemas del Ñu traen un java instalado por defecto, como en el
caso de freidora el openjdk-1.8, pero con esto no nos vasta para comenzar a
&amp;ldquo;compilar&amp;rdquo; programos, hace falta instalar el paquete &lt;em&gt;devel&lt;/em&gt; para optener el
programa &lt;code&gt;javac&lt;/code&gt;. Ya que estamos (y por que en freidora 27 aparece en los repos)
pues mejor instalar lo ultimo de lo ultimo, por si lanzamos pestes, sus fancis no digan
que la causa es utilizar una version desfasada; ademas es casi completamente
compatible con el codigo vintage!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# paquetes del java-9
dnf -y install java-9-openjdk java-9-openjdk-devel

# le decimos al sistema que este va a ser el &amp;quot;java bueno&amp;quot;
# nos preguntara con un numero cual java poner por defecto
# el que tenga un =nueve= sera el efectivo
update-alternatives --config java

# lo mismo que el anterior pero para el javac
update-alternatives --config javac

# comprobamos que la version es correcta
java -version
javac -version

# no se que es esto, pero parece importante para el futuro
dnf -y install maven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luego, tenemos que configurar en nuestro shell las rutas donde el java buscara
las &amp;ldquo;librerias&amp;rdquo; para compilar sus cosas. Esto se hace estableciendo la variable &lt;code&gt;CLASSPATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En &lt;code&gt;fish&lt;/code&gt; ha sido asi (&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set --export CLASSPATH  &#39;/usr/share/java:.:/home/mi-usuario/.java&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;solo acepta rutas absolutas. Las rutas se separan por dos puntos (&lt;code&gt;:&lt;/code&gt;).  La
primera es donde esta la libreria estandar (en freidora), la segunda, &amp;ldquo;el
punto&amp;rdquo;, es para que busque en el directorio actual, y la tercera, para colocar
cualquier libreria externa que me encuentre por el internet sin comprometer el
sistema demaciado, y para no hacer cosas de root con frecuencia, ademas es una
carpeta oculta para no molestar&lt;/p&gt;

&lt;p&gt;oh, como el java nueve es muy moderno, incluye un comando de tipo REPL, que
significa que podemos programar de forma interactiva. Solo hay que typear
&lt;code&gt;jshell&lt;/code&gt; y voala, a programar sin compilaciones y con mucho
l-a-a-g-g-g-g-g-g. Este tipo de cosillas y sus tiempos de respuesta me ponen
nostalgico, como que estubiera en otro tiempo y asi fuera programar &amp;ldquo;de verdad&amp;rdquo;,
fuera de sarcasmos, tiene su encanto!&lt;/p&gt;

&lt;p&gt;encontre sobre esto del &lt;code&gt;jshell&lt;/code&gt; en un libro (en ingles) llamado &amp;ldquo;Java 9
Programming By Example&amp;rdquo; de facil optecion, al menos en un sito llamado
&lt;em&gt;allitebooks&lt;/em&gt;. jo, jo, jo, que jocosos los de la editorial del libro, que te
insitan a informar si lo encuentras por la red, me dan ganas (si lo continuo y es
interesante) de cobayisarlo, ya veremos&lt;/p&gt;

&lt;h2 id=&#34;el-editor&#34;&gt;El editor&lt;/h2&gt;

&lt;p&gt;fuuuhh, aver, en emacs hay un modo para esto, es decir lo basico, resaltado e
indentacion, si quieres mas pues a buscar por vias alternas.&lt;/p&gt;

&lt;p&gt;Hay un modo externo que se llama &lt;strong&gt;jdee&lt;/strong&gt;, con resaltado de errores,
autocompletado, documentacion, dos espacios de indentacion por defecto y otras
promesas mas, aunque la instalacon en mi caso no fue bien, creo que es algo
relacionado con las rutas de java.&lt;/p&gt;

&lt;p&gt;Al ver que la cosa no iba muy fina, reverti los cambios y deje el emacs como al
inicio y toco ir por la segunda alternativa: un viscoso, (d)oloroso, consumista y
lentorro &lt;strong&gt;IDE&lt;/strong&gt;&amp;hellip; bueno la prueba se limito a &lt;strong&gt;eclipse&lt;/strong&gt;, la unica conclusion
que puedo dejar sobre la experiencia, es que mi maquina no es apta para correr
estas cosas para developers modernos&lt;/p&gt;

&lt;p&gt;asi que ha regresar al emacs &amp;ldquo;a pelo&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;documentacion&#34;&gt;Documentacion&lt;/h2&gt;

&lt;p&gt;Esto es un punto bastante jodido con java, no tengo ni puta idea sobre como se
organiza la libreria estandar, ni que tan lejos llega o como se utiliza. Para
volverlo aun mas complejo no hay documentacion en linea de comandos similar a
&lt;code&gt;man 3&lt;/code&gt; o &lt;code&gt;go doc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La opcion de emergencia fue bajar los docs de Java para &lt;code&gt;zeal&lt;/code&gt; y tampoco fue de
mucha ayuda, de nuevo no tengo idea de como se organiza|utiliza la libreria
estandar y abrir un libro (pdf en este caso) &lt;em&gt;especializado&lt;/em&gt; para averiguar que
clase se utiliza para tal cosa, o como hereda de tal otra, no es una opcion que pueda
contemplar&lt;/p&gt;

&lt;h2 id=&#34;thinking-in-java-2-da-edicion&#34;&gt;Thinking in JAVA, 2^da edicion&lt;/h2&gt;

&lt;p&gt;Vamos con la carnita, un libro viejuno de Java 2, de los años 2000, donde hablan
de las guerras de navegadores con el netscape vs el explorer y podian ejecutar
el java salvagemente con etiquetas html!&lt;/p&gt;

&lt;p&gt;Tome este libro por que el codigo del autor me parecio mas que bonito en su
libro de Piensa en C++ (era joven). Tambien por que fue lo que encontre en
español, por que tiene muchas paginas, por que sale rapido en una busqueda con
terminacion &lt;em&gt;pdf&lt;/em&gt; y por que el codigo fuente de los ejercios tiene &lt;em&gt;dos
espacios de indentacion&lt;/em&gt;, haci lo hacia Stallman, haci lo hacia este autor, haci
lo hago yo y haci lo haran mis decendientes sinteticos.&lt;/p&gt;

&lt;p&gt;El libro tiene una version 4, que data del 2006, en ingles asi que esta
descalificado, pero desde la pagina del autor pueden descargar el codigo de los
ejemplos y el libro (en ingles) en formato html de esta 2^da edicion. Aqui el &lt;a href=&#34;http://www.mindviewinc.com/downloads/TIJ-2nd-edition.zip&#34;&gt;enlace al
zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;o, y por si el enlace esta roto, bajarlo de &lt;a href=&#34;https://nasciiboy.github.io/data/TIJ-2nd-edition.zip&#34;&gt;aca&lt;/a&gt;,
a esta le aplique un &lt;code&gt;dos2unix&lt;/code&gt; a todos los ficheros, para no tener que ver el
&lt;em&gt;DOS&lt;/em&gt; en el emacs&lt;/p&gt;

&lt;p&gt;antes de continuar y si se quiere seguir el libro, es importante que
descomprinas el zip, tiene una carpeta con el libro y otra con el codigo fuente,
toma esta ultima y mueve/copia la carpeta &lt;code&gt;com&lt;/code&gt; a donde sea
que tengas apuntando la variable &lt;code&gt;CLASSPATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Una ves hecho esto vasta con entrar a la carpeta que se este estudiando y hacer
un &lt;code&gt;make&lt;/code&gt;, casi todos los ejemplos compilan, excepto en los capitulos (creo que)
12 en adelante, cuando se pone a hacer cosas con GUI y por que tiene una feo
fetichismo de incluir sus librerias en cada ocacion.&lt;/p&gt;

&lt;p&gt;Ahora si, que tal el libro?&lt;/p&gt;

&lt;p&gt;un libro con DLC&amp;hellip; el autor aprovecha cada ocacion que tiene para mencionar que
puedes bajar tal o cual material suyo en su web, y que por una modica cantidad
te ofrece &lt;del&gt;droga&lt;/del&gt; las respuestas a los ejercicios, el resto, por supuesto
[inserta aqui efecto de susurrar al oido] &lt;em&gt;es gratis&lt;/em&gt;. Algo molesto en mi opinion,
mas para venir en un libro comprado, con mencionarlo en el prefacio bastaba&lt;/p&gt;

&lt;p&gt;Los primeros capitulos (hasta antes de la aparicon de herecia e interfaces) son bastantes
llebaderos, explica de forma condesada y clara muchas cosas, como que jodidos es
un recolector de basura (junto con sus inconvenientes que dan miedo), que es un
hilo del sistema, por que java esta diseñado como esta diseñado, su evolucion,
carencias y defectos&lt;/p&gt;

&lt;p&gt;en el capitulo de la herencia las cosas se ponen turbias, te agobia con
un monton de caracteristicas obscuras. Fue entonces cuando el formato &amp;ldquo;Catalogo
de referencia&amp;rdquo; del libro salto a la conciencia. Seguramente por la propia
naturaleza ecleptica de java. El autor no duda en mencionar cada una de sus multiples
opciones y capacidades, lo que sumado a que el libro no te enseña a hacer nada
(por decirlo de alguna manera), hace dificil retener el sin numero de opciones&lt;/p&gt;

&lt;p&gt;Cuando la cantidad de informacion es abrumadora como en este caso, recomiendo
entrar en modo paseo por tienda, ver que hay y si el vendedor se acerca, decirle que no
moleste. Todas estas opciones solo se retienen en el cortex luego que se
presentan los problemas mientras se va programando, ese es el momento donde
saber que exite una cosa (aunque no como hacerlo) regresa a nuestro recuerdo y
podemos ejecutar el aprendizaje teorica y practimamente, y quiza si es posible
con aplicaciones recurrentes, memorizarlo&lt;/p&gt;

&lt;p&gt;cerca de la pagina 450 el material comenzo a parecer pesado.&lt;/p&gt;

&lt;p&gt;Ya que la principal motivacion de leer el libro era enterarme que estan
exponiendo en algun ejemplo corto de algun libro intereante, no dedicarme a
programar en java, me plantee dejar la lectura y pasar a otra cosa. Pero
continue al siguente capitulo y aparecieron cosas relevantes. Si tambien vas
en modo paseo, almenos lee el inicio de cada capitulo y alguna seccion relevante&lt;/p&gt;

&lt;p&gt;Como conclusion el libro es eso, un buen material de consulta.&lt;/p&gt;

&lt;p&gt;Sobre java:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Es un lenguaje pegote (o katamari), se le adiere todo, un monton de
posibilades que incitan a hacer guarradas y no enterarte de lo que algun
programador con preferencias exquisitas este haciendo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La jerarquia, asociacion y documentacion de sus clases no es intuitiva&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;compilar&amp;rdquo; y &amp;ldquo;cargar&amp;rdquo; (&lt;code&gt;javac&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;) es un rollo y se siente lento&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;El lenguaje no esta diseñado, es 🌈evolutivo🌈. Toma la inco(nsist|her)ente base de C++, la simplifica,
y hace mas verbosa, un monton de clases, enfoques, palabras clave y especificadores con
multiples significados que enturbian la 🌈experiencia🌈&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;y ya! bienvenidos los insultos y duelos a muerte!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OCR</title>
      <link>https://nasciiboy.github.io/prog/ocr/</link>
      <pubDate>Thu, 09 Nov 2017 17:10:40 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/ocr/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/padesoor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;sucede que tenia un libro que aprecio muchisimo, pero mucho mucho mucho, aunque
no lo habia leido y lo escaneeehee para convertirlo en otra cobaya del proyecto
morg, y para leerlo&amp;hellip; y por que supongo que lo voy a necesitar con inmediates y
de forma reiterativa en el futuro.&lt;/p&gt;

&lt;p&gt;asi que en un acto de benevolencia, pereza y mayor exactitud (o no), paso por mi
mente darle otra oportunidad al ocr y ver si con el paso del tiempo la cosa habia
ido a mejor o en definitiva hay que esperar la aparicion de inteligencias
artificiales reales, para la titanica tarea de digitalizar todo el conocimento&lt;/p&gt;

&lt;p&gt;pero bueno, el asunto tiene un grado superior de complejidad por que el scan (en
pdf) contiene dos paginas por pagina, je, je, y al generar las imagenes (para
que las tome el ocr) estas tienen una orientacion equivoca&lt;/p&gt;

&lt;p&gt;ademas y aunque el ocr es capaz de reconocer tal aberracion y generar un texto
correctamente organizado, preferi cortar cada imagen y luego mandarsela al
ocr para disminuirle complejidad&lt;/p&gt;

&lt;p&gt;asi pues, pese a mi ignorancia con bash aqui esta el cutre-script
resultado&amp;hellip; creo que hubiera tardado menos programando directamente en Go&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#! /bin/bash

# esto &amp;quot;corta&amp;quot; el pdf en imagenes png, pato es el sufijo del resultado
pdfimages -png &amp;quot;$1&amp;quot; pato

# cargo las imagenes en una variable para iterar sobre ellas
patoPng=$(ls -1 *.png)

# una varible para poner nombres distintos
declare -i pata=0

for quak in $patoPng
do
    # rotar imagen a posicion apropiada
    convert -rotate -90 $quak $quak
    # cortar primer mitad de la imagen
    # espacio extra por que la imagen esta muy movida [finXfinY+inicioX+inicioY]
    convert -crop 1517x1965+0+0 $quak $(printf &amp;quot;pata-%04i.png&amp;quot; $pata)
    pata+=1
    # cortar segunda mitad de la imagen
    convert -crop 2939x1965+1469+0 $quak $(printf &amp;quot;pata-%04i.png&amp;quot; $pata)
done

# cargo las imagenes &amp;quot;recortadas&amp;quot;
pataPng=$(ls -1 pata-*.png)

# restablesco la variable de los nombres distintos
pata=0

for quak in $pataPng
do
    # el ocr de cada imagen
    tesseract $quak $(printf &amp;quot;patax-%04i&amp;quot; $pata) -l spa+eng
    pata+=1
done

# concatenar todos los textos a un fichero unico
cat patax* &amp;gt; ocr.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para llamar al script copiar y pasar a un fichero que se llame &lt;code&gt;cutre.sh&lt;/code&gt; y
llamar con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./cutre.sh mi.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;obviamente hay que cambiar lo de la rotacion (si es que se necesita) y quitar lo
de los cortes, todo segun sea el caso&lt;/p&gt;

&lt;p&gt;el ocr (&lt;code&gt;tesseract&lt;/code&gt;) de linea de comandos esta en los repos, en freidora lo optienen con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf -y install tesseract tesseract-langpack-spa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;necesario instalar los paquetes del lenguaje que se va a digitalizar (el ingles
venia includo, por que todo mundo habla ingles&amp;hellip;). El programa &lt;code&gt;pdfimages&lt;/code&gt; no
me acuerdo de que paquete forma parte, investigar por vuestra cuenta! &lt;code&gt;convert&lt;/code&gt;
creo que es parte del paquete &lt;code&gt;imagemagic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y bueno&amp;hellip; el ocr me sigue pareciendo un truño, si, es verdad que el texto
puesto esta bastante jodido, pero el resultado tiene tantos defectos, que me
sale mas a cuenta mecanografiarlo artesanalmente, ademas tenia ganas de
mecanografiar, es algo que me desestresa, tambien me ayuda a sertirme
&amp;ldquo;productivo&amp;rdquo; y a enfocarme (o distraerme). Ultimamente los pdf que encuentro
traen oceerres buenos y le quita la emocion, para esos casos basta con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pdftotext mi-pdf miSalida.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pdftotext&lt;/code&gt; tambien tiene una opcion &lt;code&gt;-layout&lt;/code&gt; que puede ser bastante util (a veces)&lt;/p&gt;

&lt;p&gt;happy typing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>blackfriday</title>
      <link>https://nasciiboy.github.io/prog/blackfriday/</link>
      <pubDate>Fri, 27 Oct 2017 17:42:32 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/blackfriday/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/bf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Durante la modificacion del morg, habia escrito esto junto con otras notas
vagas en una bitocora de abordo que trata de ser FIFO, aunque si no mantengo la
constancia comienza a crecer y crecer hasta volverse incomoda. Asi pues (y como
el post anterior) a despejar algunas de esas divagaciones&lt;/p&gt;

&lt;h2 id=&#34;como-no-construir-un-parser-para-un-lenguaje-de-marcas-ligeras&#34;&gt;Como (no) construir un parser para un lenguaje de marcas (ligeras)&lt;/h2&gt;

&lt;p&gt;con &lt;em&gt;morg&lt;/em&gt; (parser y lenguaje de marcas ligueras inventado por yo) la
construccion al igual que casi todas mis mierdas, fue fruto de reinventar la
rueda + prueba y error constantes, tratando de mantener una cierta sencilles&amp;hellip;
mientras la raices de la incertidubre sobre si el proyecto llegaria a ser
funcional o quedaria truncado por la ignorancia y malas deciciones de diseño
orientadas en su mayoria por la aleatoriedad, me consumen lentamente&lt;/p&gt;

&lt;p&gt;una de las primeras deciciones luego de la mudanza a Go, fue trabajar con
strings o slices de bytes, los primeros son inmutables, peeero todas las
funciones que trabajan con documentos (de la libreria estandar y mas alla) optan
por utilizar slices de bytes.&lt;/p&gt;

&lt;p&gt;En principo me parecio que los strings son mejor opcion, pues me aseguro de no
fastidiar lo que el usuario envie a el exportador, ademas que hacer recorridos
por la cadena mediante &lt;code&gt;range&lt;/code&gt;s es muy sencillo, con el agregado de
soportar unicode.&lt;/p&gt;

&lt;p&gt;Por el otro lado, trabajar con bytes, evita una conversion extra (de bytes a
strings) y supuestamente son mas eficientes, pero venido como soy de C, donde se
suponque que las cadenas constantes son mas eficientes, la duda sigue presente&lt;/p&gt;

&lt;p&gt;Otro tema y creo que mas crucial es como recorer y diseccionar los
datos de entrada, opteniendo los supuestos componentes del lenguaje,
encabezados, parrafos, notas, resaltado, listas, definiciones, etc, y casi igual
de importante como organizarlos en una forma conveniente tanto para yo como
programador, como para yo como usuario del programa y de ser posible lanzar
advertencias cuando se localicen datos de entrada erroneos&lt;/p&gt;

&lt;p&gt;ante tal reto y sin &amp;ldquo;documentos tecnicos&amp;rdquo; que conosca (o entienda), la unica
opcion en el corto plazo, no es otra que meterse a lo bruto con algun proyecto
de programacion que ofresca descaradamente su codigo a todo mundo, aqui es donde
entra la libreria &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;blackfriday&lt;/a&gt; de un
tal &lt;em&gt;russross&lt;/em&gt; para parsear markdown, escrita en Go&amp;hellip; lol, hace tiempo intente
con cosas en C y python&amp;hellip; donde el codigo me resulto incomprensible&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;como-lo-hace-russross&#34;&gt;como lo hace russross&lt;/h2&gt;

&lt;p&gt;utiliza slices de bytes, en lugar de cadenas, buffers del paquetes &lt;code&gt;bytes&lt;/code&gt; como
contenedores del resultado, tanto en llamadas internas como en los
&lt;em&gt;renderizadores&lt;/em&gt; del documento parceado e igual que morg no regresa error
alguno, solo slices vacios (&lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;interesante es su parseo en si, asigno funciones con caracteres &amp;ldquo;centinela&amp;rdquo;
para identificar los objetos, envia el slice de datos a la funcion respectiva,
junto con la estructura del documento y esta almacena el resultado y regeresa la
longitud de bytes leeidos que se suponen forman parte del elemento&lt;/p&gt;

&lt;p&gt;mas interesante, es que toma dos pasos de parseo sobre el documento, la primera
para normalizar el docuemento (quitar los saltos de linea a lo windows &lt;code&gt;\r\n&lt;/code&gt;,
cosa que no hare por asco a windows y trabajar solo con saltos unix &lt;code&gt;\n&lt;/code&gt;),
extraer referencias, normalizar bloques de codigo y copiar el resto tal cual,
todo byte a byte o a slices, en el buffer. El segundo reccorido por el documento
es para el parseo &amp;ldquo;serio&amp;rdquo; donde corta y renderiza el resto de cosas.&lt;/p&gt;

&lt;p&gt;Me llama la atencion, que aunque utiliza &lt;code&gt;bytes.Buffer&lt;/code&gt;, no los haga crecer
desde un inicio para disminuir las asignaciones de memoria, no es que sea
realmente necesario&amp;hellip; je, optimizacion premutura, el mal!&lt;/p&gt;

&lt;p&gt;otra desicion relevante toma cuando al llamar al parser del documento, hay que
enviarle un &lt;em&gt;renderizador&lt;/em&gt; que es una interfaz con 31 funciones, la cual se
encarga en unica instancia de entregar el resultado como texto plano en forma de
slice de bytes, bueno, eficiente o practico? dificil saberlo, blacfriday entrega
un render para HTML y otro experimental para latex, aunque por la naturazela de
markdown dificimente sera satisfactorio, pero siendo markdown, un mero
&lt;em&gt;facilitador&lt;/em&gt; de HTML, no hay necesidad de generar otra cosa que no sea HTML, un
poco futil ecuentro la cortecia de entregar &amp;ldquo;renders&amp;rdquo; en blackfriday, cuando el
parseo y exportacion van juntos, unidos, en las entrañas del parser.&lt;/p&gt;

&lt;p&gt;En morg, no lo tenia (ni tengo) muy claro, en la primer version, el parser y el
render son entes separados, unidos solo por la estructura &amp;ldquo;organizada&amp;rdquo; que
entrega el primero, deje en manos del render hacer lo que le venga en gana con
la estructura, sin embargo, al cambiar constantemente esta, hay que hacer una
labor de actualizacion en los &lt;em&gt;n&lt;/em&gt; renders, en &lt;em&gt;n&lt;/em&gt; cambios, quiza un punto
intermedio vendria bien, para la siguiente version; que te entrege la estructura
en bruto y cuente con una interfaz que trabaje como plantilla de exportacion,
aunque, las sutilezas del lenguaje de marcado a exportar, vuelven a esto un
rigido inconveniente, pese a lo sencillo de definir unas cuantas reglas
genericas&lt;/p&gt;

&lt;p&gt;creo que pandoc, cuando examina un docuemnto, lo convierte a una estructura
&amp;ldquo;maestra&amp;rdquo; y luego con ella ya se lo manda a sus renders, me siento mas comodo con esta
opcion, pero como aun no le hago al haskell, tendre que esperar para comprobarlo
de primera mano&lt;/p&gt;

&lt;h2 id=&#34;conclucion&#34;&gt;conclucion&lt;/h2&gt;

&lt;p&gt;tentado estoy a trabajar con bytes, aunque creo que trabajar con &lt;code&gt;bytes.Buffer&lt;/code&gt;
no representa una gran mejora y obliga a incluir un paquete extra, je, je, tengo
algun complejo muuu grande con incluir librerias, aunque sean las estandar,
tengo un problema&amp;hellip; repite tu mantra, esta en la libreria estandar, es bueno y
necesario, en la libreria estandar esta, necesario y bueno es usarlo&lt;/p&gt;

&lt;p&gt;utilizar bytes, requiere modificaciones drasticas en regexp4 que solo maneja
strings, o un monton de conversiones de ida y vuelta.&lt;/p&gt;

&lt;p&gt;que hacer? bytes y strings, dos caras de la misma moneda, separadas por la no
conversion de tipos automatica, para la ocultacion de cadenas como punteros, en
estas deciciones Go-leanas es cuando extraño a C, cuando aparecen estas
estructuras que no estoy seguro si se replican a cada copia/asignacion o
trabajan con los mismos datos de fondo&lt;/p&gt;

&lt;p&gt;en resumen blackfriday (digo, luego de tres intentos por comprenderla hasta no
terminar de leer seriamente el TGPL), no era tan alien, ni complejo como parecia
en un principio, que esta furtemente atado a las limitaciones de markdown, al
igual que sus renderes y por ello no se ve forzado a implementar una estructura
que almacene el documento, pues no maneja elementos, anidados sobre elementos
anidados, sobre elementos aninados, peroooo dentro de sus limitaciones tecnicas,
hace bien su labor&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raptor Down</title>
      <link>https://nasciiboy.github.io/prog/raptor-down/</link>
      <pubDate>Fri, 27 Oct 2017 16:58:55 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/raptor-down/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/rocky.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-conteo-final&#34;&gt;El Conteo Final&lt;/h2&gt;

&lt;p&gt;De los pocos proyectos presentables que tengo, la libreria de expresiones
regulares (estilo) &amp;ldquo;raptor&amp;rdquo; contiene lo suficiente de mi&amp;hellip; que aun si el
fastidio se presentara mañana y dejara de programar, seria suficiente para
sentirme satisfecho&lt;/p&gt;

&lt;p&gt;incluso inclui algunas caracteristicas &amp;ldquo;avanzadas&amp;rdquo; (no regexp) de otros motores,
por ejemplo una exprecion &lt;code&gt;texto.*mas-texto&lt;/code&gt; en &lt;em&gt;raptor&lt;/em&gt; era
&lt;code&gt;texto(mas-texto)*#!mas-texto&lt;/code&gt;, algo que denomine como &lt;q&gt;negacion de
expresiones&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;perooo, la negacion de expresiones requeria romper con la sencilles de la libreria (o
motor o como se diga). Tenia la ambicion de encontrar una forma de simplificar
las caracteristicas avanzadas de otros proyectos a la vez que incrementaba su
rendimiento. Con esta idea en mente, me dispuse a examinar el motor de
expresiones regulares que forma parte de la libreria estandar del lenguaje de
programacion Go, intentando desde luego alcanzar la grandeza&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;gore&#34;&gt;Gore&lt;/h2&gt;

&lt;p&gt;Casi por norma general ocurre que me adentro en un proyecto ajeno y me pierdo
entre dependencias y recorridos entre un fichero a otro, mientras trato de hacer
una imagen global de lo que esta pasando. Pese a que en Golang mi orientacion es
superior que en C, o C++, me perdi bastante, aunque llege a apreciar que el parseo
no ocurre en el paquete principal de codigo, si no que sucede en otro &amp;ldquo;de
sintaxis&amp;rdquo;, donde tambien se realiza una &lt;em&gt;simplificacion&lt;/em&gt; del recorrido de las expresiones.&lt;/p&gt;

&lt;p&gt;Los resultados de transformar la expresion en algo util se depositan en una
estructura, que tiene un arreglo con todos los datos necesarios y un arreglo de
sub-expresiones o sea punteros del mismo tipo para cuando se requiere por
ejemplo en agrupaciones, alternacion y conjuntos, agrupar expresiones dentro de
otras expresiones&lt;/p&gt;

&lt;p&gt;La optimizacion, de la expresion regular, se realiza revizando caso a caso los
elementos que tiene la expresion y se siplifican cuando es posible cambiando el
tipo de subexprecion por otro, eliminando anidamiento o agrupando varias
expresiones como una sola&lt;/p&gt;

&lt;p&gt;Una vez compilada la regexp, la busqueda (que no entendi muy bien) ocurre mas
que por iteracion por la cadena de ingreso, mediante operaciones especificas
considerando cada valor, posicion y tipo de la expresion, por ejemplo si debe buscarse al
inicio o al final, si es una expresion de tipo cadena, un conjunto, y luego
mediante funciones con la libreria &lt;code&gt;strings&lt;/code&gt; se realiza el trabajo sucio de los
casos sencillos&lt;/p&gt;

&lt;h2 id=&#34;say-goodbay&#34;&gt;Say, Goodbay&lt;/h2&gt;

&lt;p&gt;imaginaba que encontraria algo por el estilo, al examinar (o mejor dicho intuir
pues no llegue a enterder) un motor regexp &lt;em&gt;serio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La libreria regexp estandar es por decirlo de algun modo una fabrica con muchos
empleados especializados en una labor pequeña sin nungun glamour ni emocion, un
monton de trabajo manual automatizado convertido a codigo, je, je, je, yo queria
encontrar algo mas del estilo de la fabrica le willy wonka, con un rio de
gominolas y Oompa-loompas cantores&lt;/p&gt;

&lt;p&gt;veo a las expresiones regulares como un sistema conformado de (por decir) 3
reglas con el que se pueden generar patrones de complejidad y extencion
arbitrarios para casos de uso asombrosos aunque limitados. En contraste, las
expresiones (no) regulares actuales extienden estas normas incrementando la
complejidad a cambio de perder la &amp;ldquo;elegancia&amp;rdquo;, hay belleza hay? el codigo debe
ser bello?&lt;/p&gt;

&lt;p&gt;en este punto, se me acurasara (seguro con razon) de cazador de lo paranormal,
como quien se creee una religion y busca significados ocultos sumando las letras
de mil formas distintas hasta estar agusto. Con todo, asi es como veo el codigo,
como algo que tiene que ser sencillo y con belleza o al menos intentar aproximarse&lt;/p&gt;

&lt;p&gt;un tanto desilucionado, regrese a mi motor y lo despoje de la caracteristica
esoterica &lt;code&gt;#!&lt;/code&gt;, con lo cual se redujo la complejidad a su expresion mas simple y
gano algo de rendimiento en las &lt;a href=&#34;https://nasciiboy.github.io/raptorVSworld/index.html&#34;&gt;pruebas&lt;/a&gt;,
entre 500 y 1000 milisegundos en cada competencia, y en algunos
casos aislados, el tiempo se redujo a la mitad, hubo que renunciar a dos
expresiones donde ahora aparece un &lt;strong&gt;N/A&lt;/strong&gt;, pero aun asi, el rendimiento en
general, es suficiente como para substituir honradamente a la libreria estandar&lt;/p&gt;

&lt;p&gt;Es momento de decir adios al raptor, bueno, no, lo seguire utilizando en mis
programas y como prueba de programacion con cada nuevo lenguaje que intente, hay
motores mucho mas eficientes, con mas caracteristicas, trabajo y complejidad,
cuando necesite de su poder los usare, cuando no tirare del raptor y si hace
falta eficiencia, a programar a mano&lt;/p&gt;

&lt;p&gt;Supongo que con el nuevo panorama podria hacerme responsable y terminar la
escritura del &lt;strong&gt;manual para escribir un motor de expresiones regulares sin tener
ni idea&lt;/strong&gt;, alias &lt;em&gt;Raptor-book&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ohh, modifique el resto de la familia de versiones, regexp 3 y 4 en C
y la version 3 en Go, pero sin mucho empeño ni comprobaciones mas alla de las
que estaban en las pruebas, jo, es complicado mantener el nivel cuando hay que
modificar lo mismo 6 veces en dos lenguajes, por el camino, tambien desaparecio
un bicho en patrones con agrupaciones que se presentan al final de una
expresion de una manera que no alcanzo a entender&amp;hellip; si funciona y aprueba, que
mas da!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lxde shortcuts</title>
      <link>https://nasciiboy.github.io/prog/lxde-shortcuts/</link>
      <pubDate>Sun, 22 Oct 2017 12:36:18 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/lxde-shortcuts/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/clouds_battle_by_arsenixc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A Gnome ♥ lo que pida! Mas, si el equipo es incapas de cumplir sus exigencias
para una experiencia completa (contar con un procesador con 2 nucleos,
2 monitores y 3GB de ram), mejor optar por un entorno poco exigente en sus
recursos&lt;/p&gt;

&lt;p&gt;asi pues en una laptop limitada con 10 años en su historia (32bits con 512MB
ram) el balance ideal (segun varias prubas) fue debian 9 con lxde, que, no solo
consigue regresar de la vida al equipo, tiene la potencia suficiente como para
ejecutar un navegador &lt;em&gt;consumista&lt;/em&gt; moderno, varias terminales, editor, fluidez
con los videos e incluso ejecutar varios emuladores, todo con un sistema
actualizado, moderno y libre&lt;/p&gt;

&lt;p&gt;Pero bueno, Gnome, con su elegancia y minimalismo ha influido bastante en la
forma como interactuo con el pc, que es basicamente estar con los dedos pegados
al teclado, con atajos para cualquier cosa precindiendo perfectamente del
raton, exepto, claro esta, cuando se utiliza el navegador o aplicaciones
graficas para aficionados&amp;hellip; como dirian en la guia de parabola o gentoo, ya no
recuerdo cual era&lt;/p&gt;

&lt;p&gt;Sobra (aunque tengo necesidad de) decir que desprecio los docks, widgets y
barras, razon fundamental por la que nunca me he sentido comodo con KDE, o dicho
de otro modo los temas ni cambiar el fondo de pantalla (una vez colocada la
imagen de portada con la que llebo 3 años) son relevantes&lt;/p&gt;

&lt;p&gt;Otro aspecto que ha influido bastante en la interaccion con el entorno grafico
es contar con un teclado de 105 teclas y el mapeo en programmer dvorak
(en).&lt;/p&gt;

&lt;p&gt;En la mayoria de mapeos del teclado los numeros se encuentra en la &amp;ldquo;primer
fila&amp;rdquo; (sobre las letras) y al presionar shift se accede a los &amp;ldquo;simbolos&amp;rdquo;. En
cambio en programmer dvorak, los simbolos tienen el protagonismo y los numeros
se acceden con el shift, uno u otro pero no ambos&amp;hellip; y&amp;hellip; un teclado con con pad
numerico sienta perfectamente a tal distribucion, pues, por un sitio protagonizan
los simbolos y en el lateral tenemos los numeros cuando es necesario
dedicarse a ellos, encima se puede hacer perfectamente con una sola mano.&lt;/p&gt;

&lt;p&gt;Para no subutilizar el pad a una sola mision, en este he establecido la
interaccion con los escritorios: mover a un espacio, mover una ventana a un
espacio, maximizar o minimizar ventanas.&lt;/p&gt;

&lt;p&gt;Toda esta personalizacion me convienten en un &lt;em&gt;memo&lt;/em&gt; fuera de mis equipos, mas
dentro de ellos fluyo libremente, como ningun otro usuario en otros sistemas
podria hacerlo&lt;/p&gt;

&lt;p&gt;Entonces pues, es posible transaladar la experienca gnomera a lxde?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;no&lt;/strong&gt;, pero se aproxima. No, por que no cuenta con la vista &lt;strong&gt;overview&lt;/strong&gt;, que
es marca distintiva del nomo, ni tampoco por rendimiento convendria utilizar
todas las aplicaciones nome en lxde, aunque al menos puedo emular mi
configuracion de atajos maestros en este e imaginar que su lanzador de
aplicaciones es como el lanzador con la tecla Super&lt;/p&gt;

&lt;h2 id=&#34;shortcuts&#34;&gt;Shortcuts&lt;/h2&gt;

&lt;p&gt;por motivos internos de lxde (en debian 9) que desconosco, utiliza openbox,
que sugun su &lt;a href=&#34;http://openbox.org/wiki/Main_Page&#34;&gt;wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Openbox es un administrador de ventanas altamente configurable. Le permite
cambiar casi todos los aspectos de su interacción con su escritorio e inventar
formas completamente nuevas de usarlo y controlarlo. Puede ser como un
videojuego para controlar ventanas. Pero Openbox también se puede mantener
extremadamente simple, ya que está en la configuración predeterminada, lo que
significa que puede adaptarse a casi cualquier persona. Openbox te da el control
sin obligarte a hacer todo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;y (asta donde entiendo) se encarga de administrar donde aparecen, como y el
aspecto de las ventadas&lt;/p&gt;

&lt;p&gt;para personalizar el teclado y algunas funciones mas, debemos modificar el
fichero &lt;code&gt;~/.config/openbox/lxde-rc.xml&lt;/code&gt;, una vez realizados los cambios se
aplican ejecutando como usuario &lt;code&gt;openbox --reconfigure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;el fichero en cuestion, como puede deducirse por su extension, es solo un xml
especializado, donde cada etiqueta tiene un significado predefinido, y debe
aparecer en un orden concreto. En su wiki tenemos una lista de &lt;a href=&#34;http://openbox.org/wiki/Help:Actions&#34;&gt;acciones
disponibles&lt;/a&gt; y tambien nombes de (algunos)
&amp;ldquo;&lt;a href=&#34;http://openbox.org/wiki/Help:Bindings&#34;&gt;eventos&lt;/a&gt;&amp;rdquo; del raton y teclado&lt;/p&gt;

&lt;p&gt;de momento mi fichero de configuracion es &lt;a href=&#34;https://nasciiboy.github.io/data/lxde-rc.xml&#34;&gt;este&lt;/a&gt;, aqui los
aspectos mas revelantes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;desktops&amp;gt;
    &amp;lt;number&amp;gt;10&amp;lt;/number&amp;gt;
    &amp;lt;firstdesk&amp;gt;1&amp;lt;/firstdesk&amp;gt;
    &amp;lt;names&amp;gt;
      &amp;lt;name&amp;gt;A&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;B&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;C&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;D&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;E&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;F&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;G&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;H&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;I&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;J&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;K&amp;lt;/name&amp;gt;
      &amp;lt;name&amp;gt;L&amp;lt;/name&amp;gt;
    &amp;lt;/names&amp;gt;
    &amp;lt;popupTime&amp;gt;875&amp;lt;/popupTime&amp;gt;
    &amp;lt;!-- The number of milliseconds to show the popup for when switching
       desktops.  Set this to 0 to disable the popup. --&amp;gt;
  &amp;lt;/desktops&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto viene a decir, que quiero tener 10 escritorios, a cada uno le he puesto un
nombre que es una letra del abecedario y que el primer escritorio es el
primero&amp;hellip;&lt;/p&gt;

&lt;p&gt;mas adelante el fichero cuenta con una etiqueta &lt;code&gt;&amp;lt;keyboard&amp;gt;&lt;/code&gt; donde se colocan
todos los atajos que vallamos a definir&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;W-Prior&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;DesktopLeft&amp;quot;&amp;gt;
    &amp;lt;dialog&amp;gt;no&amp;lt;/dialog&amp;gt;
    &amp;lt;wrap&amp;gt;no&amp;lt;/wrap&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-Next&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;DesktopRight&amp;quot;&amp;gt;
    &amp;lt;dialog&amp;gt;no&amp;lt;/dialog&amp;gt;
    &amp;lt;wrap&amp;gt;no&amp;lt;/wrap&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-Prior&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;SendToDesktopLeft&amp;quot;&amp;gt;
    &amp;lt;dialog&amp;gt;no&amp;lt;/dialog&amp;gt;
    &amp;lt;wrap&amp;gt;no&amp;lt;/wrap&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-Next&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;SendToDesktopRight&amp;quot;&amp;gt;
    &amp;lt;dialog&amp;gt;no&amp;lt;/dialog&amp;gt;
    &amp;lt;wrap&amp;gt;no&amp;lt;/wrap&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esta seccion es para moverme &amp;ldquo;secuencialmente&amp;rdquo; entre los escritorios con &lt;em&gt;Super&lt;/em&gt;
y &lt;em&gt;Page Up/Down&lt;/em&gt;. En caso de querer enviar una ventana a el escritorio
sugiente/anterior la combinacion se repite pero agregrando la tecla &lt;em&gt;Alt&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;W-KP_7&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;1&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_8&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;2&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_9&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;3&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_4&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;4&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_5&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;5&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_6&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;6&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_1&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;7&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_2&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;8&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_3&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;9&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_0&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Desktop&amp;quot;&amp;gt;&amp;lt;desktop&amp;gt;10&amp;lt;/desktop&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_7&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;1&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_8&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;2&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_9&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;3&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_4&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;4&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_5&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;5&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_6&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;6&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_1&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;7&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_2&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;8&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_3&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;9&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-A-KP_0&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;SendToDesktop&amp;quot;&amp;gt;&amp;lt;to&amp;gt;10&amp;lt;/to&amp;gt;&amp;lt;/action&amp;gt;&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui se ha definido una combinacion especifica para cada uno de los 10
escritorios, conseptualmente el primero esta en la tecla &lt;strong&gt;7&lt;/strong&gt; del pad numerico,
y se deciente de izquierda derecha hasta llegar al 0. La combinacion para ir a
un escritorio es &lt;em&gt;Super&lt;/em&gt; + su numero del pad numerico. Para enviar una ventana a
un escritorio se agrega la tecla &lt;em&gt;Alt&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;W-d&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;ToggleShowDesktop&amp;quot;/&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-q&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;Close&amp;quot;            /&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-f&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;ToggleFullscreen&amp;quot; /&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_Subtract&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Lower&amp;quot;/&amp;gt;
  &amp;lt;action name=&amp;quot;FocusToBottom&amp;quot;/&amp;gt;
  &amp;lt;action name=&amp;quot;Unfocus&amp;quot;/&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-KP_Multiply&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;ToggleMaximizeFull&amp;quot;/&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Super + d, para ocultar/mostrar todas las ventanas&lt;/li&gt;
&lt;li&gt;Super + q, cerrar ventana&lt;/li&gt;
&lt;li&gt;Super + f, ventana a pantalla completa&lt;/li&gt;
&lt;li&gt;Super + &lt;code&gt;*&lt;/code&gt; (pad numerico), maximizar ventana&lt;/li&gt;
&lt;li&gt;Super + &lt;code&gt;-&lt;/code&gt; (pad numerico), minimizar ventana&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;W-space&amp;quot;    &amp;gt;&amp;lt;action name=&amp;quot;NextWindow&amp;quot;/&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-BackSpace&amp;quot;&amp;gt;&amp;lt;action name=&amp;quot;NextWindow&amp;quot;/&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;A-Tab&amp;quot;      &amp;gt;&amp;lt;action name=&amp;quot;NextWindow&amp;quot;/&amp;gt;&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-Return&amp;quot;   &amp;gt;&amp;lt;action name=&amp;quot;PreviousWindow&amp;quot;/&amp;gt;&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;he, he, esto son cuatro combinaciones distintas para cambiar entre ventanas,
Super + espacio (la preferida), Super + Enter, Super + Retroceso y el clasico Alt + tab&amp;hellip;
para que? para que sin importar la posicion del teclado o cual mano tengo
ocupada (heee? ｢(ﾟﾍﾟ)), pueda hacer el cambio entre ventanas, no se, lo veo
indispensable!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;A-F2&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;lxpanelctl run&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;C-Escape&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;lxpanelctl menu&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
    &amp;lt;keybind key=&amp;quot;A-F1&amp;quot;&amp;gt;
      &amp;lt;action name=&amp;quot;ShowMenu&amp;quot;&amp;gt;
        &amp;lt;menu&amp;gt;client-menu&amp;lt;/menu&amp;gt;
      &amp;lt;/action&amp;gt;
    &amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;A-C-Delete&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;lxsession-logout&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicamente abrir el lanzador de comandos de lxde, como un substituto al
&lt;strong&gt;Super&lt;/strong&gt; gnomero, abrir el (desfasado) menu de apliciones, el menu de las
ventanas y que aparesca el menu de sesion con Ctrl + Alt + Suprimir&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&amp;quot;W-h&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;tilix&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;!-- Keybindings for running applications --&amp;gt;
&amp;lt;keybind key=&amp;quot;W-e&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;emacs&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&amp;quot;W-u&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;emacs&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;!-- Keybindings for finding files --&amp;gt;
&amp;lt;keybind key=&amp;quot;W-x&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;pcmanfm&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;!--keybindings for LXPanel --&amp;gt;
&amp;lt;keybind key=&amp;quot;W-z&amp;quot;&amp;gt;
  &amp;lt;action name=&amp;quot;Execute&amp;quot;&amp;gt;
    &amp;lt;command&amp;gt;firefox&amp;lt;/command&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y finalmente atajos para emacs, tilix, el navegador de ficheros y firefox, que
es lo basico del dia a dia, jo, olvide el evince para los documentos (Super +
v) y ahora que lo veo de nuevo, revisar si los dos super se llaman super o uno
es Super derecho, je, je, el teclado de &amp;ldquo;asuntos emergentes&amp;rdquo; no tiene dos super,
comprobacion pendiente.&lt;/p&gt;

&lt;p&gt;El archivo cuenta con configuraciones extra que pueden ejecutarse incluso segun
&amp;ldquo;el contexto&amp;rdquo; (ventana) actual y tambien define las acciones del raton y el
aspecto de ventanas, aunque esos parametros los deje tal cual.&lt;/p&gt;

&lt;p&gt;Y esto es todo, aun queda pendiente personalizar el mapeo de teclado, aunque eso
aun no descubro como se realiza apropiadamente, Sayonara!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Que es Morg? [Redux]</title>
      <link>https://nasciiboy.github.io/prog/morg-redux/</link>
      <pubDate>Sun, 15 Oct 2017 14:52:46 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-redux/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/morgv020.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(el cuadro superior izquierdo, es una version colareada con gimp, el resto son
capturas reales. Lo de &lt;em&gt;redux&lt;/em&gt;, no es por ser un video que ha tirado el yutu y
se ha resivido, mas bien, es una actualizacion de un post anterior, al que no
queria cambiar la fecha, cosa que modificaria el mapa del sitio, ademas, queria
hacer propaganda por el feed)&lt;/p&gt;

&lt;p&gt;que es &lt;a href=&#34;http://github.com/nasciiboy/morg&#34;&gt;&lt;strong&gt;morg&lt;/strong&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;el nombre de otro sistema de documentacion de marcas ligeras, basado en otros
sistemas de documentacion (de marcas ligeras)&lt;/p&gt;

&lt;h2 id=&#34;por-que&#34;&gt;por que?&lt;/h2&gt;

&lt;p&gt;tener libros impresos esta chulo, aunque poco practico e ineficiente es, si se
compara con los formatos de documentacion electronicos, por ello surgieron las
paginas man, los derivados de TeX, XML, la web y sobre ella la wikipedia. Sin
embargo seguimos forjando informacion, pensando en imprimir en papel, con la
consecuencia directa de que todos los formatos de documentacion surgidos despues
del transistor son o demasiado complejos (XML, TeX, Texinfo, LaTeX) o tienen
demasiadas carencias (markdow, ReStructuredText, mediaWiki, org-mode)&lt;/p&gt;

&lt;p&gt;Tomando en cuenta que como especie nuestro presente y futuro depende de la
cantidad de conocimiento que poseemos, compartimos y utilizamos, es preocupante
que aun no exista un formato apropiado para crear, conservar, traducir y
distribuir nuestra literatura, por ello &lt;strong&gt;es momento de forjar un sistema a la
altura&lt;/strong&gt;, apenas mas complicado que ascii, e igual de valido que cualquier
derivado de GML-&amp;gt;SGML-&amp;gt;XML-&amp;gt;HTML o alguna variente de TeX&lt;/p&gt;

&lt;p&gt;morg es una pequeña propuesta (aun en fase muy experimental (== inestable)) de como
podria ser ese supuesto nuevo formato de documentacion universal, apto tanto
para un simple blog personal, como poesia, novelas, o el mas complejo articulo
cientifico&lt;/p&gt;

&lt;p&gt;pero crear este nuevo sistema de documentacion no es el fin de la mision, solo
establece el inicio de la ardua labor de preservar, expandir y difundir a todo
habitante, estudiante y academico, toda la informacion habida y por haber, de
forma libre, permanente y sin restricciones. Debemos crear una gran biblioteca
con un formato en texto plano, explorable incluso con un sencillo editor de
texto, o en sus formas mas elaboradas mediante una interfaz web o de linea
e comandos, pero sin caer en los vicios y defectos del actual html, es decir,
sin publicidad, drm, que este plenamente estandarizado y libre de censura&lt;/p&gt;

&lt;p&gt;(debajo, un arbol conceptual de la estructura de la libreria)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;origen
   .
   ├── recursos
   │   ├── imgenes
   │   ├── videos
   │   ├── programas
   │   ├── codigo
   │   └── musica
   ├── man
   │   ├── 1
   │   ├── 2
   │   ...
   │   └── N
   ├── blog
   │   ├── gnusr
   │   ├── nasciiboy
   │   ... cualquiera
   │   └── emacsChan
   ├── books
   │   ├── scifi
   │   ├── math
   │   ...
   │   └── ajedrez

   ...

   └── wikipedia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;es un error, permitir que la informacion desaparesca, mas aun, dejar su custodia
a entidades mesquinas que solo permiten el acceso a unos cuantos elegidos&lt;/p&gt;

&lt;h2 id=&#34;como-debe-ser-un-sistema-de-documentacion-ideal&#34;&gt;Como debe ser un sistema de documentacion ideal&lt;/h2&gt;

&lt;h3 id=&#34;inmediato&#34;&gt;Inmediato&lt;/h3&gt;

&lt;p&gt;Debe estar disponible en todo momento. Las paginas man, fueron un gran acierto
de nuestros ancestros. El problema? &lt;code class=&#34;command&#34; &gt;cat&lt;/code&gt; o &lt;code
class=&#34;command&#34; &gt;less&lt;/code&gt; con una base de datos de documentos en texto
plano serian igualmente eficientes. No habria colores, pero a cambio
podriamos agregar nuevas paginas y/o secciones de forma mas elegante y rapida.&lt;/p&gt;

&lt;h3 id=&#34;sencillo&#34;&gt;Sencillo&lt;/h3&gt;

&lt;p&gt;Si la wikipedia existe no es por algun genio del marketing vende motos, o por
un loco programador hasta arriba de flow, no, no, no, la razon es &lt;em&gt;roff&lt;/em&gt;,
&lt;em&gt;groff&lt;/em&gt; o alguna de sus variantes.&lt;/p&gt;

&lt;p&gt;Si has intentado crear una pagina man, o incluso has sido tan intrepido como
para documentar tus cosas en man, habras decistido al poco tiempo, no hay nada
mas feo, he initeligible que una pagina de manual en groff. Por ello GNU lanzo
&lt;strong&gt;info&lt;/strong&gt; que sin duda es mas util que man, ademas TexInfo es menos feo que
groff.&lt;/p&gt;

&lt;p&gt;Entoces por que no utilizamos info (o su hermano latex) para escribir la
wikipedia?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hay que leer un manual (en ingles) de muchas paginas para utilizarlo como es
debido&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Esta lleno de marcas y cosas misticas (pensadas para imprimir libros)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Una ves finalizado el documento hay que &amp;ldquo;compilar&amp;rdquo; para exportar a otros
formatos mas manejables, es decir, pasar del fuente &lt;span class=&#34;file&#34; &gt;.texi&lt;/span&gt; a info, html, pdf,
&amp;hellip; y si no compila te comes los mocos!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pude que usted este influienciado por falsos mitos que rodean a los derivados de tex
(info|latex) (ver &lt;a href=&#34;http://www.danielallington.net/2016/09/the-latex-fetish/&#34;&gt;A&lt;/a&gt;
o &lt;a href=&#34;http://karl-voit.at/2017/08/26/latex-fetish/&#34;&gt;B&lt;/a&gt;), aun asi, nada impide hacer
realidad las nobles metas que se proponen estos sistemas de composicion de textos&lt;/p&gt;

&lt;h3 id=&#34;practico&#34;&gt;Practico&lt;/h3&gt;

&lt;p&gt;El formato pdf se utiliza mucho, ha de ser bueno, si no, por que
habria tantos libros escaneados?&lt;/p&gt;

&lt;p&gt;Si no puedes realizar una busqueda de culquier palabra dentro del documento &lt;em&gt;no&lt;/em&gt;
puede ser bueno, si la forma de acceder al fuente para modificar algun error no
esta a tu alcance &lt;em&gt;es&lt;/em&gt; infame y si has de recorrerlo por paginas es &lt;em&gt;perverso&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;modificable-por-humanos&#34;&gt;Modificable (por humanos)&lt;/h3&gt;

&lt;p&gt;Si aspiras a ser un &lt;em&gt;heroe del teclado&lt;/em&gt; y por &amp;ldquo;curiosidad&amp;rdquo; se te ha ocurrido
mirar el codigo html de cualquer pagina web, habras llegado a la conclucion de
que el mejor lugar para guardar un mensaje, que nadie ha de ver jamas, esta dentro
de una etiqueta html, anidada sobre cientos de etiquetas html, en una linea unica
sin ningun salto de linea.&lt;/p&gt;

&lt;p&gt;Un formato que acepta tales aberraciones deberia ser prohibido o almenos
intervenido por un consejo de sabios, para evitar tal desgracia.&lt;/p&gt;

&lt;h3 id=&#34;wysiwymag&#34;&gt;WYSIWYMAG&lt;/h3&gt;

&lt;p&gt;What You See Is What You Mean And Get (Lo que ves es lo que quieres decir y
obtener)&lt;/p&gt;

&lt;p&gt;La estructura del documento ha de ser minimamente agradable a la vista y
proporcionar la herramientas necesarias para utilizarlo en la creacion de
cualquier tipo de documento, desde un post a un libro o publicaciones
cientificas de cualquier indole, teniendo siempre en consideracion que el
proposito y fin ultimo es la documentacion, no convertirse en la base para crear
interfaces visuales.&lt;/p&gt;

&lt;p&gt;Animaciones neon, anuncios publicitarios, botones &amp;ldquo;sociales&amp;rdquo;, typografias con
sombras, colores que afectan la vista (y el buen gusto), no son el objetivo del
formato, de eso ya seguiran encargandose los formatos existentes&lt;/p&gt;

&lt;h2 id=&#34;propuesta&#34;&gt;Propuesta&lt;/h2&gt;

&lt;p&gt;html es tan feo que la wikipedia utiliza mediawiki (uno de los tantos lenguajes
de marcas ligeros que existen). Por su parte, sitios como github directamente
pasan de html, fomentando el uso de markdown, org, ReStructured Text, texto
plano, etc. Algo similar ocurre con plataformas de gestion de contenido y
herramientas para la creacion de blogs como en el caso de WordPress&lt;/p&gt;

&lt;p&gt;Por alguna razon desconocida los sistemas de marcado ligero son comodos, sin
embargo, el mayor error y provable razon de que existan tantos lenguajes de
marcas ligeras es &lt;strong&gt;no valerse por si mismos&lt;/strong&gt;, al mas minimo inconveniente se
recurre a trozos de codigo html o latex, resultando en horrendos engendros
que lejos de hacerlos independientes, los vuelven &lt;q&gt;&lt;em&gt;facilitadores&lt;/em&gt;&lt;/q&gt;
de estos ultimos&lt;/p&gt;

&lt;p&gt;El formato que creemos ha de ser tan agradable a la vista que incluso no
requiera ninguna herramienta especial para su visualizacion y creacion, los mas
intrepidos haran alarde de valerse solo con &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; o mariposas.&lt;/p&gt;

&lt;h3 id=&#34;sintaxis&#34;&gt;sintaxis&lt;/h3&gt;

&lt;h4 id=&#34;estructura-e-indentacion&#34;&gt;Estructura e indentacion&lt;/h4&gt;

&lt;p&gt;Un buen sistema de documentacion priorisa la estructura sobre el aspecto.&lt;/p&gt;

&lt;p&gt;La estructura minima, consiste en separar el documento en secciones o
encabezados gerarquizados&lt;/p&gt;

&lt;p&gt;&lt;em&gt;una marca un nivel&lt;/em&gt;: un encabezado inicia con el signo &lt;code&gt;*&lt;/code&gt; seguido por (un)
espacio(s) y el nombre de la seccion.&lt;/p&gt;

&lt;p&gt;El numero de &lt;code&gt;*&lt;/code&gt; indica el nivel del encabezado, su equivalente  en html seria&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; == &lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; == &lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;***&lt;/code&gt; == &lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;****&lt;/code&gt; == &lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*****&lt;/code&gt; == &lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;* nivel Uno

  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
  eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
  enim ad minim veniam.

** nivel dos

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
   eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
   enim ad minim veniam.

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
   eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
   enim ad minim veniam.

*** nivel tres

    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de cada encabezado inicia tras dejar una linea de espacio en blanco
y ha de indentarse (opcional y a gusto) con un numero de espacios igual al
numero de &lt;code&gt;*&lt;/code&gt;, mas un espacio.&lt;/p&gt;

&lt;p&gt;Para mantener una estetica agradable los titulares extensos
pueden colocarse de la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* encabezado muy muy muy muy muy muy muy
  muy muy muy muy muy muy muy muy muy muy
  muy muy extenso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A diferencia de otros formatos de marcas ligeras, todos los encabezados generan
un identificador interno, al cual se puede hacer referencia dentro del
documento. Tal identificador, se forja apartir del texto, substituyento los
espacios en blanco por guiones (&lt;code&gt;-&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;En caso de que se desee tener un identificador distinto al texto, o si existen
dos o mas encabezados con el mismo nombre, se puede utilizar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** identificador &amp;lt;&amp;gt; contenido del encabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; actua como separador entre el identificador personalizado y el texto
que aparece como nombre del encabezado, por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Seccion Uno

  Sed eiusmod tempor incidunt ut labore et dolore magna aliqua.

** Ejemplos seccion uno &amp;lt;&amp;gt; Ejemplos

   ...

* Seccion Dos

  Lorem ipsum dolor sit amet, consectetur adipiscing elit.

** Ejemplos seccion dos &amp;lt;&amp;gt; Ejemplos

   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;listas&#34;&gt;Listas&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- lista desordenada

  contenido de elemento

+ lista desordenada

1. lista ordenada numericamente

1) lista ordenada numericamente

a. lista ordenada alfabeticamente

a) lista ordenada alfabeticamente

   contenido de elemento a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de una lista debe indentarse segun la seccion de la que forme
parte. Se permite anidar listas dentro de otras listas, asi como otro tipo de
elemnentos del formato&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Seccion uno

  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

     a) Lorem ipsum dolor sit amet.

        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;definiciones&#34;&gt;definiciones&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.

+ elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se sigue la sintaxis de una lista y sin dejar lineas en blanco deben aparecen
dos puntos seguidos (&lt;code&gt;::&lt;/code&gt;) con al menos un espacio en blanco del lado izquierdo,
la definicion puede aparecer a continuacion, en lineas distintas, pero debe
mantener la indentacion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- elemento ::

  Lorem ipsum dolor sit amet, consectetur adipiscing elit.

  Dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;y-si-tengo-una-novela&#34;&gt;y si tengo una novela&lt;/h4&gt;

&lt;h5 id=&#34;dialogos&#34;&gt;Dialogos&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;quot;Dialogo, Lorem ipsum dolor sit amet, consectetur adipiscing
  elit, sed eiusmod tempor incidunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para indicar la pertenencia del dialogo a un personaje, podria optarse por la
siguiente sintaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; personaje A :: &amp;quot;Dialogo, Lorem ipsum dolor sit amet&amp;quot;,

&amp;gt; personaje B :: aliqua. Ut enim ad minim veniam.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;separadores&#34;&gt;&amp;ldquo;separadores&amp;rdquo;&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
  incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.

  &amp;gt; &amp;quot;Dialogo, Lorem&amp;quot;, ipsum dolor sit amet, consectetur adipiscing
    elit, sed eiusmod tempor incidunt ut labore et dolore magna
    aliqua. Ut enim ad minim veniam.

  ....

  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
  incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un separador indica esos cambios &lt;em&gt;abruptos&lt;/em&gt; de escena argumental,
que en papel son representados con una pagina en blanco o varios espacios
vacios, sin cambiar de capitulo&lt;/p&gt;

&lt;p&gt;para indicar el separador se colocan cuatro puntos en una linea, sin ningun
caracter distinto a ecepcion de espacios en blanco, este separador debe tener
almenos una linea en blanco sobre y debajo del mismo&lt;/p&gt;

&lt;h4 id=&#34;about-s&#34;&gt;about&amp;rsquo;s&lt;/h4&gt;

&lt;p&gt;en realidad no se como nombrar estos elementos, asi que por ahora se llaman
&lt;q&gt;acerca de&lt;/q&gt; o about&amp;rsquo;s. Son comunes en muchos libros, por lo tienen sintaxis
propia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:: NOTA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ADVERTENCIA ADVERTENCIA ADVERTENCIA ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.

:: PELIGRO-PELIGRO-PELIGRO-PELIGRO-PELIGRO-PELIGRO

   ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;resaltado&#34;&gt;resaltado&lt;/h4&gt;

&lt;p&gt;nadie quiere tener etiquetas a lo html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;etiqueta&amp;gt;
  &amp;lt;etiqueta&amp;gt;
    contenido
  &amp;lt;/fin_etiqueta&amp;gt;
&amp;lt;/fin_etiqueta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;los lenguajes de marcas ligeras lo manejan de forma un poco mas agradable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(org)       *bold*
(markdown)  **bold**
(mediawiki) &#39;&#39;&#39;bold&#39;&#39;&#39;

algun otro  &amp;lt;^bold^&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no obstante con esta aproximacion pronto se crean ambiguedades, ademas de
limitarse a 3 o 4 formas de etiquetar el contenido antes de recurrir a marcas
exoticas o recaer en etiquetas html.&lt;/p&gt;

&lt;p&gt;A espera de una mejor alternativa, podria recurrirse al estilo de marcas de
texinfo… con un leve retoque al formato.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@x()
@x[]
@x{}
@x&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;@&lt;/code&gt; indica &lt;em&gt;a continuacion contenido especial&lt;/em&gt;, &lt;code&gt;x&lt;/code&gt; es un caracter
ascii imprimible, que describe el comando o accion a aplicar al contenido
delimitado por &lt;code&gt;{…}&lt;/code&gt;, &lt;code&gt;(…)&lt;/code&gt;, &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; o &lt;code&gt;[…]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;por que una &lt;code&gt;@&lt;/code&gt;?&lt;/em&gt; Fuera de algun lenguaje exotico o el correo, podria
ser el signo menos utilizado y mas aun con la estructura &lt;code&gt;@x{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;y la &lt;code&gt;x&lt;/code&gt;?&lt;/em&gt; Un caracter ascii imprimible. Si hemos de necesitar mas
marcas que los caracteres ascii algo estaremos haciendo mal.&lt;/p&gt;

&lt;p&gt;Algunas propuestas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- A :: acronym      - a :: abbr           - 0 ::            - : :: def
- B ::              - b :: bold           - 1 ::            - = ::
- C :: smallCaps    - c :: code           - 2 ::            - ? ::
- D ::              - d ::                - 3 ::            - @ :: escape
- E :: error        - e :: emph           - 4 ::            - ` ::
- F :: func         - f :: file           - 5 ::            - &#39; :: ‘samp’
- G ::              - g ::                - 6 ::            - &amp;quot; :: “quote”
- H ::              - h ::                - 7 ::            - # :: path
- I ::              - i :: italic         - 8 ::
- J ::              - j ::                - 9 ::
- K :: keyword      - k :: kbd            - ^ :: sup
- L ::              - l :: link           - _ :: sub
- M :: Math         - m :: math (label)   - \ ::
- N :: --&amp;gt; note     - n :: note --&amp;gt;       - | ::
- O :: option       - o ::                - * ::
- P ::              - p ::                - + ::
- Q ::              - q :: quote (label)  - - :: —exp—
- R :: result       - r :: ref            - . ::
- S ::              - s :: strike         - / ::
- T :: radiotarget  - t :: target         - % :: (parentesis)
- U ::              - u :: underline      - &amp;amp; :: symbol
- V :: var          - v :: verbatim       - $ :: command
- W ::              - w ::                - ~ ::
- X ::              - x ::                - ! :: warning
- Y ::              - y ::
- Z ::              - z ::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que cada caracter solo tenga un significado permite concatenar acciones como en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@uisb(underlineItalicStrikeBold)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;su equivalente html seria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;i&amp;gt;&amp;lt;strike&amp;gt;&amp;lt;b&amp;gt;underlineItalicStrikeBold&amp;lt;/b&amp;gt;&amp;lt;/strike&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;y los &lt;code&gt;({[&amp;lt;&amp;gt;]})&lt;/code&gt;?&lt;/em&gt; Mas opciones, mas diversion.&lt;/p&gt;

&lt;p&gt;Segun sea el contexto &lt;code&gt;{}&lt;/code&gt; o &lt;code&gt;()&lt;/code&gt; podrian requerir el &lt;em&gt;escape&lt;/em&gt; de algun
caracter. Para minimizar la inclucion de signos extraños, los delimitadores se
aplican deacuerdo a la necesidad y gusto del &lt;q&gt;creador&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;cuando no haya &lt;em&gt;escapatoria&lt;/em&gt;, para anular el significado de un caracter se
antecede con &lt;code&gt;@&lt;/code&gt;, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@b(1@). punto uno)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;al expandir &lt;code&gt;@)&lt;/code&gt; se substituye por &lt;code&gt;)&lt;/code&gt;, asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;1). Punto uno&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por lo general el unico aspecto donde seria incomodo utilizar el signo &lt;code&gt;@&lt;/code&gt; seria
dentro de las direcciones de correo, donbre habria que colocar &lt;code&gt;@@&lt;/code&gt;, a mi
parecer un precio razonable&lt;/p&gt;

&lt;h5 id=&#34;comentarios&#34;&gt;comentarios&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;@ linea comentada
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una linea cuyo primer caracter visible sea &lt;code&gt;@&lt;/code&gt; separada por almenos un espacio
en blanco del texto, comenta la linea en cuestion&lt;/p&gt;

&lt;h4 id=&#34;mas-alla-del-ascii&#34;&gt;mas alla del ASCII&lt;/h4&gt;

&lt;p&gt;preferiblemente se utilizara un sistema de codificacion &lt;q&gt;moderno&lt;/q&gt; como
UTF-8.&lt;/p&gt;

&lt;p&gt;Opcionalmente (y para no vernos en la necesidad de buscar un caracter
complicado) se puede crear el &lt;q&gt;comando&lt;/q&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;, por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@&amp;amp;{nombreGenericoDeCaracterComplicado}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a modo de ilustrar esto si utilizamos &lt;code&gt;@&amp;amp;{leftarrow}&lt;/code&gt;, en el texto a exportar
sera reemplazado por &lt;code&gt;⇐&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;math&#34;&gt;math&lt;/h4&gt;

&lt;p&gt;para las formulas matematicas &lt;q&gt;en linea&lt;/q&gt; ya que desconosco bastante en este
tema, podriamos no reinventar la rueda y tomar las formulas Tex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@M{\formula\Matematica\Tex}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(he investigado un poco sobre el tema, quiza sea mejor opcion tomar
la sintaxis que utiliza Libre Office Math o un recien llegado como AsciiMath)&lt;/p&gt;

&lt;p&gt;adicionalmente, existira el comando &lt;code&gt;m&lt;/code&gt; (&lt;code&gt;@m[cosas]&lt;/code&gt;) para indicar que una seccion
es/o supone ser una formula, de forma similar a como se utiliza un enfasis, pero
con la diferencia, de no tener que invocar al &amp;ldquo;renderizador&amp;rdquo; de formulas
matematicas, por ejemplo en lugar de utilizar &lt;code&gt;@M{H^2O_9}&lt;/code&gt;, mediante caracteres
unicode podria substituirse con &lt;code&gt;@m{H²O₉}&lt;/code&gt;, con el beneficio adicional de tener un
&lt;em&gt;texto fuente&lt;/em&gt; com mayor legibilidad&lt;/p&gt;

&lt;h4 id=&#34;enlaces&#34;&gt;enlaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@l{ruta}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivale a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;ruta&amp;quot;&amp;gt;ruta&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l{ruta&amp;lt;&amp;gt;descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;es equivalente a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;ruta&amp;quot;&amp;gt;descripcion&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que conocemos los comandos &lt;code&gt;@&lt;/code&gt; y la forma de crear enlaces, podemos
profundizar en un tema antes mencionado: &lt;b&gt;los encabezados&lt;/b&gt;, su forma de
referenciarlos y ejemplos de lo que se produciria en una exportacion a html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* encabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;encabezado&amp;quot; &amp;gt;encabezado&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* @b(encabezado) con @e(enfasis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;encabezado-con-enfasis&amp;quot; &amp;gt;&amp;lt;b&amp;gt;encabezado&amp;lt;/b&amp;gt; con &amp;lt;em&amp;gt;enfasis&amp;lt;/em&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(mas lejos y retorcido aun) un enlace dentro de un encabezado con enfasis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* @l(http://fsf.org/&amp;lt;&amp;gt;@b(link-encabezado)) con @e(enfasis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;link-encabezado-con-enfasis&amp;quot; &amp;gt;&amp;lt;a href=&amp;quot;http://fsf.org/&amp;quot; &amp;gt;&amp;lt;b&amp;gt;link-encabezado&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt; con &amp;lt;em&amp;gt;enfasis&amp;lt;/em&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para hacer una referencia interna a un encabezado, hariamos asi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que se traduce en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;encabezado&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado&amp;lt;&amp;gt;lo que sea)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que se traduce en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;lo que sea&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;el-mecanismo-de-los-comandos&#34;&gt;el mecanismo de los comandos &lt;code&gt;@&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;todas los &lt;q&gt;comandos&lt;/q&gt; &lt;code&gt;@&lt;/code&gt; tienen la estructura &lt;code&gt;@x(izquierda&amp;lt;&amp;gt;derecha)&lt;/code&gt;. Donde
&lt;code&gt;izquierda&lt;/code&gt; viene a ser contenido personalizado y opcional. Por su parte &lt;code&gt;derecha&lt;/code&gt; es
el contenido &lt;i&gt;por defecto&lt;/i&gt; del comando. Finalmente &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; actua a modo de separador entre ambos&lt;/p&gt;

&lt;p&gt;Cuando un comando, por ejemplo, un enlace requiere una &lt;code&gt;izquierda&lt;/code&gt; y este no se ha
especificado, se genera apartir de &lt;code&gt;derecha&lt;/code&gt;, extrayendo las marcas especiales
dejando unicamente el texto.&lt;/p&gt;

&lt;p&gt;Cuando el comando no requiere &lt;code&gt;izquierda&lt;/code&gt; y esta se proporciona, el comando
o lo ignora o se utiliza como identificador o etiqueta segun sea el caso (nota:
esto aun se encuentra en consideracion y podria requerir sintaxis adicional)&lt;/p&gt;

&lt;p&gt;Cuando el comando esta dentro de otro comando, el comando interno &lt;em&gt;pasa&lt;/em&gt; su
contenido en la &lt;code&gt;derecha&lt;/code&gt; al comando externo, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado&amp;lt;&amp;gt;lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;lo-que-sea-con-enfasis-con-bold&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y finalmente&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(@b(bold)&amp;lt;&amp;gt;lo que sea)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;bold&amp;quot; &amp;gt;lo que sea&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;notas&#34;&gt;notas&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@n{enlace-a-nota}
@n{enlace-a-nota&amp;lt;&amp;gt;descripcion}
@n{nota en linea&amp;lt;&amp;gt;descripcion}
@N{objetivo-descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nota: a esto aun le falta mas trabajo)&lt;/p&gt;

&lt;h4 id=&#34;comandos-de-bloque&#34;&gt;comandos de bloque&lt;/h4&gt;

&lt;p&gt;Los comandos &lt;code&gt;@&lt;/code&gt; son para el contenido &lt;q&gt;en linea&lt;/q&gt;, es decir, estan
diseñados para ser incluidos dentro de parrafos de texto (de hecho para prevenir
errores, si estos no se cierran, se hace de forma automatica al llegar al final
de cada parrafo, o cuando aparece un nuevo elemeto del lenguaje de marcas&lt;/p&gt;

&lt;p&gt;Por su parte los &lt;em&gt;comandos de bloque&lt;/em&gt; se utilizan para afectar secciones
enteras, indicar acciones complejas o para contenido especializado, como pueden
ser complejas equaciones matematicas o porciones de codigo fuente, sin
preocuparse por el significado de la sintaxis regular&lt;/p&gt;

&lt;p&gt;La estructura basica de un comando de bloque es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.. comando &amp;gt; contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o en su forma &amp;ldquo;simetrica&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt;
  contenido
&amp;lt; comando..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el contenido tiene que estar indentado con dos espacios por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt;
  contenido

  mas contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt;
  contenido

  mas contenido

  ..otro-comando &amp;gt;
    contenido

    mas contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien? Pues hay varios tipos de comandos y varias formas de optener su
contenido.&lt;/p&gt;

&lt;p&gt;Por un lado tenemos comandos donde el cuerpo se define en una sola linea o mas
indentadas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt; contenido contenido contenido
  contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido abarca hasta la aparicion de la primer linea en blanco o sin la
indentacion apropiada.&lt;/p&gt;

&lt;p&gt;en este tipo de comandos se encuentran los de configuracion del documento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..title    &amp;gt; titulo del documento
  puede abarcar varias lineas, siempre con indentacion y sin lineas
  en blanco
..author   &amp;gt; nasciiboy
..mail     &amp;gt; nasciiboy@gmail.com
..style    &amp;gt; worg/worg.css
..options  &amp;gt; highlight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adicionalmente, los comandos de configuracion se colocan al inicio del documento
y terminan en cuanto aparece el primer elemento que no sea un comando de
configuracion. Los comandos de configuracion no deben tener espacios en blanco
al inicio de la linea, ni etiqueta de cierre, es decir &lt;code&gt;&amp;lt; title..&lt;/code&gt; no significa
nada para el comando &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tambien tenemos comandos que solo tiene cuerpo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..emph &amp;gt;
  toda esta seccion tiene enfasis
&amp;lt; emph..

..emph &amp;gt;
  tambien esta

..bold &amp;gt;
  esta es bold

..center &amp;gt;
  y esta va centrado
&amp;lt; center..

..quote &amp;gt;
  Cuando hago esto, la gente piensa que es porque quiero alimentar mi
  ego, ¿verdad? Por supuesto, ¡no pido que se le llame “Stallmanix!”

  --Richard Matthew Stallman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;estan diseñados para resaltar o aplicar alguna configuracion a una parrafo o
bloque extenso del documento&lt;/p&gt;

&lt;p&gt;Luego tenemos comandos con &lt;em&gt;argumentos&lt;/em&gt; y &lt;em&gt;cuerpo&lt;/em&gt;, como pueden ser los bloques
de codigo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..src &amp;gt; c
  #include &amp;lt;stdio.h&amp;gt; # esto es codigo en C
&amp;lt; src..

..src &amp;gt; go

  package biskana

  import &amp;quot;github.com/nasciiboy/regexp3&amp;quot;

  // esto es codigo en go


..src &amp;gt; sh
  echo &amp;quot;hola que hace&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui el contenido despues del (y en la misma linea que) &lt;code&gt;&amp;gt;&lt;/code&gt; especifica el
lenguaje, por su parte, el cuerpo del bloque es toda linea que cumpla con la
indentacion&lt;/p&gt;

&lt;p&gt;por ultimo, estan los bloques con &lt;em&gt;argumentos&lt;/em&gt; de multiples lineas y &lt;em&gt;cuerpo&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..figure &amp;gt; esto es el titulo
  de una mini seccion

  este es el contenido de la mini seccion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;em&gt;contenido&lt;/em&gt; empieza luego de la primer linea en blanco.&lt;/p&gt;

&lt;p&gt;Como vez, todo depende del comando que se utilize&amp;hellip; este es el aspecto mas
complejo del lenguaje de marcas ligeras que propongo y el como, que y cual
funcion desempeña cada comando, es arbitrario y sujeto a una especificacion
unilateral.&lt;/p&gt;

&lt;p&gt;dentro de estos, cada seccion puede tener un significado particular, interpretar
o ignorar elementos como los comandos &lt;code&gt;@&lt;/code&gt; y otras especificaciones, como
alteracion del comportamiento de un comando, secciones adicionales del bloque,
etc.&lt;/p&gt;

&lt;p&gt;a continuacion veremos como seria la indicacion para modificar el comportamiento
de un comando de bloque, &lt;q&gt;&lt;b&gt;los parametros&lt;/b&gt;&lt;/q&gt;&lt;/p&gt;

&lt;h5 id=&#34;parametros&#34;&gt;parametros&lt;/h5&gt;

&lt;p&gt;Aunque los parametros pueden ser variados, deben ser pocos, uno, dos, maxime tres
por comando de bloque. Remarcar que el formato no es para crear espectaculos
visuales.&lt;/p&gt;

&lt;p&gt;en la mayoria de herramientas de linea de comandos un parametro tiene la
sintaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--algo=&amp;quot;cosa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-algo cosa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bien?, para morg esto tiene la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo( cosa )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo( cosa-a, cosa-b, ... )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una forma de entenderlo, es como una funcion que tiene valores establecidos por
defecto, y segun el numero de parametros que se envien el resto se colocan de
forma automatica, y en caso de que un parametro (o su numero) sea erroneo,
las secciones erroneas se subtituyen con su valor por defecto.&lt;/p&gt;

&lt;p&gt;La diferencia radica en que no se trata de una funcion, sino del nombre de un
parametro y sus valores!&lt;/p&gt;

&lt;p&gt;ahora, estos parametros aparecen dentro de los bloques, entre la declaracion del
bloque y el simbolo &lt;code&gt;&amp;gt;&lt;/code&gt;, quedando asi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..bloque algo algo1() algoMas2( &amp;quot;cadena&amp;quot;, 123, .21, `raw`, identificador )  &amp;gt;
  cosas
&amp;lt; bloque..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;encontramos un ejemplo de uso dentro de los bloques de codigo fuente para
indicar un tema especifico (en la exportacion), o numerar el contenido&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code n(10) style( &amp;quot;monokai&amp;quot; ) &amp;gt; c
  #include &amp;lt;stdio.h&amp;gt; # esto es codigo en C

  int main(){

    printf(&amp;quot;hola, que tal\n&amp;quot;);
    return 0;
  }
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;como es una cosa muy chula, tambien puede utilizarse para especificar opciones
en la configuracion del documento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..options &amp;gt; fancyCode() toc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui se indicaria que deseamos resaltado de codigo sin especificar uno es
particular, solo su resaltado o etiquetado en una exportacion, el segundo
parametro &lt;code&gt;toc&lt;/code&gt;, sirve para indicar que queremos que la exportacion incluya una
tabla de contenidos&lt;/p&gt;

&lt;h5 id=&#34;ladrillos&#34;&gt;ladrillos&lt;/h5&gt;

&lt;p&gt;esta es otra caracteristica mas (y espero sea la ultima) que complica un poco
mas nuestros bloques de codigo, sin embargo creo que su utilidad en ciertos
bloques, como el codigo fuente (quiza el mas exigente), justifica su existencia&lt;/p&gt;

&lt;p&gt;Imagina que tienes un bloque de codigo fuente, y en algun momento lo deseas
&amp;ldquo;ejecutar&amp;rdquo; y colocar la salida de su ejecucion dentro del documento, pues hay es
donde aparecen los ladrillos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code &amp;gt; sh
  echo &amp;quot;hola, mundo&amp;quot;
&amp;lt;&amp;gt;
  hola, mundo
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;exacto, (de nuevo) el &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; hace de separador, en este caso entre el contenido
principal y los ladrillos&amp;hellip; y en este podriamos indicar algurna cosa como por
ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code &amp;gt; sh
  random
&amp;lt;&amp;gt; ejecucion 1
  1236
&amp;lt;&amp;gt; ejecucion 2
  47
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y asi sucesivamente.&lt;/p&gt;

&lt;p&gt;otro comando interesante seria &lt;code&gt;cols&lt;/code&gt; para expresar que deseamos crear columnas,
con su contenido&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..cols &amp;gt;

  este es el texto de la columna 1

&amp;lt;&amp;gt;

  este es el texto de la columna 2

&amp;lt;&amp;gt;

  contenido de la columna 3

...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;srci&#34;&gt;srci&lt;/h4&gt;

&lt;p&gt;este es un comando de bloque complementario con el de codigo fuente donde se
simula un prompt de algun lenguaje y su salida, sin hechar mano de los ladrillos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..srci &amp;gt; lenguaje
  &amp;gt; (esto simularia ser (codigo)
  ^   (en lisp (o algo)
  ^            (por el estilo)))
  esta seria la supuesta salida
  que produce el codigo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La entrada o prompt de lenguaje inicia con &lt;code&gt;&amp;gt;&lt;/code&gt; y cada linea inmediatamente
despues que inicie con &lt;code&gt;^&lt;/code&gt;, tambien se asume como parte de esta&lt;/p&gt;

&lt;p&gt;lo interesante de este bloque, es que con una sintaxis comun se puede
simular la supuesta estrada de casi cualquier lenguaje!&lt;/p&gt;

&lt;p&gt;Para casos donde el lenguaje tenga mas de un promt, habria que utilizar un
parametro adicional y supongo que diversos bloques, por ejemplo para simular una
secion como usuario de a pie en bash y luego un logueo como root, seria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..srci prompt( &amp;quot;$ &amp;quot; ) &amp;gt; sh
  &amp;gt; rm -rf /boot
  permiso denegado
  &amp;gt; su
  password

aqui con algun texto se alerta de los peligros de ser root y ejecutar
comandos con poder ilimitado

..srci prompt( &amp;quot;# &amp;quot; ) &amp;gt; sh
  &amp;gt; whoami
  root
  &amp;gt; rm -rf /boot
  error: lo siento su princesa se encuentra en otro castillo
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tablas&#34;&gt;tablas&lt;/h4&gt;

&lt;p&gt;Sin duda un tema complejo, podria tenerse una tabla totalmente funcional con
formulas y demas, pero para inciar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| encabezado    | otro e  |
|===============|=========|
| elemento uno  | algo x  |
|---------------|---------|
| elemento dos  | algo a  |
|               |---------|
|               | algo b  |
|---------------|---------|
| d o s  c e l d a s      |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el encabezado se coloca a la cima, delimitado con &lt;code&gt;|===|==|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;cada elemento se separa con &lt;code&gt;|----|---|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;unir celdas es complicado podria tomarse en consideracion el numero exacto de
caracteres para obtener esta informacion, o colocar un signo &lt;q&gt;invisible&lt;/q&gt; de
alineacion dentro la la tabla como &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;porg&#34;&gt;porg&lt;/h4&gt;

&lt;p&gt;los ficheros &lt;code&gt;po&lt;/code&gt; producidos con &lt;code&gt;gettext&lt;/code&gt; se utilizan para traducir documentos
de un lenguaje a otro, siempre que gettext no muera en el intento&amp;hellip; con morg podemos
hacer algo mucho mas sencillo para traducir documentos&lt;/p&gt;

&lt;p&gt;imaginemos que tenemos este texto&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* nivel uno

  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

     a) Lorem ipsum dolor sit amet.

        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a si se ve como documento &lt;code&gt;porg&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#* nivel uno
* nivel uno

#   1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
#      eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
#      enim ad minim veniam.
  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

#      a) Lorem ipsum dolor sit amet.
     a) Lorem ipsum dolor sit amet.

#         - Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

#   2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
#      eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
#      enim ad minim veniam.
  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se toma el contenido fuente, se duplica cada seccion, se coloca justo debajo
del original y se marca con algun signo especial el contenido original.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;por que esto es sencillo?&lt;/em&gt; estas trabajando con el contenido original, lo
cual permite contrastar la traduccion directamente y no requiere compilaciones
ni trucos complejos.&lt;/p&gt;

&lt;p&gt;Para generar la traduccion, solo es necesario borrar las lineas con la marca
especial, por que la estructura del documento siempre esta precente, es decir,
siempre tenemos el producto final, solo eliminamos lo inecesario!&lt;/p&gt;

&lt;p&gt;Si agregamos un programa que haga todo automagicamente, con una pre-traduccion,
el tabajo sera pan comido!&lt;/p&gt;

&lt;p&gt;incluso y fantaceando, podria haber ficheros para reemplazar rss (rorg) y que el
navegador interprete directamente morg. Las fantacias no cuestan nada.&lt;/p&gt;

&lt;h3 id=&#34;un-poco-de-accion&#34;&gt;un poco de accion&lt;/h3&gt;

&lt;p&gt;De momento, a modo de &lt;q&gt;prueba de concepto&lt;/q&gt; existe &lt;strong&gt;morg&lt;/strong&gt;, un programa
(mal) desarrollado en golang, con el cual se puede exportar (con limitaciones)
algunos conceptos basicos del lenguaje al formato &lt;strong&gt;html&lt;/strong&gt; asi como poder
visualizar el documento dentro de un terminal. Para mas informacion
vea &lt;a href=&#34;howto.md&#34;&gt;Como iniciar con morg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De forma simplificada, para optener el programa&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si ya tenemos instalado morg, para actualizar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para exportar un documento a html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;morg toHtml mi-fichero.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para visualizar un documento&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;morg tui mi-fichero.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;el-codigo&#34;&gt;el codigo&lt;/h4&gt;

&lt;p&gt;(mis habilidades como programador son pocas y limitadas, sin embargo, creo en el
codigo como forma de expresion y transmision de conocimiento, si las siguientes
metas resultan irreales lo puedo comprender, aunque no aceptar&amp;hellip;)&lt;/p&gt;

&lt;p&gt;sin importar el lenguaje, el codigo debe ser elegante o almenos claro y
sencillo, evintando dependencias inecesarias que dificulten su adaptacion a
otros lenguajes o peor aun, el aprendisaje de otros programadores. En resumen se
buscara siempre ser una implementacion de referencia con toques didacticos en la
que cualquier indicio de aparicion de cruft sera señal de refleccion y futura
refactorizacion e incluso reescritura&lt;/p&gt;

&lt;p&gt;conceptualmente se plano dividir el programa en varias secciones, &lt;code&gt;katana&lt;/code&gt; el
encargado de parcear el documento, para entregar una estructura de datos
sencilla&lt;/p&gt;

&lt;p&gt;&lt;code&gt;biskana&lt;/code&gt; &lt;em&gt;el traductor&lt;/em&gt; a otros lenguajes o dicho de otra manera el
&lt;em&gt;renderizador&lt;/em&gt; (que hace realidad nuestras fantacias) de texto a texto&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nirvana&lt;/code&gt; (cofff, en un principio iba a ser &lt;code&gt;hana&lt;/code&gt; (flor) pero lo olvide!)
encargado de desplegar el documento de forma visual como TUI o como GUI&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*ana&lt;/code&gt; (aun no implementado) la base de datos donde se consulta si tenemos el
documento de forma local o debe realizarce una peticion externa. Ademas debe
regresar el documento en el formato original&lt;/p&gt;

&lt;p&gt;El primer componente que programe fue &lt;code&gt;biskana&lt;/code&gt;, de hay, el
deseo de terminar los nombres en &lt;code&gt;ana&lt;/code&gt;. Alguna propuesta interesante?&lt;/p&gt;

&lt;p&gt;Como cohesionador de todo, el propio &lt;code&gt;morg&lt;/code&gt; (aun no me convence el nombre), se
aceptan sujerencias!&lt;/p&gt;

&lt;p&gt;Por cierto &lt;code&gt;katana&lt;/code&gt; hace uso de un motor de expresiones regulares elaborado
desde cero llamado &lt;code&gt;regexp4&lt;/code&gt; que por mera casualidad tambien programe. Lo
utilizo por estas razones&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;funciona!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no ha aparecido alguna exprecion que revase su limitada capacidad&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;es sencillo y facil de modificar (por mi, almenos), ademas cuando surge un
error se donde buscar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;puede portarse con relativa facilidad a cualquier lenguaje (creo), el
desarrollo original fue hecho en C. Cuando digo en C me refiero a solo C, sin
recurrir a ninguna libreria, ni siquiera la libreria estandar. Su port a go
no fue demasiado traumatico, encima se vio veneficiado por la orientacion a
objetos&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;porque-go&#34;&gt;porque Go&lt;/h4&gt;

&lt;p&gt;por nada en especial&amp;hellip; cuando empece a escribir el codigo en C (en abril del 2016)
mis habilidades no daban para mucho, no es que ahora sea un jodido guru,
pero algo he aprendido, he? pero por que C? por velocidad y eficiencia, si vas a
hacer un proyecto tan ambicioso, mal seria que fuese lagueado y demorara en
exeso (mas de 5 segundos) para mostrar el contenido.&lt;/p&gt;

&lt;p&gt;Aun si el proyecto se escribiese en un lenguaje interpretado en algun momento
deberia portarse a un lenguaje veloz (no mas de 6 veces inferior al rendimiento
de C)&lt;/p&gt;

&lt;p&gt;podria haber elegido C++&amp;hellip; pero me cruce con Go, que con el paso del tiempo ha
llegado a probacar fascinacion en mi, es solo 3 veces mas lento que C y tiene ideas muy
interesantes. Como unicas desventajas creo que su tipado fuerte es un fastidio, al igual que
el estilo de codificacion, llaves forsosas para instrucciones simples y el no
contar con punteros de verdad (al menos con un nivel de indireccion) obliga a
hacer algunos apaños.&lt;/p&gt;

&lt;p&gt;Ademas de su eficiencia, a su fabor Go (con su rica libreria estandar) esta
pensado para ser verdaderamente multiplataforma, es sencillo en su orientacion a
objetos, claro y automatico con la gestion de dependencias y de lectura agradable&lt;/p&gt;

&lt;h4 id=&#34;primer-ejemplo&#34;&gt;primer ejemplo&lt;/h4&gt;

&lt;p&gt;seria grosero no monstrar ni un poco, asi que
&lt;a href=&#34;https://github.com/nasciiboy/tgpl&#34;&gt;aqui&lt;/a&gt; encontran un ejemplo del formato
actual, con exportacion a html + una muestra de porg&lt;/p&gt;

&lt;p&gt;Para ver el resultado en todo su esplendor, clona o baja una copia del repo y
visualiza en el navegador el html.&lt;/p&gt;

&lt;h3 id=&#34;zen&#34;&gt;zen&lt;/h3&gt;

&lt;p&gt;Extenso, esto es ya, un programador al inicio de su travesia soy y antes de
empezar a programar, modificar o agregar funciones deberia establece una
especificacion para el formato.&lt;/p&gt;

&lt;p&gt;Mas tarde, como calentamiento hacer un exportador robusto y luego los demas
componentes. De camino integrarlo en algunos cms, darle soporte en nuestros
editores favoritos, al tiempo de otorgarle facilidas de autocompletado y
resaltado, establecer una estructura capaz de mantenerse por cuenta propia y/o
por la coperacion desinteresado de empresas y gobiernos, y solamente despues de
ello absorver todo el contenido que sea posible y dominar la galaxia&lt;/p&gt;

&lt;h2 id=&#34;como-puedo-ayudar&#34;&gt;como puedo ayudar&lt;/h2&gt;

&lt;p&gt;Pagameeeee un salario, (enserio, &lt;a href=&#34;mailto:nasciiboy@gmail.com&#34;&gt;mi correo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Contrata a un grupo de programadores motivados, que compartan este sueño (y
pagame un salario!)&lt;/p&gt;

&lt;p&gt;traduce, difunde, discute y comenta&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;definir el formato&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;crear exportador robusto. De inicio a html, luego a otros formatos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;programar el resto de componentes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;estructura operativa, para poner en marcha el/los repositorios que albergaran
blogs, libros, wikipedia y lo que se deje, para formar un repositorio global
de conocimiento libre, permanente e imparable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;difusion, expansion y dominacion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quiero terminar, aclarando lo siguiente: difundo estas ideas y codigo bajo la
licencia GNU AGPL v3, si tienes las habilidades para hacer lo planteado
programando todo por cuenta propia, te pido que lo hagas (aunque no estas
obligado) bajo esta misma licencia.&lt;/p&gt;

&lt;p&gt;Mientras tanto programare lo que pueda, cuando pueda, simplemente por
ser un reto emocionante&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The X86 Strikes Back</title>
      <link>https://nasciiboy.github.io/prog/the-x86-strikes-back/</link>
      <pubDate>Sat, 14 Oct 2017 12:38:00 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/the-x86-strikes-back/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/kool.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;bueno, la imagen es mas de 8bits que por ahora son los equipos
retro-nostalgicos de moda, ya le llegara su momento a x86.&lt;/p&gt;

&lt;p&gt;Esta historia trata de como pase (sin querer) de considerar obsoleto el hardware
x86, pidiendo que todos esos equipos entregasen su silicio al mundo, a creer que
aun son equipos potables para su uso diario o en el peor de las casos para
utilizarlos como instrumentos de iniciacion en el heretico culto de Emacs, las
ttys y la &amp;ldquo;verdadera&amp;rdquo; programacion&lt;/p&gt;

&lt;p&gt;pero bueno, no es que fuera un modernillo con urgensias obsesivas por la
renovacion de equipos, en este cuerpo hay hamor (he, he, e) para todo el
hardware, considero artisticos los pcbs, sus colores, pistas, componentes y en
ocaciones olores y carcasas, la fusion perfecta entre el mundo de las ideas igenieriles y
la materia. Aun asi, el hardware es perecedero, aparece la corrosion, pilas con
&amp;ldquo;esporas&amp;rdquo;, capacitores inchados y tarde o temprano sus componentes terminan por
perecer, por lo que como cualquier obra fisica (manga, pintura, cine, musica, etc),
una ves cumplida su mision, creo que lo mejor es conservar toda su informacion
posible como bits y especificaciones&lt;/p&gt;

&lt;h2 id=&#34;acer-aspire-3600&#34;&gt;acer aspire 3600&lt;/h2&gt;

&lt;p&gt;Hace dos semanas mi tio &amp;ldquo;el licensiado&amp;rdquo;, me trajo un presente, una laptop con el
marco (y soporte de la pantalla) roto cerca de las bisagras, ademas el display
emanava olores perfumados, tenia una sustancia mielosa desagradable y algo de
corrosion en los fierros, je, je, no hay nada mas bonito que ver la sonrisa de
un adulto con vermuda, melenudo y barbon mientras destripa un equipo&lt;/p&gt;

&lt;p&gt;luego de desmontar todo, limpiar un poco y dejar la base como lo unico
rescatable, monte un transformador con 4 tristes diodos y dos capacitoderes que
entregaban 20V y lo conecte al equipo, para sopresa mia y ajena funciono, no sin
lanzar unos beeps incesantes durante el arranque y ejecucion de su OS ventanas XD&lt;/p&gt;

&lt;p&gt;daba por mala la placa, aunque aun tenia ilusion de verla andar, comenzo asi una
encrusijada mental entre gastar unos donativos en un adaptador de corriente
apropiado para el equipo (que consideraba con su motherboard supuestamente
dañada) o subsistir con un poco de dignidad durante un mes. Tras refrenar las
ansias de comprar un adaptador, revolvi mis pertenencias tegnologicas y voala,
aparecio la fuente de laptop como por obra de magia, fantastico!&lt;/p&gt;

&lt;p&gt;Al probar el adaptador comprobe que la causa de los beeps de la placa, eran la
fuente improvisada que habia utilizado&lt;/p&gt;

&lt;h3 id=&#34;hardware-porno&#34;&gt;hardware porno&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Intel Celeron M 380 0KB L1 cache 1MB L2 cache, 1.60 GHz, 400MHz FSB (bus)&lt;/li&gt;
&lt;li&gt;2x256MB DIMM DDR2 (expandible a 2GB)&lt;/li&gt;
&lt;li&gt;Grafica Intel GMA 900 (con 128MB de memoria compartida)&lt;/li&gt;
&lt;li&gt;Puerto VGA&lt;/li&gt;
&lt;li&gt;4 puertos USB 2.0&lt;/li&gt;
&lt;li&gt;Unidad DVD, con &amp;ldquo;quemador&amp;rdquo;&lt;/li&gt;
&lt;li&gt;HDD 40GB ATA/100&lt;/li&gt;
&lt;li&gt;Ethernet &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; (RJ-45) y entrada de modem (RJ-11)&lt;/li&gt;
&lt;li&gt;wifi 802.11b/g Atheros AR2413&lt;/li&gt;
&lt;li&gt;Bateria de 2000ma muerta&lt;/li&gt;
&lt;li&gt;Monitor 15&amp;rsquo; con las bisagras corroidas, soportes rotos y el LCD recubierdo
con una subtansia gel-osa con olor a perfume y textura desagradable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lo parte superior del equipo no tuvo salvacion, aparecian nubes en el display y
luego de unos segundos salio humo del balastro de la lampara fluoresente&lt;/p&gt;

&lt;p&gt;Al principio por alguna incoherencia mental, creia que el procesador era de
400MHz (por no contar con pasta termica, no llege a verlo desnudo), pero no, eso
es su bus de datos, asi pues ya que el equipo tiene una potencia considerable,
&amp;ldquo;cegarlo&amp;rdquo; a un uso exclusivo con ttys, me parecio un desperdicio. Por otra
parte, ni el procesador, ni la memoria disponibles son suficientes para ejecutar
un entrorno grafico como Gnome y menos aun KDE, asi que como criterio de
instalacion las opciones fueron tirar de xfce para abajo, y en el peor de los
casos, directamente con un manejador de ventanas&lt;/p&gt;

&lt;p&gt;tambien paso la idea de probar con puppy linux, pero las ultimas versiones que
encontre son del año pasado, asi que esa opcion la descarte, luego vi un
proyecto de un sistema operativo hecho en ensamblador de nombre &lt;em&gt;minuet os&lt;/em&gt;,
je, y este tambien detuvo su desarrollo hace mas de un año.&lt;/p&gt;

&lt;p&gt;Asi que la siguente opcion fue probar con una vieja conocida&lt;/p&gt;

&lt;h2 id=&#34;1er-distro-debian-9-1-xfce&#34;&gt;1er Distro – Debian 9.1 (xfce)&lt;/h2&gt;

&lt;p&gt;l-a-a-a-a-a-a-a-g-g-g-r-r-h-h-h-h-h-h, desconosco la razon, el escritorio
simplemente se arrastraba&lt;/p&gt;

&lt;h2 id=&#34;2da-distro-raspbian-lxde&#34;&gt;2da Distro – Raspbian (lxde)&lt;/h2&gt;

&lt;p&gt;tras la decepcion de debian con xfce, dije, ohh las raspberry son equipos con
512MB de ram y un procesador arm de juguete, seguro que el intel (auque con mas
de 10 años de antiguedad) puede comportarse dignamente&lt;/p&gt;

&lt;p&gt;instale una version para PCs y asi fue, ligeresa en forma de 70mb de ram, con
escritorio lxde, y con chrome corriendo (su navegador preinstalado) apenas llegan
a 220mb de ram, bastante fluido con el yutu abierto, sorprendente!&lt;/p&gt;

&lt;p&gt;actualice e instale todo lo necesario para utilizarla, pero encontre dos pegas
que no pude dejar pasar, primero es estar basado en debian 8 y la segunda fue
que su lxde no tenia escritorios, por vishnu un solo espacio de trabajo! sin escritorios
no hay fiesta&lt;/p&gt;

&lt;h2 id=&#34;3ra-distro-debian-9-1-mate&#34;&gt;3ra Distro – Debian 9.1 (mate)&lt;/h2&gt;

&lt;p&gt;regrabe la iso (version dvd) de Debian un usb y reistale esta ves escogiendo
Mate, tras el primer reinicio solo aparecia una pantalla en negro, y al loguear
en un tty vi que el consumo era de 180MB, que limitaba bantante el posible uso
de un navegador&lt;/p&gt;

&lt;p&gt;desde el mismo tty, ejecutando &lt;code&gt;startx&lt;/code&gt;, mate iniciava sin inconvenientes y
luego de hacer eso y con otro reinicio, desaparecieron los problemas
graficos&amp;hellip; pero el consumo de memoria me asusto y pase a otra cosa&lt;/p&gt;

&lt;h2 id=&#34;4ta-distro-gnu-guix-0-13-0&#34;&gt;4ta Distro – GNU GUIX (0.13.0)&lt;/h2&gt;

&lt;p&gt;hace un tiempo GNU habia presentado su propio sistema de paquetes&amp;hellip; como para
estandarisar la cosa o algo asi, y cuando lei de esta distro me llamo la
atencion por (creo) ser la unica en utilizarlo&lt;/p&gt;

&lt;p&gt;segui la guia de su &lt;a href=&#34;https://www.gnu.org/software/guix/&#34;&gt;pagina oficial&lt;/a&gt;, aunque
al llegar al ultimo paso, algo debi hacer mal, pues regresaba un error&lt;/p&gt;

&lt;p&gt;me llamo la atencion que en su pagina lo consideran un sistema GNU (sin el
linux), cosa que me agrado bastante, aunque no encontre si es que utilizan HURD
como nucleo.&lt;/p&gt;

&lt;p&gt;otra cosa que encontre interesante es que durante la instalacion utilizan el
editor &lt;a href=&#34;https://www.gnu.org/software/zile/&#34;&gt;zile&lt;/a&gt;, no lo conocia, pero esta
basado en Emacs, solo que sin las extensiones, escrito en C y ocupa un espacio
ridiculo. Exelente si no puedes tirar de &lt;strong&gt;el&lt;/strong&gt; editor, o para ediciones menores
con un arranque instantaneo, por supuesto, zile, es otro de los tantos proyectos
del proyecto GNU&lt;/p&gt;

&lt;h2 id=&#34;5ta-opcion-freebsd-11-1&#34;&gt;5ta Opcion – FreeBSD 11.1&lt;/h2&gt;

&lt;p&gt;jemmm, cuando bajen la imagen, si van a grabarla a un usb, prestar atencion a
que la descarga termine con &lt;strong&gt;memstick.img&lt;/strong&gt;, las que terminan con &lt;em&gt;disk&lt;/em&gt; o
&lt;em&gt;dvd&lt;/em&gt; no arrancan si se graban en bruto con &lt;code&gt;dd&lt;/code&gt; a la usb. Por habito/despiste
intente con la imagen &lt;em&gt;disc&lt;/em&gt; y efectivamente no funciono&lt;/p&gt;

&lt;p&gt;para la instalacion segui la &lt;a href=&#34;https://www.linuxito.com/21-nix/435-como-instalar-freebsd-10&#34;&gt;guia de linuxito&lt;/a&gt;
por desgracia, algun tipo de problema hubo con el wifi atheros y ya que
necesitava la red para bajar unos paquetes, la instalacion no fue posible,&lt;/p&gt;

&lt;p&gt;al siguiente dia intente de nuevo con el cable de red, aun concluyendo la
instalacion el problema de la red o algo extraño sobre un buffer saturado seguia
lanzando amenazas. cuando descubri que en el sistema del demonio tenemos Gnome,
kde, y xfce, decidi abandonar el mundo BSD&lt;/p&gt;

&lt;p&gt;me quedo con la belleza del instalador, es muy bonico, tras el primer arranque tenia
422MB de ram libres, 1.3GB disco en uso&lt;/p&gt;

&lt;h2 id=&#34;6to-intento-gnu-guix-de-nuevo&#34;&gt;6to Intento – GNU GUIX (de nuevo)&lt;/h2&gt;

&lt;p&gt;luego de bsd, no pude resistirme a intertar de nuevo, ahora siguiendo la &lt;a href=&#34;https://www.ochobitshacenunbyte.com/2015/09/09/guixsd-la-distro-gnu-del-futuro/&#34;&gt;guia ochobits&lt;/a&gt;,
en conjunto con la oficial&lt;/p&gt;

&lt;p&gt;hemmn, puede enterder algo mejor y esta ocacion si monte y etiquete las
particiones correctamente (ahora lo se), aunque nuevamente llego el fracaso al
momento de ejecutar &lt;code&gt;guix system&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Una lastima&lt;/p&gt;

&lt;h2 id=&#34;7ta-distro-parabola&#34;&gt;7ta Distro Parabola&lt;/h2&gt;

&lt;p&gt;aqui tenemos el instalador mas chulo de todos, por nivel de chuleria los
ordenaria como&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;parabola&lt;/li&gt;
&lt;li&gt;debian (por utilidad con su modo de rescante y ser identico el modo texto al grafico)&lt;/li&gt;
&lt;li&gt;freeBSD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;llegando al paso de instalar el sistema base&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;acstrap -i /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aparecian varios problemas con llaves gpg, luego de varias busquedas, el comando
&lt;code&gt;pacman-key --refresh-key&lt;/code&gt; (un &lt;code&gt;pacman-key --populate archlinux&lt;/code&gt; en algun
momento), luego &lt;code&gt;pacman -Scc&lt;/code&gt;, mas &lt;code&gt;pacman -Syyu&lt;/code&gt;&amp;hellip; y, naahh, seguan los
preblemas con las llaves, solo se redujo el conflicto con un solo paquete, chan
chan char, el kernel&lt;/p&gt;

&lt;p&gt;tenia dos opciones, desactivar la verificacion de llaves instalando un kernel no
firmado, o pasar al siguiente intento. Por supuesto la respuesta no es obvia,
por un lado la verguenza de no instalar parabola y por el otro la inconciencia
de instalar &lt;strong&gt;el&lt;/strong&gt; paquete inseguro, la dificil desicion tuvo solucion al
considerar un kernel panic y el incomodo proceso de tener que buscar informacion
adicional con infructifero resultado: terminar la instalacion por orgullo y
pasar con la siguiente&amp;hellip; o no, un nuevo kernel panic, &lt;strong&gt;next&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;en serio, lo intento, parece que simplemente las particulas del universo
comspiran en mi contra&lt;/p&gt;

&lt;h2 id=&#34;8va-prueba-debian-9-2-lxde-net-install&#34;&gt;8va Prueba Debian 9.2 lxde (net install)&lt;/h2&gt;

&lt;p&gt;la idea fue instalar debian sin nada, y haci fue. Sin saber ni que, ni como
me quede sin red inalambrica o alambrica, no podia actualizar paquetes ni hacer
pings, durante la instalacion el wifi iba como un campeon y al reinicio se
olvido de contraseñas, al prabar con ethernet tampoco funcionaba. Debian es
especial con la configuracion y no contaba con &lt;code&gt;ifconfig&lt;/code&gt;, lo que encontre en
internete tampoco lo entendi muy bien&lt;/p&gt;

&lt;p&gt;una instalacion mas tarde, escogiendo lxde durante esta, y con red por ethernet,
los problemas desaparacieron, incluso se configuro el sources.list
correctamente. Desde el modo grafico configurar la red, fue solo poner la
contraseña y ya&lt;/p&gt;

&lt;p&gt;ocurrioseme un error epico mientras cambiaba bash por fish, al hacer &lt;code&gt;chsh&lt;/code&gt; con
una ruta erronea y me quede sin poder acceder como root, la solucion
paso por arrancar con la usb de instalacion en modo rescate y modificar
en &lt;code&gt;/etc/passwd&lt;/code&gt; la ruta erronea, corregir y reiniciar. fuuhhh, sude por mi
estupides, reinstalar debian une vez mas me daba una pereza enorme&lt;/p&gt;

&lt;p&gt;je, je, se supone que chsh primero verifica la ruta a la shell (en &lt;code&gt;/etc/shells&lt;/code&gt;)
antes de hacer el cambio. En el pasado varias veces me ha impedido
cagarla, pero ahora estava en &amp;ldquo;modo experto&amp;rdquo; o algo&lt;/p&gt;

&lt;p&gt;Esta ves el consumo de inicio fue de ~100MB de ram, mas que en raspbian, pero no
demaciado y con escritorios, yeee! ahora a configurar unas cosillas&lt;/p&gt;

&lt;h3 id=&#34;dvorak-programmer&#34;&gt;dvorak programmer&lt;/h3&gt;

&lt;p&gt;no encontre en el menu de lxde una opcion de idiomas, y una
&lt;a href=&#34;https://superuser.com/questions/119018/changing-keyboard-layout-to-dvorak-in-ubuntu-server&#34;&gt;fuente de internet&lt;/a&gt;
me revelo el secreto para configurar el teclado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg-reconfigure keyboard-configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tambien instalando el paquete &lt;code&gt;console-data&lt;/code&gt; se puede configurar el teclado,
pero si con &lt;code&gt;keyboard-configuration&lt;/code&gt; te funciona, como en mi caso, mejor no
tocar nada mas&lt;/p&gt;

&lt;h3 id=&#34;inicio-de-secion-automatico&#34;&gt;inicio de secion automatico&lt;/h3&gt;

&lt;p&gt;con ayuda de un viejo conocido (unilateralmente) pude configurar el inicio de
secion automatico siguendo este &lt;a href=&#34;http://unbrutocondebian.blogspot.mx/2012/10/inicio-de-sesion-automatico-sin.html&#34;&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;resumiendo basta con modificar &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; agregando &lt;code&gt;autologin-user=mi-usuario&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;prestar atencion, por que en la referencia de el post mencionan que lxdm
utiliza lxdm, mas en el debian 9.2, el gestor pasa a ser lightdm.&lt;/p&gt;

&lt;h3 id=&#34;backports-tilix-y-firefox&#34;&gt;backports (tilix y firefox)&lt;/h3&gt;

&lt;p&gt;primero a erradicar libreoffice que no lo ocupo para nada&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt remove --purge libreoffice*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luego modificamos la lista de repositorios (&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;) y agregamos los
backports, copiando y pegando&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://deb.debian.org/debian stretch-backports main
deb-src http://deb.debian.org/debian stretch-backports main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto es para optener el glorioso y suculento tilix que no viene en los repos
estandar, la idea tambien era  hacerse con firefox 56, parece que de momento el
backport de firefox no esta disponible en stretch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt update
apt upgrade
apt -t stretch-backports install tilix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lo importante es tener la terminal mas koool de todas (todas!) y por que &lt;em&gt;lxterminal&lt;/em&gt; captura
muchos atajos de emacs y no se pueden moficar (creo) lo que es un fastidio en
toda regla&lt;/p&gt;

&lt;h3 id=&#34;atajos&#34;&gt;atajos&lt;/h3&gt;

&lt;p&gt;ja, ja, creia que lxde no tenia atajos,
&lt;a href=&#34;https://daveden.wordpress.com/2012/09/21/lubuntu-keyboard-shortcuts-cheat-sheet/&#34;&gt;aqui&lt;/a&gt;
una lista con ellos&lt;/p&gt;

&lt;p&gt;pero lo sabroso esta en configurarlos a gusto para ello segui este &lt;a href=&#34;https://monstruosoft.wordpress.com/2016/01/25/configurar-atajos-lxde/&#34;&gt;otro post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;en resumen el &amp;ldquo;truco&amp;rdquo; es modificar un fichero en nuestro home ==&amp;gt; &lt;code&gt;~/.config/openbox/lxde-rc.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y una vez listo, llamar como usuario de a pie a openbox con &lt;code&gt;openbox --reconfigure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;como nota y para no investigar demasiado&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Prior&lt;/code&gt; == RePage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Next&lt;/code&gt; == UpPage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KP_[0-9]&lt;/code&gt; == pad numerico&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KP_Subtract&lt;/code&gt; == el &amp;ldquo;menos&amp;rdquo; del pad numerico&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KP_Multiply&lt;/code&gt; == el &amp;ldquo;asterisco&amp;rdquo; del pad numerico&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space&lt;/code&gt; == barra espaciadora&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Return&lt;/code&gt; == enter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; == Shift&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; == Control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; == Alt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt; == Super&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; == Meta&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H&lt;/code&gt; == Hyper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;una gozada ese fichero de configuracion de lxde, aunque algunos cambios como
agregar 10 escritorios, solo surgieron efecto al reiniciar&lt;/p&gt;

&lt;h2 id=&#34;next&#34;&gt;next&lt;/h2&gt;

&lt;p&gt;en la bandeja de distros dejo &lt;strong&gt;Uruk&lt;/strong&gt; y &lt;strong&gt;Gentoo&lt;/strong&gt;, (por fin con dos equipos
intentar con gentoo o arch carese de riesgo), aunque de momento no pienso mover
mas&lt;/p&gt;

&lt;p&gt;quedan pendientes hacer una modificacion al mapeo de teclado del sistema para lo
que hay que hacer una investigacion de donde demonios toma las mapeos debian,
pues en esta ocacion no los encontre en su localizacion habitual&lt;/p&gt;

&lt;p&gt;el consumo final inicial de ram, con tilix corriendo, ronda los 140MB y con un
navegador y algunas pestañas los 260-320MB, algo por demas expectacular&lt;/p&gt;

&lt;p&gt;el ultimo inconveniente pendiente es un &amp;ldquo;ruido de lineas&amp;rdquo; que aparece en el
video, probablemente sea cosa de hardware, no lo se, y mientras funcione o no me
ponga ocioso, hay se queda&lt;/p&gt;

&lt;p&gt;larga vida y prosperidad, a ese (medio) portatil que funciona con el kernel libre y sin
pedir nada para la wifi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>benchmarks dentro de un programa en go</title>
      <link>https://nasciiboy.github.io/prog/gomark/</link>
      <pubDate>Fri, 06 Oct 2017 21:03:55 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/gomark/</guid>
      <description>

&lt;p&gt;en Go podemos realizar benchmarks dentro de los ficheros &lt;code&gt;_test.go&lt;/code&gt;, sin embargo
realizar comparativas dentro de en un programa &amp;ldquo;regular&amp;rdquo; no es (era) tan
sencillo hasta la llegada de la version 1.9&lt;/p&gt;

&lt;h2 id=&#34;cgo&#34;&gt;cgo&lt;/h2&gt;

&lt;p&gt;la primer opcion es echar mano de la libreria &lt;code&gt;time&lt;/code&gt; de C. Esta libreria
contiene la funcion &lt;code&gt;clock&lt;/code&gt; que nos regresa una aproximacion a la cantidad de tiempo
del procesador que ha utilizado el programa desde su ejecucion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

//#include &amp;lt;time.h&amp;gt;
import &amp;quot;C&amp;quot;

import &amp;quot;fmt&amp;quot;

const top = 1 &amp;lt;&amp;lt; 12

func main(){
  init := CpuTime()

  // prueba &amp;gt;
  for x, str := 0, &amp;quot;&amp;quot;; x &amp;lt; top; x++ { str += &amp;quot;1234567890&amp;quot; }
  // &amp;lt; prueba

  fmt.Printf( &amp;quot;CpuTime %dms\n&amp;quot;, DiffCpuTimeByMS( init, CpuTime() ) )
}

func CpuTime() uint64 {
  return uint64(C.clock())
}

func DiffCpuTimeByMS( begin, end uint64 ) uint64 {
  return (end - begin) *  1000 / uint64(C.CLOCKS_PER_SEC)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;resultado:&lt;/strong&gt; &lt;code&gt;CpuTime 55ms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;solo hay que cambiar el codigo dentro de las comentaarios &amp;ldquo;prueba&amp;rdquo;, es
importante mantener la linea con &lt;code&gt;//#include &amp;lt;time.h&amp;gt;&lt;/code&gt; tal cual, pues es una
(obscura) indicacion para decirle al compilador de Go que incluya dicha libreria
de C. Por supuesto tambien hay que mantener la importacion de &lt;code&gt;&amp;quot;C&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para la compilacion no hace falta pasar ningun parametro adicicional, basta con
un simple &lt;code&gt;go build main.go&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;testing&lt;/h2&gt;

&lt;p&gt;la segunda opcion para realizar un benchmark es invocar a &lt;code&gt;testing&lt;/code&gt; desde codigo
regular con una funcion literal&amp;hellip; lo se, no es intiuitivo, pero hay esta y
funciona&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;
import &amp;quot;testing&amp;quot;
import &amp;quot;time&amp;quot;

const top = 1 &amp;lt;&amp;lt; 12

func main(){

  result := testing.Benchmark(func(b *testing.B) {
    b.N = 1 // numero de repeticiones de la prueba
    for i := 0; i &amp;lt; b.N; i++ {
      // prueba &amp;gt;
      for x, str := 0, &amp;quot;&amp;quot;; x &amp;lt; top; x++ { str += &amp;quot;1234567890&amp;quot; }
      // &amp;lt; prueba
    }
  })

  fmt.Printf( &amp;quot;tiempo %s\n&amp;quot;, result.T / time.Duration(result.N) )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;resultado:&lt;/strong&gt; &lt;code&gt;tiempo 67.861708ms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;esta prueba toma mucho mas tiempo que con la version anterior, la diferencia se
origina en el propio &lt;code&gt;testing.B&lt;/code&gt;, ya que realiza metricas adicionales, como el numero de
asignaciones de memoria, bytes utilizados, gorutinas y otras cosas&lt;/p&gt;

&lt;h2 id=&#34;time&#34;&gt;time&lt;/h2&gt;

&lt;p&gt;por ultimo la prueba del tiempo se puede realizar con la libreria estandar de
Go, aunque esto no es asi para verciones del compilador inferiores a 1.9 ya que
antes de estos no se media el timpo &amp;ldquo;monolitico&amp;rdquo; de ejecucion (lo que hace
&lt;code&gt;clock&lt;/code&gt; de la libreria &lt;code&gt;time&lt;/code&gt; de C)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;time&amp;quot;
import &amp;quot;fmt&amp;quot;

const top = 1 &amp;lt;&amp;lt; 12

func main(){
  start   := time.Now()
  for x, str := 0, &amp;quot;&amp;quot;; x &amp;lt; top; x++ { str += &amp;quot;1234567890&amp;quot; }
  elapsed := time.Since( start )

  fmt.Printf( &amp;quot;tiempo %s\n&amp;quot;, elapsed )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;resultado:&lt;/strong&gt; &lt;code&gt;tiempo 59.746755ms&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;en pruebas personales, con &lt;code&gt;clock&lt;/code&gt; (de C) los resultados son mas constantes y con
menor variacion que en las demas opciones, mas la version con &lt;code&gt;time&lt;/code&gt; nativo no
dista demaciado de esta, ademas por ser la opcion con codigo nativo y sin
dependencias externas es la que recomiendo y utilizo. Reservaria como segunda
opcion y para pruebas mas exigentes la que utiliza &lt;code&gt;testing.B&lt;/code&gt;, siempre asumiendo
una consumo superior de recursos&lt;/p&gt;

&lt;h2 id=&#34;referencias&#34;&gt;referencias&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/comments/6u4xhs/how_make_a_benchmark_in_a_regular_program_no/&#34;&gt;https://www.reddit.com/r/golang/comments/6u4xhs/how_make_a_benchmark_in_a_regular_program_no/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/time/&#34;&gt;https://golang.org/pkg/time/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>morg v0.20</title>
      <link>https://nasciiboy.github.io/prog/morg-v020/</link>
      <pubDate>Fri, 06 Oct 2017 17:33:57 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-v020/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/morgv020.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;one-more-kiss&#34;&gt;One More Kiss&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;woooooo!!! wraaoggghhh!!! (&amp;amp;) wrooomgfff!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;aunque he dedicado aproximadamente los ultimos 2 meses en exclusiva y de forma
obsesa a la refactorizacion de morg, su codigo sigue siendo mediocre.
mentiria si dijera que comparativamente no ha avanzado un guevo con respecto a
la ultima vez que lo toque, pero como diria mick, &amp;ldquo;no me satisface&amp;rdquo; (aun)&lt;/p&gt;

&lt;p&gt;muchas cosas he aprendido por el camino, sobre todo relacionado con Go, pues
ahora si me siento comodo y casi seguro con su huso, tambien aprendi ha hacer un
&amp;ldquo;Scanner&amp;rdquo; para identificar lineas&amp;hellip; cadenas, numeros, constantes y otros cosas
dentro de una cadena &amp;ldquo;cruda&amp;rdquo; de texto, ademas ahora se, que las cadenas (como
las cucharas) no existen, y un monton de cosas mas que ya no recuerdo&amp;hellip;&lt;/p&gt;

&lt;p&gt;algunas anotaciones he dejado que darian para varios post (o un libro en el
futuro) pero no llegaran hasta tener un programa robusto y &amp;ldquo;señorial&amp;rdquo;, con la
suficiente calidad como para atreverme a mandarlo a alguna distro, no obstante,
lo pongo a disposicion del mundo para resivir algun tipo de aportacion
intelectual, hackeril, ecomica o moral&lt;/p&gt;

&lt;p&gt;Pero bueno, aunque no dejan de ser frajiles, pasemos a las caracteristicas y
cambios que incorpora la nueva version&lt;/p&gt;

&lt;p&gt;(para quien no tenga idea de que mierda es &lt;em&gt;morg&lt;/em&gt;, dedicare una guia exhaustiva
en el futuro, mientras pueden pasarse por el
&lt;a href=&#34;https://github.com/nasciiboy/morg&#34;&gt;repo&lt;/a&gt; y leer el  inactualizado readme, o si
quiere ver una muestra de sus actuales capacidades de exportacion y su sintaxis
en si, (y ademas aprender Go) vallan a &lt;a href=&#34;https://github.com/nasciiboy/tgpl&#34;&gt;este&lt;/a&gt; repo)&lt;/p&gt;

&lt;h3 id=&#34;resaltado-o-marcas&#34;&gt;resaltado (o marcas)&lt;/h3&gt;

&lt;p&gt;las marcas eran antes &lt;code&gt;@&lt;/code&gt; + &lt;code&gt;caracter&lt;/code&gt; + &lt;code&gt;(&lt;/code&gt; + &lt;code&gt;contenido&lt;/code&gt; + &lt;code&gt;)&lt;/code&gt; y ahora sigue
siendo asi, peroooo por primera vez &lt;code&gt;caracter&lt;/code&gt; puede ser una serie de varios
caracteres, es decir, el &amp;ldquo;resaltado&amp;rdquo; se puede concatenar, como en &lt;code&gt;@eibc(algo)&lt;/code&gt;
que exportado a html seria asi: &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;i&amp;gt;&amp;lt;b&amp;gt;&amp;lt;code&amp;gt;algo&amp;lt;/code&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramentros-con-sintaxis-estilo-funcion&#34;&gt;paramentros con sintaxis estilo &amp;ldquo;funcion&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;en la mayoria de herramientas de linea de comandos un parametro tiene la
sintaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--algo=&amp;quot;cosa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-algo cosa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bien?, para morg esto tiene la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo( cosa )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;algo( cosa-a, cosa-b, ... )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una forma de entenderlo, es como una funcion que tiene valores establecidos por
defecto, y segun el numero de parametros que se envien el resto se colocan de
forma automatica, y en caso de que un parametro (o su numero) sea erroneo,
se subtituyen los errores por el valor por defecto.&lt;/p&gt;

&lt;p&gt;La diferencia radica en que no se trata de una funcion, sino del nombre de un
parametro y sus valores!&lt;/p&gt;

&lt;p&gt;ahora, estos modificadores aparecen dentro de los bloques, que tienen la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..bloque &amp;gt;
  cosas
&amp;lt; bloque..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;quedando asi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..bloque algo algo1() algoMas2( &amp;quot;cadena&amp;quot;, 123, .21, `raw`, identificador )  &amp;gt;
  cosas
&amp;lt; bloque..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un uso de ejemplo es para especificar un tema especifico, o indicar que la
salida debe numerarse apartir de un numero dado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code n(10) style( &amp;quot;blackHole&amp;quot; )  &amp;gt; c
  esto es codigo en lenguaje C «o no»
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;como es una cosa muy chula, tambien active el parseo de esta caracteristica
dentro de un comando especial (&lt;code&gt;options&lt;/code&gt;) en la configuracion del documento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..options &amp;gt; fancyCode() toc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;de momento solo con dos opciones, la primera para especificar que queremos
resaltado de sintaxis en la exportacion (dentro de este puede especificarse
algun tema de color, pero en su lugar recomiendo dejar el campo vacio y
establecer el tema con css en la exportacion html).&lt;/p&gt;

&lt;p&gt;la otra opcion es &lt;code&gt;toc&lt;/code&gt;, que sirve para indicar que queremos que la exportacion
incluya la tabla de contenidos&lt;/p&gt;

&lt;h3 id=&#34;ladrillos&#34;&gt;ladrillos&lt;/h3&gt;

&lt;p&gt;je, bloques y ladrillos. Imagina que tienes un bloque de codigo fuente, y en
algun momento lo deseas &amp;ldquo;ejecutar&amp;rdquo; y colocar su salida dentro del documento,
pues hay es donde aparecen los ladrillos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code &amp;gt; sh
  echo &amp;quot;hola, mundo&amp;quot;
&amp;lt;&amp;gt;
  hola, mundo
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;exacto, el &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; separa el bloque de sus ladrillos&amp;hellip; y en este podriamos indicar
algurna cosa como por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..code &amp;gt; sh
  random
&amp;lt;&amp;gt; ejecucion 1
  1236
&amp;lt;&amp;gt; ejecucion 2
  47
&amp;lt; code..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y asi sucesivamente.&lt;/p&gt;

&lt;p&gt;Aunque es una opcion disponible en cualquier bloque (exepto los de configuracion
del documento) de momento solo la he dejado activa en el bloque especial &lt;code&gt;cols&lt;/code&gt;,
que sirve para dibujar columnas de cosas (en html)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..cols &amp;gt;

  este es el texto de la columna 1

&amp;lt;&amp;gt;

  este es el texto de la columna 2

&amp;lt;&amp;gt;

  contenido de la columna 3

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;al principio pense en que la division del ladrillo tuviera el formato&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..cols &amp;gt;
  cosa
&amp;lt;-&amp;gt; otra cosa
  la otra cosa
&amp;lt;-&amp;gt;
  la ultima cosa
&amp;lt; cols..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;con &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; por facilitar la identificacion visual de los &amp;ldquo;ladrillos&amp;rdquo;, pero
abandone la idea, por que es mas complejo el agregar el guion en medio, lo unico
que tenia en claro era la utilisacion de los simbolos &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; que de algun modo
complementan la idea de unidad en los bloques cerrando y abriendo las secciones.&lt;/p&gt;

&lt;p&gt;como sea, aun es un prospecto de caracteristica&lt;/p&gt;

&lt;h3 id=&#34;srci&#34;&gt;srci&lt;/h3&gt;

&lt;p&gt;el otro comando de bloque que sufrio cambios es &amp;ldquo;sorci&amp;rdquo; (escrito &lt;code&gt;srci&lt;/code&gt;) que es
un bloque donde se simula un prompt de algun lenguaje y su salida, sin hechar
mano de los ladrillos&lt;/p&gt;

&lt;p&gt;en la anterior version la sistaxis era&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..srci &amp;gt; lenguaje
  &amp;gt; (esto simularia ser (codigo)  \
      (en lisp (o algo)           \
               (por el estilo)))
  esta seria la supuesta salida
  que produce el codigo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;las diagonales al final servia para indicar que la supuesta seccion de codigo
se expande por varias lineas, de forma identica a como se hace en bash&lt;/p&gt;

&lt;p&gt;pues ahora sera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..srci &amp;gt; lenguaje
  &amp;gt; (esto simularia ser (codigo)
  ^   (en lisp (o algo)
  ^            (por el estilo)))
  esta seria la supuesta salida
  que produce el codigo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cada linea que se supone forma parte de la entrada, inicia con &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Este cambio lo hice por ninguna razon en especifico, un mero capricho. El como
escapar unas entradas legitimas de los simbolos &lt;code&gt;&amp;gt;&lt;/code&gt; (prompt) y &lt;code&gt;^&lt;/code&gt; (cosas que
forman parte del promtpt en cuestion) es un asunto aun inexplorado, he, he, he&lt;/p&gt;

&lt;p&gt;pero bueno, lo bonico de este bloque, es que con una sintaxis comun se puede
simular la supuesta estrada de casi cualquier lenguaje! Para casos donde el
lenguaje tenga mas de un promt, habria que utilizar un parametro adicional y
supongo que diversos bloques, por ejemplo para simular una secion como usuario
de a pie en bash y luego un logueo como root, seria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..srci prompt( &amp;quot;$ &amp;quot; ) &amp;gt; sh
  &amp;gt; rm -rf /boot
  permiso denegado
  &amp;gt; su
  password

aqui con algun texto se alerta de los peligros de ser root y ejecutar
comandos con poder ilimitado

..srci prompt( &amp;quot;# &amp;quot; ) &amp;gt; sh
  &amp;gt; whoami
  root
  &amp;gt; rm -rf /boot
  error: lo siento su princesa se encuentra en otro castillo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mensajes-de-error&#34;&gt;mensajes de error&lt;/h3&gt;

&lt;p&gt;la version anterior era silenciosa como una tumba, solo lanzaba mensajes cuando
se rompia el parser. Para la nueva version, ademas de los mensajes en un
escenario catastrofico, se incluyen mensajes en errores dentro de los bloques,
tambien del resaltado y los relacionados con problemas de codificacion&lt;/p&gt;

&lt;p&gt;no es todo lo presiso que deberia ser, aun asi cumple su funcion medianamente bien&lt;/p&gt;

&lt;h3 id=&#34;pinche-python-culero-del-infierno&#34;&gt;pinche python culero del infierno&lt;/h3&gt;

&lt;p&gt;en la version &amp;ldquo;antigua&amp;rdquo; de morg, utilizaba pygments para colorear (o mas bien
etiquetar) el codigo fuente, puede que hiera alguna sensivilidad, pero &lt;strong&gt;el puto
python de los cojones&lt;/strong&gt; no esta hecho para hacer aplicaciones, si lo estas
utilizando de esa forma, colaboras con el calentamiento global, matas gatitos y
peor aun, no mereses mi respeto&lt;/p&gt;

&lt;p&gt;ja, ja, no hay color! entre la vieja version que utilizaba python para el
coloreado y el actual hay una diferencia de 3 minutos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ time morg-old toHtml The-Go-Programming-Language.morg

real	3m6,947s
user	2m40,701s
sys	0m16,755s
$ time morg-new toHtml The-Go-Programming-Language.morg
morg:katana:The-Go-Programming-Language:4346:52: illegal UTF-8 encoding
katana:The-Go-Programming-Language:4346:52: illegal UTF-8 encoding

real	0m2,414s
user	0m2,456s
sys	0m0,030s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;si tres malditos minutos&lt;/strong&gt;, que hacian a morg inviable para por ejemplo una edicion &amp;ldquo;en
vivo&amp;rdquo; (en alguna futura version), no solo eso, si no que con la version en puro
y nativo codigo Go, en la practica, &lt;strong&gt;el tiempo de espera no existe&lt;/strong&gt;, peor aun
ni siquiera estoy utilizando paralelismo (aun)&lt;/p&gt;

&lt;p&gt;cuasi como un milagro santisimo del mismo RMS, aparecio un proyecto llamado
&lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;chroma&lt;/a&gt;, que se esta encargando de portar
pygments a Go.&lt;/p&gt;

&lt;p&gt;pero bueno, no todo es tan bonito como parece, la libreria chroma no esta
preparada para ser utilizada concurrentemente, asunto que descubri de mala manera
y con el &lt;em&gt;sentido aracnido&lt;/em&gt;. Ademas es demasiado compleja de utilizar, tira de
una libreria de expresiones regulares de una tercera parte, no esta pensada para
utilizarse &amp;ldquo;en solitario&amp;rdquo; (segun yo) y hecha mano de paquetes &amp;ldquo;peligrosos&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sea como fuere, &lt;strong&gt;chroma&lt;/strong&gt; es una aportacion invaluable y de facil modificacion
para mis propositos (o modos, segun se vea). Ya que tiene que cumplir con
necesidades muy especificas dentro de morg que dificilmente serian aceptadas en
el proyecto original, he hecho un clonacion y lo he subido a mi repo&amp;hellip; aunque
como el proyecto chroma aun es joven, va a ser tortuoso sincronisar las
actualizaciones que en el se hagan, en fin, el menor de los males&lt;/p&gt;

&lt;h2 id=&#34;eof&#34;&gt;EOF&lt;/h2&gt;

&lt;p&gt;aunque tiene un monton de horas y pruebas, el codigo al igual que la
&amp;ldquo;especificacion&amp;rdquo; siguen siendo fragiles, asi que no recomendare su uso, incluido
el mio, que recintemente tuve que hacer cambios en algunos documentos para poder
utilizarlos como ficheros de prueba&lt;/p&gt;

&lt;p&gt;como de costumbre, me libre de algunos baches con chapuzas, y sigo encontrando
dificuldades para establecer un modelo solido. La seccion que se encarga del
despliegue en terminal solo la actualice para que fuera funcional, esta sigue
siendo lo mismo que hace (como) 5 meses, cuando aun era un forastero en Go. Lo
unico que no merma es la adrenalina mientras me pongo a pensar, ni la esperansa
de verlo completo con su&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;interfaz (completa) para terminal,&lt;/li&gt;
&lt;li&gt;exportador para multiples formatos,&lt;/li&gt;
&lt;li&gt;con opciones para ser extensible y modificable&lt;/li&gt;
&lt;li&gt;verlo substituir a todos los otros formatos que existen,&lt;/li&gt;
&lt;li&gt;crear un super repositorio lleno de conociminto en formato morg y dotarlo de un buscador para este,&lt;/li&gt;
&lt;li&gt;incorporar traduccion automatica,&lt;/li&gt;
&lt;li&gt;reformateo,&lt;/li&gt;
&lt;li&gt;encontrar el lenguaje ideal para formulas matemagicas y diagramas,&lt;/li&gt;
&lt;li&gt;que cuente con tablas de datos complejas e interactivas en puro texto&lt;/li&gt;
&lt;li&gt;y un modo para emacs&amp;hellip;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En claro y dicho de otro modo, es un proyecto a muy largo plazo para este
ejercito de un solo hombre&lt;/p&gt;

&lt;h3 id=&#34;dependencias&#34;&gt;dependencias&lt;/h3&gt;

&lt;p&gt;odio las dependencias, incuso incluir a la libreria estandar. Por ello trato de
mantener el codigo lo mas &amp;ldquo;puro&amp;rdquo;, el nucleo es realmente sencillo y
practicamente limitado solo a mi carpeta (ver en el siguiente arbol), pero para
cumplir la mision primero hubo que hechar mano de chroma (no puedo dejar de
agradecerles) y estos para mi desforturio hechan mano de una libreria de
expresiones regulares llamada regexp2 (dlclark/regexp2) que ralentiza la
compilacion de forma considerable (~20s)&lt;/p&gt;

&lt;p&gt;la otra dependencia, es &lt;strong&gt;termbox-go&lt;/strong&gt; (nsf/termbox-go), que sirve para la
interfaz de linea de comandos y por ultimo tambien esta &lt;em&gt;fnmatch&lt;/em&gt;, la cual no se
que haga&amp;hellip;&lt;/p&gt;

&lt;pre&gt;
── Dependencias
    ├── danwakefield
    │   └── fnmatch
    ├── dlclark
    │   └── regexp2
    ├── mattn
    │   └── go-runewidth
    ├── nasciiboy
    │   ├── chroma
    │   ├── morg
    │   │   ├── biskana
    │   │   ├── howto.md
    │   │   ├── katana
    │   │   ├── LICENSE.txt
    │   │   ├── morg.go
    │   │   ├── morg_test.go
    │   │   ├── nirvana
    │   │   ├── porg
    │   │   ├── readme.md
    │   │   └── testdata
    │   ├── regexp4
    │   └── txt
    └── nsf
        └── termbox-go
&lt;/pre&gt;

&lt;p&gt;el arbol esta bastante resumido, segun &lt;code&gt;find&lt;/code&gt; son 292 ficheros de codigo (inclidas
las pruebas) haber si en un futuro logro restringir las dependencias exclusivamente
a mi codigo y a termbox&lt;/p&gt;

&lt;p&gt;o, como curiosidad, la imagen del inicio la utilize para inscribir el proyecto morg
en un concurso mexxxicano de &amp;ldquo;ideas mexico&amp;rdquo;, que exigia hacer un video (&lt;a href=&#34;https://www.youtube.com/watch?v=F5QVI98TZNU&#34;&gt;aca&lt;/a&gt;
(en yutu)) ja, ja, el video es mudo y no tiene sentido alguno, fue gracioso hacerlo.&lt;/p&gt;

&lt;p&gt;El concurso se ganaba con votacion popular que exigia un registro en la pagina.
Habia muchos proyectos que daban para unas risas, morg, no resivio ningun voto,
y tampoco me hacia ilusion ganar dicho concurso, aunque si hubiera sido asi, me
habria quitado algunos estigmas &amp;ldquo;ambientales&amp;rdquo; de en cima, pero bueno, no hay
prisa, no tengo duda que en un futuro cercano o quiza lejano morg se impondra
como el formato supremo, he!&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sayonara F</title>
      <link>https://nasciiboy.github.io/prog/sayonara-f/</link>
      <pubDate>Thu, 14 Sep 2017 16:16:26 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/sayonara-f/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/sayonara-F.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;fedora-antergos-dos-pantalas-y-un-adios&#34;&gt;fedora -&amp;gt; antergos (dos pantalas y un adios)&lt;/h2&gt;

&lt;p&gt;aaah, compras un disco duro, optienes dos semanas de depresion y terminas
cambiando de distribucion&amp;hellip;&lt;/p&gt;

&lt;p&gt;en mi aldea, diria que solo hay un sitio rasonable para comprar hardware, que no
por ello con variedad o siquiera stock, asi que cuando logre ahorrar para un
hdd de 2TB y no encontre existencias, fui a otro sitio y compre el hdd y termine
con un disco de servidor con miles de horas, crujidos y un mal historial del
smart, mas eso ocurrio luego de haber pasado casi toda mi coleccion de
libros y perderlos en el limbo&amp;hellip;&lt;/p&gt;

&lt;p&gt;luego de varias vueltas por el establecimiento, cambios y mas tarde amenasas, el hdd se
convirtio en un monitor lcd de la peor calidad, aunque por ser un poco mas amplio
que el que tenia termino relegando al otro a un ricon.&lt;/p&gt;

&lt;p&gt;tiempo despues, una brillante idea surgio, o si! conectar los dos monitores a la
placa! Mas al ser ambos vga dificil era (aunque no pocas preguntas y confusas
respuestas de foros hablaban de como lograr tal exotica configuracion).&lt;/p&gt;

&lt;p&gt;Pues bien, una targeta de video (asus nvidea 220) y modificaciones a el
(esoterico) &lt;code&gt;xorg.conf&lt;/code&gt; mas tarde, ademas de mensajes en foros que aseguraban que hacer
funcionar los graficos integrados del procesador (primer monitor vga) en
conjunto con los graficos de la placa de video dedicada (segundo monitor vga) era
imposible.&lt;/p&gt;

&lt;p&gt;la idea, convertida en necesidad de ver a ambos monitores funcionar fueron tan
fuertes como para abandonar la alegria ofrecida por debian 7. Inicio &amp;ldquo;la
busqueda&amp;rdquo; de la distribucion prometida que hiciera funcionar el invento sin mas.&lt;/p&gt;

&lt;h2 id=&#34;el-caso-de-fedora&#34;&gt;el caso de fedora&lt;/h2&gt;

&lt;p&gt;pasaron open suse, manjaro, linux mint y alguna mas que no recuerdo, hasta
llegar a Fedora 23 que cual shaman hacia funcionar ambos monitores desde que se
iniciaba el instalador, wooow!&lt;/p&gt;

&lt;p&gt;fin del cuento&lt;/p&gt;

&lt;p&gt;bueno&amp;hellip; no, fuuuhhhh f-e-d-o-r-a, como decirlo, es e-s-p-e-c-i-a-l, un dia le
da por cambiarte el nombre de los directorios, al siguiente por no producir
ningun sonido, otro por desaparecer mapeos de teclado, luego por ignorar el
tercer nivel de las teclas, por comportamientos erraticos en los programas, o
simplemente dejar de arrancar con un kernel, no es una exageracion comentar que
cada actualzacion es como una ruleta rusa.&lt;/p&gt;

&lt;p&gt;Por que actualizar entonces? pues por la esperansa en que algun cambio resolviera
sus comportamientos extraños&lt;/p&gt;

&lt;p&gt;al poco tiempo llego fedora 24 y di un tour por las otras hijas de red hat, centos y mageia, en la
primera su aspecto viejuno me echo hacia atras y en la segunda la magia
multimonitor no se presento&lt;/p&gt;

&lt;p&gt;fedora 24 fue una dura prueba, aun asi tener el doble de espacio justificaba el
sufrimiento, y en fedora 25 muchos comportamientos extraños fueron corregidos&lt;/p&gt;

&lt;p&gt;el anelo por regesar a debian o probar arch, nunca desaparecio, pero con el
tiempo llegue a aceptar a fedora, debo reconocer que la idea de regresar a una
distro con X11 era desagradable, aunque la verdad sea dicha con wayland no es
que las cosas fueran apresiablemente distintas, aaahh fedora, no se si eres
puntera o el peor laboratorio de pruebas que existe&lt;/p&gt;

&lt;p&gt;(no tan) recientemente aparecio fedora 26 y en ningun intento la actualizacion
fue posible, el instalador jamas llego al modo grafico, asi, por mera curiosadad
y luego de haber cacharreado (por encargo) con una laptop, llego antergos he instale sin
esperar nada y tras el reinicio &lt;strong&gt;hu-ha-ho&lt;/strong&gt; los dos monitores a pleno
rendimiento&lt;/p&gt;

&lt;h2 id=&#34;el-caso-de-antergos&#34;&gt;el caso de antergos&lt;/h2&gt;

&lt;p&gt;imitando a Mel Gibson grite, libertaaaaaaad!&lt;/p&gt;

&lt;p&gt;ilusion o engaño? haber, un reebot&amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip;nop, sigue funsionando, veamos
como se instalan cosas en esta distro, huum, pues no lo tengo claro, pero tieno
algo como synaptic&lt;/p&gt;

&lt;p&gt;y asi instale la mayoria de cosas que hacian falta, creo que para la siguiente
ocasion intentare con una lista a medida desde consola con pacman y yaour, aqui la dejo
por si quieren jusgar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yaour  -Sy ckb-next-git
pacman -Sy emacs fish tilix moc

pacman -Sy svn subversion git mercurial bzr vlc shntool cuetools flac ffmpeg asciidoc pandoc htop dfc valgrind youtube-dl zeal gource
pacman -Sy kdeconnect kde-cli-tools sshfs chrome-gnome-shell
ufw allow 1714:1764/udp
ufw allow 1714:1764/tcp
ufw reload

pacman -Sy clisp ghc clang guile rust rust-docs ldc nasm cargo racket racket-docs
pacman -Sy thunderbird blender inkscape dia gimp mypaint tiled mtpaint gpick pinta synfigstudio subdownloader qbittorrent simple-scan
pacman -Sy unp unrar zip unzip poppler libcaca asciidoc pandoc id3v2 smartmontools testdisk foremost gparted rsync ghostscript texinfo arduino avr-libc ripgrep speedcrunch
pacman -Sy love ppsspp fceux higan snes9x zsnes dosbox
pacman -Sy aircrack-ng macchanger

yaour  -Sy dtrx fritzing scid_vs_pc gscan2pdf

pacman -Sy python-pip
pip install pygments subliminal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por aclarar &lt;code&gt;ckb-next-git&lt;/code&gt;, es para que funcione mi extrabagante teclado
mecanico (regalo de un camello empresarial) que ensima de estar en programmer
dvorak tiene 7 teclas cambiadas de lugar, si, si que vale la pena el pequeño
disturbio mental cuando hay que instalar una nueva distro.&lt;/p&gt;

&lt;p&gt;Lo de &lt;code&gt;ufw&lt;/code&gt; se debe a que durante la instalacion marque (por probar) la casilla de
firewall, todavia no lo tengo claro, pero es necesario abrir esos puertos para
que kde-connect funcione&lt;/p&gt;

&lt;p&gt;un hecho curioso del &amp;ldquo;synaptic&amp;rdquo; de antergos, es que no pide la contraseña de
root, asi que luego de looguear como su: &lt;code&gt;passwd&lt;/code&gt;&amp;hellip; pero aun asi la contraseñå
del usuario de calle sigue siendo la que manda en el instalador de software
grafico y creo que todo lo que se hace en la secion grafica&amp;hellip; b-u-e-n-o, la
perfeccion no existe&lt;/p&gt;

&lt;p&gt;hablando de perfeccion, el instalador de la distro, no es vistoso, mas si
consiso, exepto por el &lt;em&gt;enorme&lt;/em&gt; detalle de configurar el wifi, dependiente
casi del azar&lt;/p&gt;

&lt;p&gt;una vez mas encogiendo los hombros &amp;ldquo;b-u-e-n-o, la perfeccion no existe&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;lightdm&#34;&gt;lightdm&lt;/h2&gt;

&lt;p&gt;y asi, con una sonrisa me fui a dormir&amp;hellip;&lt;/p&gt;

&lt;p&gt;la, la, la, la, encender, bienvenida, y, &lt;em&gt;no funsiona el teclado?&lt;/em&gt;,
haber, toquetear, leer, reinstalar, nop no funsiona, uhm reinicio? oh, ya
funciona, mmmmm, haber, bloquear-pantalla/desblouear-pantalla&amp;hellip; &lt;strong&gt;lightdm&lt;/strong&gt;,
comorrr? y el gdm? jo, si funciona que mas da, dije para mis adertros, pero que?
cuando lightdm esta activo pasa del mapeo del teclado y se pone en english,
juar, juar juar, que gracioso, que mas da, igual y hasta agrega &amp;ldquo;seguridad&amp;rdquo;&lt;/p&gt;

&lt;p&gt;la, la, la, la, bloqueo y regreso unas horas despues y&amp;hellip; lightdm se queda
colgado, pero que es esto? a la mierda, si vas a poner gnome poner el puto gdm,
para que jodidos quiero cambiar fondos de pantalla dentro del gestor de secion, he,
para que?&lt;/p&gt;

&lt;p&gt;es sencillo, el cambio, decian varios blogs de internet, instalas gdm, eliminas
lightdm, deteren, desabilitar, y encender&amp;hellip; pero algo raro paso y con gdm se
jodio el asunto un logueo infinito que no lleva a ningun lugar, maldicion, regreso a
lightdm y no bloqueare secion nunca mas&amp;hellip; un confuso proceso de instalaciones y
eliminaciones despues entre gdm-lightdm, que no documente pero puede que sea en
este orden (aceptar el riesgo y hacerlo desde una ttty)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -Rcns lightdm
systemctl stop lightdm
systemctl disable lightdm
pacman -Sy gdm
systemctl enable lightdm
systemctl start lightdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si ademas tienen una distribucion de teclado no convencional, antes de ir a un tty
establecer el mapeo pertinente o sufrir&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;KEYMAP=dvorak-programmer&#39; &amp;gt; /etc/vconsole.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luego de manocear un poco y cambiar en gdm a &lt;em&gt;gnome classico&lt;/em&gt; se logro el
regreso al entorno grafico, que tambien se podia con un &lt;code&gt;startx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Je, el plan era estar una semana en antergos, si, como no, probemos manjaro&amp;hellip; no
arranca, bueno, regresemos a fedora, ya la conosco, no, no funsiona, he, he, he
(tick nervioso). Haber calma, puedo vivir con gnome classico con su molesta
barra al fondo e iconos en el escritorio&lt;/p&gt;

&lt;p&gt;Y asi fue como aprendi a poner el firefox en pantalla completa sin esconder la
barra de pestañas: &lt;code&gt;about:confing&lt;/code&gt; -&amp;gt; &lt;code&gt;browser.fullscreen.autohide&lt;/code&gt; -&amp;gt;
&lt;code&gt;false&lt;/code&gt;. Linda configuracion, a juego con las terminales y el emacs!&lt;/p&gt;

&lt;p&gt;y asi sin esperanza en el corazon, aunque el resto del sitema funcionaba bien,
antes de ofreser la maquina al fuego y asumir el rol de un sin techo,
suiguiendo los consejos de un &lt;a href=&#34;https://totaki.com/poesiabinaria/2017/08/configuracion-nvidia-optimus-driver-privativo-bumblebee/&#34;&gt;poeta&lt;/a&gt;
para arreglar el problema del logueo con gdm agregue una opcion al arranque de grub (&lt;code&gt;emacs /etc/default/grub&lt;/code&gt;)
&lt;code&gt;acpi_osi=! acpi_osi=\&amp;quot;Windows 2009\&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;para actualizar los valores del grub (no hay update-grub en arch), con:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;antes de loguearse en gdm, colocar la secion en &lt;em&gt;gnome xorg&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;fin&lt;/p&gt;

&lt;h2 id=&#34;don-t-let-me-down-epilogo&#34;&gt;Don&amp;rsquo;t Let Me Down (epilogo)&lt;/h2&gt;

&lt;p&gt;pasaron los dias (2) y el escritorio de nasciiboy suguio funcionando en aparente
perfeccion&lt;/p&gt;

&lt;p&gt;el pc nunca fue ofresido al fuego (concientemente)&lt;/p&gt;

&lt;p&gt;y la llegada de wayland fue &amp;hellip;&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iScheme</title>
      <link>https://nasciiboy.github.io/prog/ischeme/</link>
      <pubDate>Sun, 20 Aug 2017 15:59:03 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/ischeme/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/lambda.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;La traduccion del SICP se esta poniendo matemagicamente densa, casi hostil para
mi escaso saber, por su parte los conceptos programacionales con Scheme solo los
entiendo a nivel superficial, es decir, podria explicar de que van, pero no
ponerlo en nada practico, ademas han dejado de aparecer fraces esotericas.&lt;/p&gt;

&lt;p&gt;Con el proposito de enmendar uno de estos dilemas (el de la programacion, por su
puesto), me plante comenzar un port del raptor (si, otro mas) al Scheme, mas,
pronto me di cuenta que habia olvidado siquiera como definir una variable, una
funcion y una l-a-a-m-m-b-d-a-a (que raro suena), oohh, que dilema –dijo
interiormente nasciiboy&lt;/p&gt;

&lt;p&gt;Tres escenarios se plantaron hacia mi (luego de ver con detalle el temario
restante del SICP)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mandar la traduccion a la mierda y desaparecer de intenné&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Buscar otro libro de Scheme&amp;hellip; que seguramente tambien requiera
traduccion&amp;hellip; (ya habia dado un primer paso antes de pasar a la suguiente opcion)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Crusarme por casualidad con el libro estraño de racket y ver de que iba y la
razon de habero metido en &amp;ldquo;los recursos&amp;rdquo; de Scheme&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De la opcion 2 tenia en reserva los &amp;ldquo;The Little Schemer&amp;rdquo;, tras una revision
preliminar, quedaron descartados, por fortuna hace un par de meses aparecio una
compilacion de cosas de lisp (incluido scheme, prolog y haskell) que traia un
libro apto para su servidor &lt;em&gt;Teach Yourself Scheme in Fixnum Days&lt;/em&gt;. Para aun
mas sorpresa es de &amp;ldquo;Codigo Visible&amp;rdquo; o algo asi, tiene &lt;a href=&#34;https://github.com/ds26gte/tyscheme&#34;&gt;un repo&lt;/a&gt; en github,
ademas de una version online (seccionizada por paginas), escrita en tex y por lo
que vi, de facil adaptacion a otros formatos&lt;/p&gt;

&lt;p&gt;Pero la ganadora, amenos por ahora es la opcion 3: abrir el libro con el simbolo
lambda (no, no &lt;strong&gt;↦&lt;/strong&gt;) &lt;strong&gt;λ&lt;/strong&gt;, dedicado a
rocket &lt;a href=&#34;http://aliamondano-eo.wikidot.com/racket-5&#34;&gt;&lt;em&gt;Programando con Racket 5&lt;/em&gt;&lt;/a&gt;
y distribuido bajo licencia Creative Commons Attribution-Noncommercial-Share
Alike 3.0.&lt;/p&gt;

&lt;p&gt;Si tienen efectivo, comprarle un libro o darle dinero&lt;/p&gt;

&lt;p&gt;&amp;hellip; luego de haber pasado por la &amp;ldquo;Introduccion a emacs lisp&amp;rdquo;, &amp;ldquo;Land Of Lisp&amp;rdquo;
(que mecanografie y traduje hasta el 20%) y un truncado intento por
mecanografiar &amp;ldquo;ANSI Common Lisp&amp;rdquo;, la unica conclusion optenida es que la
trancripcion y traduccion no son metodos validos para aprender otro lenguaje, a
programar o a escribir &amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;interpretes&#34;&gt;interpretes&lt;/h2&gt;

&lt;p&gt;Dejando de lado la charla anterior, sobre libros que no he leido&amp;hellip; pero que
cuando lees y esperas &amp;ldquo;dominarlos&amp;rdquo; debes poner en practica sus enseñansas, les dejo una
reducida lista de los interpretes de Scheme que he podido catar.&lt;/p&gt;

&lt;p&gt;(para lisp razo, ir con clisp)&lt;/p&gt;

&lt;h3 id=&#34;guile&#34;&gt;guile&lt;/h3&gt;

&lt;p&gt;Pagina Oficial: &lt;a href=&#34;http://www.gnu.org/software/guile&#34;&gt;http://www.gnu.org/software/guile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Ver lo que le han hecho a la pagina de Guile y otras tantas del &lt;em&gt;proyecto GNU&lt;/em&gt;,
si dan ganas de darles dinero o comprarles lo que sea que vendan)&lt;/p&gt;

&lt;p&gt;Freidora 25, que es lo que estoy usando trae la version 2.0, de los tres
interpretes es el menos amigable, no viene con atajos de teclado, la entrada y
borrado se limitan a escribir y retroceso, sin historial ni naaaa, teniendo el
proyecto GNU una de las librerias mas utilizadas para estos menesteres, es aun
mas incomprensible&lt;/p&gt;

&lt;h3 id=&#34;kawa&#34;&gt;kawa&lt;/h3&gt;

&lt;p&gt;Pagina Oficial: &lt;a href=&#34;https://www.gnu.org/software/kawa/index.html&#34;&gt;https://www.gnu.org/software/kawa/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chan, chan, chan, (insente aqui el rugido de godzilla). Joder, este interprete
aparecio en el repositorio, luego de un &lt;code&gt;search&lt;/code&gt; y hasta el momento es el que
mas habia utilizado (que realmente es poco) y tambien miembro de proyecto GNU
y&amp;hellip; corre sobre Java y&amp;hellip; tiene todas las comodidades que se esperan de un
interprete de linea de comandos: historial y edicion&lt;/p&gt;

&lt;p&gt;Si, si lo encuentran probar&lt;/p&gt;

&lt;h3 id=&#34;racket&#34;&gt;racket&lt;/h3&gt;

&lt;p&gt;Pagina Oficial: &lt;a href=&#34;https://racket-lang.org/&#34;&gt;https://racket-lang.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La cleptomania de libros electronicos (ja, que raro suena
&amp;ldquo;e-l-e-c-t-r-o-n-i-c-o-s&amp;rdquo;) me hiso (no) conocer este
interprete/lenguaje/dialecto de lisp/scheme, que segun el libro &amp;ldquo;programando con
Racket 5&amp;rdquo; (antes mencionado y enlazado) contiene en sus entrañas todo lo
necesario para correr scheme.&lt;/p&gt;

&lt;p&gt;Este no lo encontre en los repos, asi que debe descargarse
desde
&lt;a href=&#34;https://download.racket-lang.org/racket-6-10-x86_64-linux-sh.html&#34;&gt;su web&lt;/a&gt;.
&lt;strong&gt;!!!Cuidado!!!&lt;/strong&gt;, con seguir alguno de los enlaces que hay aparecen
directamente pues en el momento de escribir esto (version 6.10) el contenido es
un script bash de 118M, al seguirlo con firefox, se colgo un rato, y al abrirlo
con el &lt;code&gt;less&lt;/code&gt; crashearon todos los &lt;code&gt;tilix&lt;/code&gt; en ejecucion (en masa), la causa? en
sus entrañas contiene un tar &amp;ldquo;enbebido&amp;rdquo; (probablemente lo mas raro que me he
topado, pues no esta en base64) asi que en lugar de seguir el enlace darle con el
boton derecho y &amp;ldquo;copiar la ruta de enlace&amp;rdquo;, ir directamente a un terminal y
conseguirlo con un &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luego darle permisos de ejecucion al &lt;code&gt;*.sh&lt;/code&gt;, ejecutar y seguir las
intrucciones. Para istalarlo en el sistema, ejecutarlo como root, contestar
&lt;code&gt;&amp;quot;yes&amp;quot;&lt;/code&gt;, luego enter, enter, &amp;hellip;, enter. En caso contrario ejecutar como usuario
de a pie y leer lo que pide. En caso de error, leer donde coloco el binario
&lt;code&gt;racket-uninstall&lt;/code&gt; y ejecutarlo&lt;/p&gt;

&lt;p&gt;Ademas del interprete, se instala un compilador, un IDE y otras cosas que aun
desconosco&lt;/p&gt;

&lt;p&gt;El interprete en si, esta mas cerca de la experiencia de kawa, pero no incluye
todos los &amp;ldquo;atajos&amp;rdquo; de edicion.&lt;/p&gt;

&lt;p&gt;happy l-a-m-m-m-m-m-b-d-a-s-s-s-s-s-s-s-s!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raptor VS Mundo</title>
      <link>https://nasciiboy.github.io/prog/raptorvsworld-ii/</link>
      <pubDate>Sat, 19 Aug 2017 14:20:56 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/raptorvsworld-ii/</guid>
      <description>

&lt;p&gt;(Ya que la forma en que presenta github los readme&amp;rsquo;s no es apropiada para una
extensa tabla, he agregado la comparativa como una pagina (oculta e
independentista) del blog: &lt;a href=&#34;https://nasciiboy.github.io/raptorVSworld/&#34;&gt;aqui&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Hace tiempo que no actualizaba la &lt;strong&gt;&amp;ldquo;Performance comparison of regular
expression engines&amp;rdquo;&lt;/strong&gt;, una prueba que tome prestada de &lt;em&gt;dark100&lt;/em&gt; (nick de
sourceforge) so-pretexto de poner a prueba la version en Go de mi motor pueril
de expresiones regulares (alias Recursive Regexp Raptor), al cual profeso apego,
alegria y frustracion por el tiempo inmensurable que le he invertido.&lt;/p&gt;

&lt;p&gt;Una cosa que me incomodaba del codigo preexistente, es que las pruebas estaban
centralizadas en un unico fichero en C que aglutinaba todos los motores y
pruebas, y al no tener C &amp;ldquo;namespaces&amp;rdquo;, tenia conflictos con la version 3 y 4 de
la libreria, ademas de limitar los lenguajes que podian participar en la prueba
solo a C y C++.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/Computer-Guy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como pues organizar el asunto para incluir las pruebas? deberian tener un
&amp;ldquo;formato&amp;rdquo; unificado para aceptar datos de entrada y entregar datos de salida de
igual forma, como la unica manera que conosco de enviar informacion a &amp;ldquo;cosas&amp;rdquo; (en
C, C++ y Go) es por medio de argumentos, pues eso hice, proponiendo la interfaz
generica para cada concursante asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./concursante sujeto-de-pruebas ciclos prueba-1 prueba-2 ... prueba-n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;em&gt;sujeto-de-pruebas&lt;/em&gt; son los datos objeto de las pruebas, en este caso
y tratando de machacar a los motores de expresiones regulares, un archivo de
20MB de texto puro y duro en ascii con formato utf8 al estilo unix, es decir con
saltos &lt;code&gt;\n&lt;/code&gt; que es la unica forma decente de indicar un salto de linea (que le
den por culo al resto de formatos de codificacion)&lt;/p&gt;

&lt;p&gt;una vez echo esto, como demonios llamar e identificar las pruebas, te podras
preguntar, pues llamando a todas las pruebas &lt;code&gt;bin.syntaxis.concursante&lt;/code&gt; con un script
de bash, me respondi. Donde &lt;code&gt;syntaxis&lt;/code&gt; denota el estilo, pues esta la sintaxis
&amp;ldquo;estandar&amp;rdquo; de expresiones regulares (que es algo asi como el estilo perl
simplificado) y por el otro lado tenia &lt;em&gt;mi&lt;/em&gt; sintaxis comoda con la que escribi
el raptor, ademas que, existia la posivilidad que algun motor incluido o a
incluir, tubiera su sintaxis propia.&lt;/p&gt;

&lt;p&gt;Con bash, poco me he puesto, lo encontre lioso, limitado y lento, asi que
obtendria a los concursantes con un &lt;code&gt;ls&lt;/code&gt; y luego haria un bucle sobre el
resultado pasando el nombre del archivo de pruebas, el numero de ciclos y las
pruebas en si. OohHH, como demonios pasar pruebas que tiene la sistaxis de
cadenas de C, con bash? respuesta corta luego varios intentos, pruebas y una
busqueda: &lt;code&gt;$&#39;cadena-formateada-estilo-c&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dudas tenia, acerca de como se enviaban internamente los parametros desde el
interprete, hasta el programa y como comunicarlos entre si. Por esta razon,
decidi en enviar solo el nombre del fichero sobre el cual efectuar las pruebas y
que cada programa se las arreglara para cargarlo, en lugar de enviar un
parametro de 20MB.&lt;/p&gt;

&lt;p&gt;Segundo problema, como gestionar los resultados? la otra cosa que se hacer mas
en C y Go es escribir en ficheros, lo cuales se llamarian
&lt;code&gt;result.syntaxis.concursante&lt;/code&gt;, siguiendo el estilo anterior, asi el programa que
se encargara de examinar los dator sabria quien y con que sintaxis se hizo cada
resultado. El fichero en si, esta formateado como lineas con el formato&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tiempo-en-ms coincidencias prueba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nada que explicar, solo la prueba, que es la exprecion aplicada, pero si esta
contiene saltos de lineas, tabuladores y otros signos raros no joderian el
resultado? Si, antes de escribir al fichero deben ser &amp;ldquo;normalizarlos&amp;rdquo;, je, que
ironico, el problema inverso a enviar los parametros&amp;hellip;&lt;/p&gt;

&lt;p&gt;Tercer dilema, Como compilar las pruebas? con otro script de bash que encuentra
y ejecuta los ficheros con el formato &lt;code&gt;compile.concursante.sh&lt;/code&gt;, ya cada
&amp;ldquo;compile&amp;rdquo; sabra como hacer sus cosas para generar su binario. Por ejemplo, para
las librerias regex en C y C++, se limitar a invocar un makefile, y para los
programas en Go, van al archivo fuente, lo compilan con &lt;code&gt;go build&lt;/code&gt; y mueven el
binario al directorio principal&lt;/p&gt;

&lt;p&gt;El ultimo problema, Como gestionar la informacion resultante? pues leer cada
fichero &lt;code&gt;result.*&lt;/code&gt;, cargar en un arreglo cada uno &amp;ldquo;por lineas&amp;rdquo;, optener una
muestra del las pruebas utilizadas por su sintaxis, comprobar que cada fichero
tiene el mismo numero de pruebas para &amp;ldquo;emparejarlas&amp;rdquo; e iterar por cada linea en
cada fichero mientras se construlle una tabla en html&lt;/p&gt;

&lt;p&gt;optener un listado de ficheros en el directorio con bash, sencillo es, con C
complicado y no portable, con Go intermedio. Como para los ultimos 2 tendria que hacer una
seleccion adicional en busca de los nombres correspondientes a las prubas,
decidi enviar el nombre de las pruebas como parametros al programa encargado de
generar la tabla.&lt;/p&gt;

&lt;p&gt;Bash que es practicamente un desconocido para mi, no era ni de cerca una
alternativa, utilizar awk era una posibilidad, pero solo me he puesto con el lo
suficiente para saber que podria hacerse. Luego intente con C, pero abandone
pronto&amp;hellip; Cuanto daño hacen las comodidades modernas&amp;hellip; en C nunca me acostumbre a
pedirle memoria al sistema y liberarla despues.&lt;/p&gt;

&lt;p&gt;Asi que el encargado de analizar los resultados, escrito en Go esta y
el script en bash que ejecuta las pruebas le envia cuales son estos resultados&lt;/p&gt;

&lt;p&gt;Un problema que deberia solucionar en proximas versiones, es advertir que el
resultado se coloca en un fichero llamado &lt;code&gt;table&lt;/code&gt; si todo va bien, y que antes
de correr las pruebas se eliminan todas los ficheros &lt;code&gt;result.*&lt;/code&gt;, por que cada
programa en C, se limita a agregar lineas al final de estos. Almenos un triste
&lt;code&gt;echo &#39;all ok, see &amp;quot;table&amp;quot;&#39;&lt;/code&gt; o un &lt;code&gt;cat&lt;/code&gt; al resultado&lt;/p&gt;

&lt;p&gt;comentar que cuando un motor no es capas de realizar una prueba, deberia colocar
como linea de resultado &lt;code&gt;&amp;quot;---&amp;quot;&lt;/code&gt; y/o ser invocado con &lt;code&gt;&amp;quot;---&amp;quot;&lt;/code&gt;, con el fin de
preservar la &amp;ldquo;paridad&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;extra&#34;&gt;Extra&lt;/h2&gt;

&lt;p&gt;Hu, nunca me senti bien, ni con bash, ni con make, aunque este ultimo es util,
conveniente y poderoso, sin llegar a ser lo criptico que es bash&lt;/p&gt;

&lt;p&gt;En el camino, el reencuentro con C fue duro, olvide muchos &lt;code&gt;;&lt;/code&gt;, parentesis y
formato para declara variables, aunque al final ya habia recupenado algo de
confiansa, pero no la suficiente como para programarme el analizador de los
resultados, me gustaria algun dia analizar esto en profundidad, aunque creo que
me quedare un largo periodo con Go, quiza regrese si en algun momento escribo un
manual para hacer videojuegos o en un lejano futuro agrego un lenguaje
customizado a la larga lista de lenguajes que compiten por la supremacia&lt;/p&gt;

&lt;p&gt;aunque todos los participantes (en C) comparten una &amp;ldquo;plantilla&amp;rdquo; comun, hizo
falta un kilo mas de refinamiento, por ejemplo en el manejo de errores, aunque
casi todo esta solventado, en cambio en Go, pase por alto esto en la libreria
estandar de expresiones regulares, y en el generador del resultado, donde (en
parte por cachondo) deje en un mapa las rexp que se utilizan, por lo que la
columna de exmpresiones en la tabla se ordena al &amp;ldquo;azar&amp;rdquo;&lt;/p&gt;

&lt;p&gt;de momento conforme con el resustado estoy y no tengo prisa por modificarlo en
el futuro cercano, mucho tiempo y dedicacion requiere para hacerlo mas &amp;ldquo;pro&amp;rdquo;,
como de bash y make, no controlo mucho seguro lo encontraran pobre, se aceptan
&lt;em&gt;pull request&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;el repositorio contaba con una traduccion al español, con lo cual sumaban tres
versiones de lo mismo (readme.hmtl, readme.org y readme-es.org), sumando esto
con las cuatro versiones de la libreria raptor y sus correspondientes dos
readmes, cada uno con una copia de la tabla de resultados y como no es un
proceso que hubiera automatizado, me carge el readme en español, de este repo,
mucho tiempo requeria mantenerlo a mano, deberia recapacitar aceptando las
virtudes de bash&lt;/p&gt;

&lt;p&gt;para finalizar, por el camino encontre varias maneras de hacer un benchmark en
Go, ya lo contare (o no) en otro post, oooohhh como nuevo proyecto la proxima
mision es investigar en las entrañas de la libreria estandar de GO &lt;code&gt;&amp;quot;regexp&amp;quot;&lt;/code&gt; e
incorporar algunos de sus obsenos trucoso para alcanzar una velocidad abrumadora
en texto simple, morir de lentitud en expresiones igualmente simples y ser
estandar en el resto, espero no terminar frustrado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stylus black-translator</title>
      <link>https://nasciiboy.github.io/prog/stylus-black-translator/</link>
      <pubDate>Thu, 27 Jul 2017 00:50:52 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/stylus-black-translator/</guid>
      <description>&lt;p&gt;Si Firefox es mi navegador de confianza, no es solo por que sea software libre y
tenga una &lt;em&gt;fundacion&lt;/em&gt; que le da soporte, tambien lo utilizo por que debido a que
es software libre y lo desarrolla gente decente, su creacion refleja esta
coherencia otorgando un punto fino de manoseo configuratorio mostruoso, no solo
un par de botonsitos deslizables&amp;hellip; pero debido a esta misma apertura y los
plugins que instalo, que en su mayoria son para tener una navegacion &lt;em&gt;humana&lt;/em&gt;,
sin basura y demas, termino por romper una u otra cosa, en particular la
apariencia&lt;/p&gt;

&lt;p&gt;Asi, de vez en cuando borro toda la configuracion del firefox y empiezo de
nuevo&amp;hellip; hasta encontrar el valance entre lo roto y la paz mental, aunque hay
dos (tres con reddit) sitios a los que no puedo evitar acceder, dandoles lo que
piden para funcionar. Uno es yutube y el otro translator, ambos de la (como
diria stallman) malevola compañia guugol&lt;/p&gt;

&lt;p&gt;al momento de escribir esto conviven uBlock Origin, Privacy Badger, NoScript,
Privacy Settings, Self-Destructing Cookies
y &lt;a href=&#34;https://github.com/openstyles/stylus&#34;&gt;&lt;em&gt;Stylus&lt;/em&gt;&lt;/a&gt;, de este ultimo es del que
les vengo a hablar, pues las tecnologias web que ejecutan &amp;ldquo;cosas&amp;rdquo; no son el
unico enemigo al que combato, este generoso cuerpo tambien tiene odio para las
interfaces, casas, ropa y demas objetos con un asqueroso color blanco nuclear&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/black-nil.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;asi que tome
&lt;a href=&#34;https://userstyles.org/styles/114266/google-translate-by-kiwi&#34;&gt;un estilo ya hecho&lt;/a&gt; (si
van a ese link bajar las defensas momentaneamente o no funciona) y
le di forma hasta dejar al traductor de una manera que encuentro agradable&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/black-translator.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;simplemente agregan &lt;a href=&#34;https://github.com/openstyles/stylus&#34;&gt;&lt;em&gt;Stylus&lt;/em&gt;&lt;/a&gt; al
navegador (tambien disponible para chrome y sus spins) van a
&lt;a href=&#34;https://translate.google.com/&#34;&gt;https://translate.google.com/&lt;/a&gt;, le dan al icono de stylus, luego a &lt;em&gt;escribir
estilo para:&lt;/em&gt;, copian y pegan lo siguiente&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* background */

html { background-color: #000; }

#navlink  {
	background-color: #000000 !important;
}

/* header */
#gba { height: 0px; }

.gb_5b {
	background: #000000 !important;
}


#gb#gb a.gb_la {
	color: #167AC6 !important;
}

.gb_Ag { display: none; }

.gb_T .gb_Lg {
    display: none;
}

/*** applications ***/

.gb_ba {
	border-radius: 4px !important;
	border: 1px solid #ffffff !important;
	background: #000000 !important;
}

.gb_Fa,
.gb_Ia  {
	background: #000000 !important;
}

/* colours footer */
#gb a.gb_Fa,
#gb a.gb_Ja {
    color: #167AC6 !important;
}

.gb_ra {
    border: 0px solid rgba(255, 255, 255, 0)!important;
}

#gb#gb a.gb_ka:hover {
    border: 0px solid rgba(255, 255, 255, 0)!important;
}

#gb#gb a.gb_ka, #gb#gb a.gb_la {
    color: #167AC6 !important ;
}

.gb_ra:hover .gb_ka,
.gb_ra:hover .gb_wa {
	background: #3d3d3d !important;
}

/* login button */
.gb_b {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.gb_b:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

/* change icons on top */
.gb_Ea .gb_ga, /* button showing applications */
.gb_hb.gb_ib ,
.gb_1b .gb_ga {
	opacity: 1.0 !important;
	-webkit-filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
	filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
}

/* body */
#gt-apb-main {
	background-color: #000000 !important;
}

body {
	background-color: #000 !important;
	color: white !important;
}

/* interior */
#gt-text-c {
	background-color: #000 !important;
	border: #ffffff !important;
}

#gt-appname {
	color: #167AC6 !important;
}
#gt-appbar {
    position: relative;
    border-bottom: 0px solid #000;
    height: 0px;
    z-index: 1;
    display: none;
    background-color: #000;
}


/* text area left  */
#source {
	background-color: #000000 !important;
	color: #fff !important;
}

#gt-src-wrap {
	border: 1px solid #ffffff;
	background-color: #000000!important;
}

.gt-hl-layer {
	background:  transparent !important;
	border: transparent !important;
}

/* text area right */
#result_box {
	background-color: #000000 !important;
	color: #fff !important;
}

#gt-res-wrap {
	border: 1px solid #ffffff;
	background-color: #000000 !important;
}

#gt-src-tools { display: none; }

/* phrases dictionary */
#gt-pb-tt, #gt-pb-pt {
	color: #167AC6 !important;
}

.gt-related-suggest-message {
	color: #ffffff;
}

.gt-revert-correct-message {
	color: #67fb93;
}

#gt-pb-tb  {
	color: #000000 !important;
}

#gt-pb-tb tr {
	color: #000000 !important;
}

#gt-pb-tb tr:hover {
	color: #000000 !important;
	background-color: #167AC6 !important;
}

#pb-tool {
	color: #ffffff !important;
	background-color: #000 !important;
}

#pb-tb-c {
	background-color: #000 !important;
}

#gt-promo-lr {
    display: none;
}

/* colours left side */
.gt-def-example {
	color: #ffffff !important; /* white */
}

.gt-spell-correct-message {
	color: #239B2D !important; /* green */
}

.translit {
	color: #ffffff !important ; /* white */
}

.gt-ex-text,
.gt-def-row {
	color: #D7A61B !important; /* orange */
}

.gt-c {
	background-color: #000 !important ; /* green */
}

.gt-cd-t {
	background-color: #000 !important ; /* green */
}

.gt-cd-pos {
	color: #FCF4F4 !important; /* light white */
	font-style: italic !important;
}

.gt-cd-cl,
.gt-card-ttl-txt,
.gt-ct-text {
    color: #167AC6 !important; /* light blue */
}

/* colours right side  */
.gt-card-ttl-txt,
.gt-rw-span,
.gt-baf-word-clickable {
	color: #167AC6 !important;
}

.gt-baf-back:hover {
	color: #167AC6 !important;
}

/* change colour icons */
.cd-expand-button,
.trans-pb-button .jfk-button-img,
.gt-hats-icon,
span.check,
input[type=&amp;quot;radio&amp;quot;],
.sm-arrow,
.modal-dialog-title-close,
.jfk-checkbox,
.jfk-button-img,
.goog-flat-menu-button-dropdown,
.goog-toolbar-menu-button-dropdown,
.ita-kd-img,
.ita-kd-arrow,
/*  .ita-kd-checkbox, */
.ita-ppe-pgd,
.ita-ppe-pgu,
.vk-t-btn.vk-sf-cl {
	opacity: 1.0 !important;
	-webkit-filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
	filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
}

.ita-kd-inputtools-div .ita-kd-icon-button,
.goog-toolbar-button, .goog-toolbar-menu-button {
	background: transparent  !important;
	color: white !important;
}

/* languages buttons */
#gt-sl,
#gt-tl,
#anno1,
#anno2,
#clp-btn,
#gt-swap,
#gt-sl-gms,
#gt-tl-gms,
.ita-hwt-backspace,
.ita-hwt-space,
.ita-hwt-enter,
.jfk-button-action,
.jfk-button-standard,
.jfk-button-primary,
.goog-buttonset-default,
.modal-dialog-buttons button {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

#gt-sl:hover,
#gt-tl:hover,
#anno1:hover,
#anno2:hover,
#clp-btn:hover,
#gt-swap:hover,
#gt-sl-gms:hover,
#gt-tl-gms:hover,
.ita-hwt-backspace:hover,
.ita-hwt-space:hover,
.ita-hwt-enter:hover,
.jfk-button-action:hover,
.jfk-button-standard:hover,
.jfk-button-primary:hover,
.goog-buttonset-default:hover,
.modal-dialog-buttons button:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.cd-expand-button {
	color: black !important;
}

#gt-pb-sbt {
	background: #167AC6 !important;
}

.ita-kd-inputtools-div {
	background-color: rgba(255, 255, 255, 0.0) !important;
}

/* checked buttons status */
.jfk-button-checked {
	background-color: #167AC6 !important;
	background-image: none !important;
}

/* keyboard */
.vk-box {
	background: #000000 !important;
	color: white!important;
	border-color: #ffffff !important;
	border-width: 1px  !important;
	border-radius: 4px !important;
}

.vk-btn {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	-moz-background-clip: padding !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.vk-btn:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

/* text on top keyboard */
.vk-t {
	color: #ffffff !important;
}

.ita-kd-dropdown-menu {
	background: #000000 !important;
	border-color: #ffffff !important;
}

.ita-kd-menuitem:hover {
	color: black !important;
	background-color: #167AC6 !important;
}

.ita-kd-menuitem {
	color: white !important;
}

/* languages menu */
.goog-menu {
	background: #000000 !important;
	color: white !important;
	border-color: #ffffff !important;
	border-radius: 4px !important;
}

.goog-menuitem {
  color: white !important;
}

.goog-menuitem-emphasize-highlight {
	background-color: #D7A61B !important; /* orange */
}

#gt-sl-gms-menu .goog-menuitem-group .goog-option-selected,
#gt-tl-gms-menu .goog-menuitem-group .goog-option-selected {
	background-color: #167AC6 !important;
	background-image: none !important;
	font-weight: bold !important;
	color: white !important;
}

.goog-option-selected .goog-menuitem-content {
	color: #ffffff !important;
}

/* footer */
#gt-ft {
  background: #000 !important;
  display: none;
}

#gt-feedback {
	color: #ffffff !important;
}

/* backgrounds */

#navlink,
#gt-appbar {
	background-color: #000000 !important;
}

/* header */
#gba { height: 0px; }

.gb_5b {
	background: #000000 !important;
}


#gb#gb a.gb_la {
	color: #167AC6 !important;
}

.gb_T .gb_og {
    display: none;
}

/*** applications ***/

.gb_ba {
	border-radius: 4px !important;
	border: 1px solid #ffffff !important;
	background: #000000 !important;
}

.gb_Fa,
.gb_Ia  {
	background: #000000 !important;
}

/* colours footer */
#gb a.gb_Fa,
#gb a.gb_Ja {
    color: #167AC6 !important;
}

.gb_ra {
    border: 0px solid rgba(255, 255, 255, 0)!important;
}

#gb#gb a.gb_ka:hover {
    border: 0px solid rgba(255, 255, 255, 0)!important;
}

#gb#gb a.gb_ka, #gb#gb a.gb_la {
    color: #167AC6 !important ;
}

.gb_ra:hover .gb_ka,
.gb_ra:hover .gb_wa {
	background: #3d3d3d !important;
}

/* login button */
.gb_b {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	-moz-background-clip: padding !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.gb_b:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

/* change icons on top */
.gb_Ea .gb_ga, /* button showing applications */
.gb_hb.gb_ib ,
.gb_1b .gb_ga {
	opacity: 1.0 !important;
	-webkit-filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
	filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
}

/* body */
#gt-apb-main {
	background-color: #000000 !important;
}

body {
	background-color: #000 !important;
	color: white !important;
}

/* interior */
#gt-text-c {
	background-color: #000 !important;
	border: #ffffff !important;
}

#gt-appname {
	color: #167AC6 !important;
}
#gt-appbar {
    position: relative;
    border-bottom: 0px solid #000;
    height: 0px;
    z-index: 1;
    display: none;
    background-color: #000;
}


/* text area left  */
#source {
	background-color: #000000 !important;
	color: #fff !important;
}

#gt-src-wrap {
	border: 1px solid #ffffff;
	background-color: #000000!important;
}

.gt-hl-layer {
	background:  transparent !important;
	border: transparent !important;
}

/* text area right */
#result_box {
	background-color: #000000 !important;
	color: #fff !important;
}

#gt-res-wrap {
	border: 1px solid #ffffff;
	background-color: #000000 !important;
}

/* phrases dictionary */
#gt-pb-tt, #gt-pb-pt {
	color: #167AC6 !important;
}

#gt-pb-tb  {
	color: #000000 !important;
}

#gt-pb-tb tr {
	color: #000000 !important;
}

#gt-pb-tb tr:hover {
	color: #000000 !important;
	background-color: #167AC6 !important;
}

#pb-tool {
	color: #ffffff !important;
	background-color: #333230 !important;
}

#pb-tb-c {
	background-color: #333230 !important;
}


/* colours left side */
.gt-def-example {
	color: #ffffff !important; /* white */
}

.gt-spell-correct-message {
	color: #239B2D !important; /* green */
}

.translit {
	color: #ffffff !important ; /* white */
}

.gt-ex-text,
.gt-def-row {
	color: #D7A61B !important; /* orange */
}

.gt-cd-t {
	background-color: #000 !important ; /* green */
}

.gt-cd-t {
	color: #239B2D !important ; /* green */
}

.gt-cd-pos {
	color: #FCF4F4 !important; /* light white */
	font-style: italic !important;
}

.gt-cd-cl,
.gt-card-ttl-txt,
.gt-ct-text {
    color: #167AC6 !important; /* light blue */
}

/* colours right side  */
.gt-card-ttl-txt,
.gt-rw-span,
.gt-baf-word-clickable {
	color: #167AC6 !important;
}

.gt-baf-back:hover {
	color: #167AC6 !important;
}

/* change colour icons */
.cd-expand-button,
.trans-pb-button .jfk-button-img,
.gt-hats-icon,
span.check,
input[type=&amp;quot;radio&amp;quot;],
.sm-arrow,
.modal-dialog-title-close,
.jfk-checkbox,
.jfk-button-img,
.goog-flat-menu-button-dropdown,
.goog-toolbar-menu-button-dropdown,
.ita-kd-img,
.ita-kd-arrow,
/*  .ita-kd-checkbox, */
.ita-ppe-pgd,
.ita-ppe-pgu,
.vk-t-btn.vk-sf-cl {
	opacity: 1.0 !important;
	-webkit-filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
	filter: invert(100%) hue-rotate(130deg) contrast(500%) saturate(300%) brightness(200%);
}

.ita-kd-inputtools-div .ita-kd-icon-button,
.goog-toolbar-button, .goog-toolbar-menu-button {
	background: transparent  !important;
	color: white !important;
}

/* languages buttons */
#gt-sl,
#gt-tl,
#anno1,
#anno2,
#clp-btn,
#gt-swap,
#gt-sl-gms,
#gt-tl-gms,
.ita-hwt-backspace,
.ita-hwt-space,
.ita-hwt-enter,
.jfk-button-action,
.jfk-button-standard,
.jfk-button-primary,
.goog-buttonset-default,
.modal-dialog-buttons button {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

#gt-sl:hover,
#gt-tl:hover,
#anno1:hover,
#anno2:hover,
#clp-btn:hover,
#gt-swap:hover,
#gt-sl-gms:hover,
#gt-tl-gms:hover,
.ita-hwt-backspace:hover,
.ita-hwt-space:hover,
.ita-hwt-enter:hover,
.jfk-button-action:hover,
.jfk-button-standard:hover,
.jfk-button-primary:hover,
.goog-buttonset-default:hover,
.modal-dialog-buttons button:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.cd-expand-button {
	color: black !important;
}

#gt-pb-sbt {
	background: #167AC6 !important;
}

.ita-kd-inputtools-div {
	background-color: rgba(255, 255, 255, 0.0) !important;
}

/* checked buttons status */
.jfk-button-checked {
	background-color: #167AC6 !important;
	background-image: none !important;
}

/* keyboard */
.vk-box {
	background: #000000 !important;
	color: white!important;
	border-color: #ffffff !important;
	border-width: 1px  !important;
	border-radius: 4px !important;
}

.vk-btn {
	color: #ffffff !important;
	border-radius: 4px !important;
	border: 1px solid #141414 !important;
	background-image: linear-gradient(#3d3d3d, #2d2d2d, #1a1a1a) !important;
	margin: 0px !important;
	margin-top: 0px !important;
	margin-bottom: 1px !important;
	-moz-background-clip: padding !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

.vk-btn:hover {
	color: #ffffff !important;
	background: -moz-linear-gradient(to bottom, #00cfeb, #006471, #006471) !important;
	border: 1px solid #141414 !important;
	text-shadow: 0px -1px rgba(0, 0, 0, 0.51153) !important;
}

/* text on top keyboard */
.vk-t {
	color: #ffffff !important;
}

.ita-kd-dropdown-menu {
	background: #000000 !important;
	border-color: #ffffff !important;
}

.ita-kd-menuitem:hover {
	color: black !important;
	background-color: #167AC6 !important;
}

.ita-kd-menuitem {
	color: white !important;
}

/* languages menu */
.goog-menu {
	background: #000000 !important;
	color: white !important;
	border-color: #ffffff !important;
	border-radius: 4px !important;
}

.goog-menuitem {
  color: white !important;
}

.goog-menuitem-emphasize-highlight {
	background-color: #D7A61B !important; /* orange */
}

#gt-sl-gms-menu .goog-menuitem-group .goog-option-selected,
#gt-tl-gms-menu .goog-menuitem-group .goog-option-selected {
	background-color: #167AC6 !important;
	background-image: none !important;
	font-weight: bold !important;
	color: white !important;
}

.goog-option-selected .goog-menuitem-content {
	color: #ffffff !important;
}

/* footer */
#gt-ft {
  background: #000 !important;
  display: none;
}

#gt-feedback {
	color: #ffffff !important;
}

.e_md #gt-ft-res {
    padding: 0 0px;
}

#gt-ft-res {
    line-height: 0px;
    background-color: #000;
    display: none;
}

/* end google translate */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;le ponen un nombre y le dan a guardar&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;nota:&lt;/em&gt; con la extecion &lt;em&gt;Privacy Settings&lt;/em&gt; al &amp;ldquo;tope&amp;rdquo;, stylus deja de ser
accesible, aunque sigue funcionando, poner las configuraciones por defecto
mientras realizan la edicion)&lt;/p&gt;

&lt;p&gt;por si quieren manosear un poco el navegador: &lt;a href=&#34;https://lignux.com/hardening-de-firefoxiceweasel-y-tecnicas-de-ofuscacion-de-fingerprint/&#34;&gt;Hardening de Firefox/Iceweasel y técnicas de ofuscación de fingerprint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;felices trazos!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/contruct.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por cierto, de forma casi inadvertida y estupida, mientras escribia un tema para
un sitio que recopilara juegos foss de love2d (por aquello de tener ejemplos de
estudio interesantes) me carge el tema del blog y como no tenia un respaldo, por
que nunca lo subi al repo, por que aun no controlaba (ni controlo) lo suficiente
de hugo&lt;/p&gt;

&lt;p&gt;Temporalmente utilizare robust-theme (de fabrica), que fue en el que me base en
un principio, quitandole mierda-script y cosas externas, asi que bloquear js si
es que por confianza o curiosadad le dieron privilegios a esta direccion, pronto
hare un tema nuevo, digno, reformado y en abismal color negro, jo, jo, jo.
(disculpar si momentaneamente se rompe el feed, enlaces o algo asi)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>regexp4-go (dia cero)</title>
      <link>https://nasciiboy.github.io/prog/regexp4-go/</link>
      <pubDate>Sat, 15 Jul 2017 21:36:03 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/regexp4-go/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/regexp4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;regexp4&lt;/strong&gt; es un &amp;ldquo;motor&amp;rdquo; de expresiones regulares de la familia de los motores
regulares &lt;em&gt;Recursive Regexp Raptor&lt;/em&gt;, o expresado de otra forma: una libreria de
expresiones regulares hecha desde cero, reinventando la rueda (o no) de la
manera (que para mi es la) mas simple posible. sin arboles de evaluacion, ni
liberacion de memoria, ni cosas raras o esa es la intencion, almenos de las
versiones en &lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cual es entonces la necesidad de que exista esta version en go, podrias
preguntar. Pues segun mi escasa educacion programacional, la simplesa de los
motores raptor es tal, que pueden implementarse en cualquier lenguaje sin recurrir
a ninguna caracteristica no implementada en el lenguaje en si, es decir, sin
recurrir a ninguna libreria, incluyendo a las librerias estandar.&lt;/p&gt;

&lt;p&gt;Siguiendo esta creencia (quiza sin fundamentos) y a modo de prueba de las
caracteristicas de un lenguaje de programacion supongo que hare una costumbre
programar un raptor en cada ocacion que pueda. Ademas el modelo raptor aunque
bastante desarrollado no es perfecto, asi pues, con cada nuevo concepto
aprendido, logro profundizar un poco en busca de una mejor implementacion o el
incremento de caracteristicas segun las facilidades que otorgue el lenguaje&lt;/p&gt;

&lt;p&gt;existen dos versiones de la libreria las regexp3 donde a cada iteracion
valiendose de la recursividad, la expresion regular se convierte en
instrucciones que pueden evaluarse. En las regexp4 en lugar de interpretar la
regexp a cada paso primero se &amp;ldquo;compila&amp;rdquo;&amp;hellip; lo que la hace comporativamente mas
eficiente&lt;/p&gt;

&lt;p&gt;la libreria parte de la version en C y la sintaxis es compatible con esta
version en Go, pero por algunas facilidades que proporciona nativamente este
ultimo lenguaje y por su orientacion a objetos esta no tiene limitacion (que no
sean de hardware) del numero de capturas, la longitud y complejidad de la
expresion y ademas es concurrentemente segura&lt;/p&gt;

&lt;p&gt;bueno, bueno, vamos con los detalles morbosos&amp;hellip; esta version adapta sin mucho
empeño la regexp3 (go) a la version 4. Fueron necesarios varios dias con poco
enfoque donde los momentos de lucides escaceaban, primero aparecio un bicho por no
incrementar un indice del que tarde dos &lt;s&gt;dias&lt;/s&gt; sesiones en darme cuenta y
luego por otras 4 seciones las pruebas que contenian &amp;ldquo;conjuntos&amp;rdquo; (&lt;code&gt;[...]&lt;/code&gt;) se
resistian a funcionar, jo, el problema fue no colocar las constantes correctas
dentro de un &lt;code&gt;switch&lt;/code&gt;, je, por un momento me planteee hacer pruebas de cada
una de las funciones hasta asegurar que todas hicieran lo que se suponia deberia
de hacer&amp;hellip; lo cual no es trivial&lt;/p&gt;

&lt;p&gt;aunque en apariencia sencilla, cada uno de los componentes esta obscuramente
relacionado, y debe realizar su tarea en perfecta armonia con los demas, por
ello es necesario ponerse en serio con el asunto, y ya que esto escapaba un poco
de mi control, solo me limite a ejecutar las pruebas preexistentes y tambien a
comprobar el funcionamiento con &lt;em&gt;morg&lt;/em&gt;, asi pues una vez superadas las pruebas,
pese a no estar muy seguro de como &amp;ldquo;interactuava&amp;rdquo; la maquinaria, confie en las
muchas horas invertidas en la version en C y otras tantas en regexp3 en Go,
luego subi el repositorio a modo de respaldo&lt;/p&gt;

&lt;p&gt;Como antes mencione la sistaxis de la regexp es uniforme en todas las versiones,
ademas regexp3 (Go) y la presente compartiran la misma &amp;ldquo;&lt;em&gt;API&lt;/em&gt;&amp;rdquo;, mas esta version
sera extendida con un par de funciones mas (tentativamente) &lt;code&gt;Compile&lt;/code&gt; y
&lt;code&gt;TextMatch&lt;/code&gt; (o algo asi), aprovechando las capacidades de &amp;ldquo;compilacion&amp;rdquo; (tambien
programado de cero) en una forma singular a la que nombre &amp;ldquo;&lt;em&gt;tabla de
instrucciones&lt;/em&gt;&amp;rdquo; y en esta ocacion pretenciosamente las instrucciones de la tabla
lleban el prefijo &lt;code&gt;asm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;en fin, &lt;a href=&#34;https://github.com/nasciiboy/regexp4/&#34;&gt;aqui&lt;/a&gt; encontraran el
repositorio, los &lt;em&gt;readmes&lt;/em&gt; son un copia y pega de la version regexp3 cambiando
el 3 por 4&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webeloper – El navegador web</title>
      <link>https://nasciiboy.github.io/prog/webeloper/</link>
      <pubDate>Mon, 10 Jul 2017 23:03:56 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/webeloper/</guid>
      <description>

&lt;p&gt;joder, que gracioso, ho, ho, ho, veamos si existe la remota posibiidad que nadie
utilize este (en mi mente) despectivo &amp;ldquo;titulo&amp;rdquo;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; no &amp;hellip; bueno, que mas da, no se puede ser &amp;ldquo;innovador&amp;rdquo; todo el tiempo&lt;/p&gt;

&lt;p&gt;hola, que tal, esta entrada trata de algunos de los navegadores web que he utilizado y
el por que, o esa es la idea&lt;/p&gt;

&lt;h2 id=&#34;navegadores-por-terminal&#34;&gt;Navegadores por terminal&lt;/h2&gt;

&lt;p&gt;Luego que comienza a agradarte la terminal, y con algo de nostalgia sintetica,
dices: &amp;ldquo;veamos eso del internet en la terminal, que igual va mejor que el
firefox en mi maquina agonizante con 500 megas de ram&amp;rdquo;, y asi sin demasiado
esfuerso aqui esta la lista de navegadores de terminal que en algun momento
llege a utilizar (una a dos veces):&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;command&#34; &gt;w3m&lt;/code&gt;, &lt;code class=&#34;command&#34; &gt;lynx&lt;/code&gt;, &lt;code
class=&#34;command&#34; &gt;links&lt;/code&gt; y &lt;code class=&#34;command&#34; &gt;elinks&lt;/code&gt; (en la
siguiente imagen aparecen de izquierda a derecha en ese orden)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/www.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;tambien &lt;em&gt;eww&lt;/em&gt;, que viene incluido en emacs&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/www-eww.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;si bien es el mas lento y apenas el menos feo (w3m gana la contienda), por el
simple hecho de venir en emacs no tiene comparacion en esta singular categoria,
ademas, en modo grafico pueden verse imagenes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/www-eww-img.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;es cierto que a los navegadores en modo texto el tiempo no los ha tratado bien,
pero las cookies, flash, drms, javascript y el contenido multimedia no son los
unicos culpables de su decadencia, pues en su mayor parte se debe al propio
lenguaje de la red &lt;strong&gt;HTML&lt;/strong&gt;, o si! cuando cualquier hijo de vecino crea una
pagina amontonando etiqueta, sobre etiqueta sobre etiqueta, sin tener mucha
idea, hasta que optiene la representacion visual que desea, como esperan que
exista un programa que averigue las intenciones del &amp;ldquo;webeloper&amp;rdquo;? sigue siquiera
la mitad de la web una esquema estructural rigido para almacenar la informacion
y luego no se, hacer algo util con ella como optener solo el articulo principal?
o cualquier cosa imaginable pasa y luego a base de apaños en el otro gran mal
del mundo &lt;strong&gt;CSS&lt;/strong&gt; se logra aparentar que las cosas estan bien hechas? digo, por
que si es necesario relegar todo a frameworks javascript para visualizar una
mierda pagina con &lt;em&gt;contenido estatico&lt;/em&gt; que no tiene necedidad alguna de js, mas
que recolectar datos, poner anuncios y mostrar estadisticas, es mejor que la
humanidad se extinga&amp;hellip;&lt;/p&gt;

&lt;p&gt;haaaaaaa!! cuan odioso es css, por que tiene tantos parametros para hacer la
misma cosa, da la impresion que de ser un juego de azar&amp;hellip; intentas una
propiedad y no funciona, pruebas con otra y se rompe, vas por la tercer opcion
y&amp;hellip; no funciona, prebas con la ultima etiqueta recien salida del &amp;ldquo;estandar&amp;rdquo;
y&amp;hellip; por fin (hay una etiqueta no ambigua para hacer cosas tan simples como
centrar el contenido de cualquier elemento? que el margen sea un margen y el
padding un padding y los porcentaje y em&amp;rsquo;s no se saboteen entre si?)&lt;/p&gt;

&lt;p&gt;cuenta asta dies, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0&amp;hellip; je, era alreves pero no
importa&lt;/p&gt;

&lt;p&gt;de entre los navegadores de texto ignorando a eww por su implicacion
con emacs, los mas potables son &lt;em&gt;links&lt;/em&gt; y su sombra &lt;em&gt;elinks&lt;/em&gt; que no solo
colorean las cosas, tambien tienen la decencia de dejar una agradable
indentacion a la izquierda y menus graficos.&lt;/p&gt;

&lt;h2 id=&#34;navegadores-graficos&#34;&gt;Navegadores Graficos&lt;/h2&gt;

&lt;p&gt;Y luego pasas de tu viejo pentium 4 a un flamante celeron con 8GB de ram y el
firefox sigue siendo lento, pero ahora consume mas ram que todo el sistema y sus
aplicaciones en conjunto&amp;hellip; y las paginas se niegan a visualizarse si no vas
dispuesto a aceptar cualquier mierda inecesaria: fuentes de google, analiticas
con js, imagenes y videos que provienen de un sitio que necesita js, cookies,
los mensajes de las cookies, acortaderes de enlaces y publicidad&lt;/p&gt;

&lt;p&gt;Reflexionas un poco y te dices no, no quiero toda esa basura, ni que mi
navegador delate todo lo que hago, utilizas firefox, (o el exitinto iceweacel o
icecat de GNU (este sin exteciones)) lo vitaminas con noScript, Privacy Bagner
uBlock Origin y cualquier otra extecion de software libre (porque no confias en
nada si no te dan el codigo), y ves lo que puedes y en casos extremos como ver
videos te comes uno que otro js&lt;/p&gt;

&lt;p&gt;asi pues, solo con firefox complementado con feeds (que no necesitan porquerias
extras para darte lo unico que te interesa) y eww sobrevives lo mas fiel a tus
creencias&amp;hellip; hasta que necesitas abrir un fichero html gordo, por ejemplo un libro
completo en un solo html que tarda casi un minuto en cargar, al que por mera
casualidad tienes la necesidad de modificarle el css y entre recarga y recarga
se pasan preciosos momentos&lt;/p&gt;

&lt;p&gt;asi pues, que mas hay por hay fuera? en que otro navegador podria confiar?&lt;/p&gt;

&lt;p&gt;chrome? no,&lt;/p&gt;

&lt;p&gt;chromium? casi es lo mismo que chrome&lt;/p&gt;

&lt;p&gt;un &lt;a href=&#34;https://en.wikipedia.org/wiki/Chromium_(web_browser)#Other_browsers_based_on_Chromium&#34;&gt;espin&lt;/a&gt; de chromium sin mierda? bueno podria ser
veamos, mmm, derivados exclusivos para las manzanas, derivados exclusivos para
las ventasas, forks con codigo cerrado&amp;hellip; hey! aqui hay uno que parece prometodor
&lt;a href=&#34;https://www.brave.com/&#34;&gt;&lt;em&gt;brave&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/brave.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;dicen que son &amp;ldquo;open source&amp;rdquo;, mucho de seguridad, comunidad y pagos(?), veamos
tienen una compilacion para freidora&amp;hellip; parece decente, algo modernoso&lt;/p&gt;

&lt;p&gt;han borrado todo contacto con google y su google play, morbosamente su unica
extencion disponible es activar el flash? que dudoso, mucho de seguridad y
opciones por desactivar&lt;/p&gt;

&lt;p&gt;no se, da un aire de &lt;em&gt;producto&lt;/em&gt; para un nicho concreto, quiza no busco un
producto, segun esta desarrollado por ex-firefoxes, pero no me termina de
convencer, ademas no puede cambiarse de color la barra de direcciones y es
molesta, por otra parte, a diferencia de firefox carga un html gordo sin demora
&lt;em&gt;siempre y cuando&lt;/em&gt; no le metas js (&lt;em&gt;mathjax&lt;/em&gt;) o el rendimento cae en picada&lt;/p&gt;

&lt;p&gt;haber aca hay otro derivado &lt;a href=&#34;https://iridiumbrowser.de/downloads/linux.html&#34;&gt;&lt;em&gt;iridium&lt;/em&gt;&lt;/a&gt;.
Este no parece un producto, y la gente que lo lleva a flote dice que tienen
lanzamientos cada que pueden por que no tienen gente/recursos suficientes
(hooooooo esto si es un desarrollo de software libre –digo para mis interiores),
ademas tiene repositorios para debian (y derivados), open suse y freidora&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf config-manager --add-repo https://dl.iridiumbrowser.de/fedora_25/iridium-browser.repo
dnf install iridium-browser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;la instalacion corrio sin ninguna complicacion, al igual que brave tambien carga
hachetemeeles gordos sin despeinarse&lt;/p&gt;

&lt;p&gt;como inconvenientes diria que tiene la opcion de iniciar secion con gogle y la
dudosa capacidad de instalar extenciones de google play, aunque tambien se
pueden instalar cosas directo del codigo fuente&lt;/p&gt;

&lt;p&gt;le instale ScriptSafe en modo paranoico, ni js, ni funtes externas,
botones sociales, ni analitics, tambien desactivadas cookies de todo sitio pues
en este navegador no voy a logear con nada (para eso mantrendre firefox), ademas
por cualquier duda tambien privacy bagner, uBlock Origin, un tema obscuro y una
extencion curiosa (GPL3) para sobreescribir los atributos css de las paginas &lt;a href=&#34;https://github.com/openstyles/stylus&#34;&gt;&lt;em&gt;Stylus&lt;/em&gt;&lt;/a&gt;
(disponible tambien en firefox) que tiene cosas un poco turbias con js pero
parece ser confiable&lt;/p&gt;

&lt;p&gt;y asi llego al final de este capitulo slice of life sin sentido donde con tres
navegadors y unas 8 pestañas abiertas consegui el dudoso logro de llegar a los
5GB de ram en uso&lt;/p&gt;

&lt;p&gt;ps: tambien esta midori, pero tienes un navegador igual de lento, poco
configurable, que no esta a la ultima moda en csssssss&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SICP [es] – Guia para Colaboradores</title>
      <link>https://nasciiboy.github.io/prog/sicp-contrib/</link>
      <pubDate>Mon, 10 Jul 2017 17:57:10 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/sicp-contrib/</guid>
      <description>

&lt;p&gt;Bienvenidos los contribuidores a la traduccion No oficial de libro SICP al
español!&lt;/p&gt;

&lt;p&gt;Antes de comenzar, es necesario decir que esta vercion esta formateada en un
lenguaje (experimental) de marcas ligeras llamado &lt;a href=&#34;https://github.com/nasciiboy/morg&#34;&gt;morg&lt;/a&gt;
que busca ser mas sencillo que ningun otro lenguaje para crear documentacion,
mientras mantiene la mayoria de caracteristicas de otros lenguajes de marcas
como xml o los derivados de TeX. Por tanto esta es una de sus primeras pruebas
en el mundo real&lt;/p&gt;

&lt;p&gt;Esta traduccion se realiza por respeto y admiracion al espiritu que habita en la
maquina. Manteniendo ese espiritu la obra esta bajo liciencia CC-SA 4.0 por lo
que se da por hecho que cualquier contribucion a esta se apega a dicha
licencia. Por respeto a las personas, este proyecto no obliga a firmar ningun
CLA, u otro contrato similar&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;

&lt;h2 id=&#34;pasos&#34;&gt;Pasos&lt;/h2&gt;

&lt;p&gt;Este trabajo se encuentra gestionado por el sitema de control de versiones &lt;code&gt;git&lt;/code&gt;,
sobre la plataforma github en la que se realizaran los &amp;ldquo;pull request&amp;rdquo;, sin
embargo si no desea registrarse en dicha plataforma, puede enviar su propuesta
de cambios dentro de un comprimido en formato &lt;em&gt;zip&lt;/em&gt; o &lt;em&gt;tar&lt;/em&gt; al correo
nasciiboy@gmail.com, siendo el unico requisito clonar el repositorio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/nasciiboy/sicp.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;manternerlo actualizado mediante el comando&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;realizar los cambios correspondientes y enviar unicamente dichos cambios&lt;/p&gt;

&lt;p&gt;La via (en github) de &lt;a href=&#34;https://gist.github.com/BCasal/026e4c7f5c71418485c1&#34;&gt;contrubucion&lt;/a&gt; &amp;ldquo;estandar&amp;rdquo; seria&lt;/p&gt;

&lt;p&gt;realizar un fork al repositorio&lt;/p&gt;

&lt;p&gt;Después de tener el repositorio en nuestra cuenta, seleccionar la dirección del
repositorio &amp;ldquo;SSH o HTTP&amp;rdquo; y clonar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/mi-usuario/NombreRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Antes de realizar modificaciones agregar la URL del repositorio original del proyecto:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add upstream https://github.com/nasciiboy/sicp.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y obtener los últimos cambios del repo Original:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull -r upstream master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Crear una Rama. Para crear una rama usar la opción &lt;code&gt;checkout&lt;/code&gt; de git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b mi-rama-con-cambios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Realizar todos los cambios que se desea hacer al proyecto.&lt;/p&gt;

&lt;p&gt;Agregar los archivos y hacer un commit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -a -m &amp;quot;mi commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después de realizar el commit hacer el push hacia nuestro repositorio indicando
la rama que hemos creado.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin mi-rama-con-cambios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dentro de github hacer un Pull Request, Hacer click en &amp;ldquo;Compare &amp;amp; Pull Request&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Si todo está bien, enviar con el botón &amp;ldquo;Send Pull Request&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Esperar que los cambios se revisen, acepten y mezclen en la rama principal&lt;/p&gt;

&lt;h2 id=&#34;formato-de-commits&#34;&gt;Formato de commits&lt;/h2&gt;

&lt;p&gt;sientase libre de formatear sus commits como mejor le paresca!&lt;/p&gt;

&lt;p&gt;&amp;hellip; git, es una herramienta, un mero medio para gestionar el desarrollo de un
proyecto.&lt;/p&gt;

&lt;p&gt;El &amp;ldquo;producto&amp;rdquo; final es el contenido en el directorio principal no el
contenido almacenado en &lt;code&gt;.git&lt;/code&gt;, asi como no se comparte el editor o un
compilador con el que se hace un programa, no se considera que un proyecto
terminado tenga que contener las datos de su programa de control de versiones&lt;/p&gt;

&lt;p&gt;los datos sobre la autoria de sus contribuidores (si es lo que se desea) seran
colocados dentro del fichero &lt;code class=&#34;file&#34;&gt;contrib.txt&lt;/code&gt;, que sera
el registro transmido en la version final de la traduccion&lt;/p&gt;

&lt;h2 id=&#34;organizacion&#34;&gt;Organizacion&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.
├── contrib.txt           // lista de colaboradores
├── img                   // carpeta con imagenes del libro
│   ...
├── howto-es.md           // Como colaborar
├── LICENSE               // Licencia del proyecto
├── README-EN.md          // presentacion del proyecto en ingles
├── README.md             // presentacion del proyecto en español
├── sicp.morg             // fichero &amp;quot;maestro&amp;quot; del libro (ingles)
├── sicp.html             // exportacion del libro (ingles)
├── sicp-es.porg          // fichero &amp;quot;maestro&amp;quot; con la traduccion al español
├── todo.txt              // tareas a realizar
└── worg-data             // carpeta con recursos para la exportacion html
    ├── worg.css          // hoja de estilo
    ├── fonts             // fuentes
    └── img               // imagenes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;la-herramienta-morg&#34;&gt;La herramienta morg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nasciiboy/morg&#34;&gt;morg&lt;/a&gt; es un programa desarrollado en
el lenguaje de programacion Go, para instalarlo primero debe seguir los pasos
de &lt;a href=&#34;https://github.com/nasciiboy/morg/blob/master/howto.md&#34;&gt;esta&lt;/a&gt; guia, o si ya
tiene instalado el lenguaje Go en su sistema, puede optener la herramienta con
el comando&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para actualizar la herramienta a nuevas versiones&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De momento esta herramienta solo ha sido probada en el sistema GNU/Linux en la
distrubucion Fedora&lt;/p&gt;

&lt;p&gt;Para optener la exportacion del fichero principal al formato html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;morg toHtml sicp.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para generar el fichero morg del libro en español apartir del fichero de
traduccion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;morg unPorg sicp-es.porg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luego puede exportarlo a formato html con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;morg toHtml sicp-es.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modificaciones&#34;&gt;Modificaciones&lt;/h2&gt;

&lt;p&gt;Todo el trabajo de traduccion se centra en el fichero &lt;code class=&#34;file&#34;&gt;sicp-es.porg&lt;/code&gt;
este contiene el contenido intacto de &lt;code class=&#34;file&#34;&gt;sicp.morg&lt;/code&gt;, con
la particularidad que cada linea esta &lt;em&gt;comentada&lt;/em&gt; con &lt;code&gt;#&lt;/code&gt; (&lt;code&gt;#&lt;/code&gt; y un espacio en
blanco). La traduccion al español se coloca justo debajo de cada seccion en
ingles, manteniendo la indentacion del original, esto significa que se colocara
con &lt;em&gt;dos&lt;/em&gt; espacios menos del inicio del contenido original comentado, es decir&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Esto forma parte del material original
Esta sera la traduccion del material original
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pasemos a un ejemplo real&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# * Unofficial @e(morg) Format
* Formato @e(morg) No Oficial

#   This is the second edition @A(SICP) book, from Unofficial morg Format.
  Esta es la segunda edicion del libro @A(SICP), no oficial en formato morg.

#   This @l(https://github.com/nasciiboy/morg/&amp;lt;&amp;gt;morg) version is based on
#   Unofficial Texinfo Format @l(http://sicpebook.wordpress.com) (July 07, 2017),
#   based on @l(http://www.neilvandyke.org/sicp-texi/&amp;lt;&amp;gt;2.neilvandyke4).
  Esta versión en formato @l(https://github.com/nasciiboy/morg/&amp;lt;&amp;gt;morg) se basa
  en la version no oficial @l(http://sicpebook.wordpress.com/&amp;lt;&amp;gt;sicpebook) en
  formato Texinfo (Julio 07, 2017), basada en la version no oficial
  @l(http://www.neilvandyke.org/sicp-texi/&amp;lt;&amp;gt;2.neilvandyke4) convertida desde la
  @l(http://mitpress.mit.edu/sicp/&amp;lt;&amp;gt;version HTML) original de MIT Press.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;morg cuenta con sencillas pero potentes opciones de estructuracion y resaltado,
no es necesario conocerlas a profundidad, pero aqui estan las principales&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;todos los elementos finalizan cuando aparece una linea en blanco, exeptuando
los &amp;ldquo;comandos&amp;rdquo; que se guian por la indentacion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;el documento se estructura por niveles de encabezado, esto es cada linea que
inicia con uno o varios &lt;code&gt;*&lt;/code&gt; seguida por al menos un espacio en blanco. El
alcance de este encabezado, termina cuando aparece otro encabezado&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;las listas inician con &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;1.&lt;/code&gt;, &lt;code&gt;1)&lt;/code&gt;, &lt;code&gt;a.&lt;/code&gt; o &lt;code&gt;a)&lt;/code&gt;, seguido por un
espacio en blanco y luego su contenido debe indentarse&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;las definiciones inician con &lt;code&gt;-&lt;/code&gt; o &lt;code&gt;+&lt;/code&gt; luego aparece el texto a definir,
seguido por &lt;code&gt;::&lt;/code&gt; y despues cualquer contenido que conforme la definicion debe
llebar identacion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;los &amp;ldquo;abouts&amp;rdquo; inician con &lt;code&gt;::&lt;/code&gt; luego aparece el &amp;ldquo;titulo&amp;rdquo;,
seguido por &lt;code&gt;::&lt;/code&gt; y despues cualquer contenido que conforme la definicion debe
seguir la identacion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;los &amp;ldquo;comandos de bloque&amp;rdquo; tienen la estructura &lt;code&gt;..el-comando opciones &amp;gt; argumento&lt;/code&gt;. El
cuerpo, del comando si es que tiene, debe estar indentado con dos espacios.
Los comandos de bloque pueden &amp;ldquo;cerrarse&amp;rdquo; explicitamente con &lt;code&gt;&amp;lt; el-comando..&lt;/code&gt;, de otra
forma terminan cuanto el contenido deja de mantener la indentacion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;existen los comandos &lt;code&gt;@&lt;/code&gt;, que sirven tanto para resaltar el texto, como para
otras opciones (futuras) mas complejas, estos comandos siguen la forma &lt;code&gt;@x(&lt;/code&gt;,
donde la &lt;code&gt;x&lt;/code&gt; es el comando en si (&lt;code&gt;b&lt;/code&gt; ==&amp;gt; bold, &lt;code&gt;e&lt;/code&gt; ==&amp;gt; enfasis, &lt;code&gt;i&lt;/code&gt; == italica,
etc). Luego esta la abertura del comando que puede ser &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt; y &lt;code&gt;&amp;lt;&lt;/code&gt; y
termina al encontrar el cierre, que respectivamente seria &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt; y
&lt;code&gt;&amp;gt;&lt;/code&gt;. La variedad de este ultimo se utiliza para &lt;em&gt;evitar abiguedades&lt;/em&gt; sobre el
alcance del contenido&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si dentro del comando &lt;code&gt;@&lt;/code&gt; aparece &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; significa que el texto a la derecha de
  este, reemplazara lo que aparesca en la exportacion y el texto a la izquierda
  es el &amp;ldquo;argumento&amp;rdquo; del comando&lt;/p&gt;

&lt;p&gt;Desde luego los comandos (&lt;code&gt;@&lt;/code&gt; y de &amp;ldquo;bloque&amp;rdquo;) pueden anidarse, con la salvedad
que los comandos de codigo fuente &lt;code&gt;..src &amp;gt; lenguaje&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para colocar una &lt;code&gt;@&lt;/code&gt; dentro del texto tal cual, utilize &lt;code&gt;@@&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;p&gt;el fichero &lt;code class=&#34;file&#34;&gt;todo.txt&lt;/code&gt; se encuentra la lista de
pendientes y encargados de cada labor&lt;/p&gt;

&lt;p&gt;Antes de iniciar una tarea realize una modificacion en dicho fichero
adjudicandose la tarea, envie un pull request y espere a que se actualice
el repositorio fuente&lt;/p&gt;

&lt;h2 id=&#34;consideraciones-finales&#34;&gt;Consideraciones finales&lt;/h2&gt;

&lt;p&gt;La herramienta principal con la que se realiza la traduccion ha sido &lt;em&gt;El editor&lt;/em&gt;
Emacs, el cual proporciona diversas facilidades de edicion, tomando prestadas
cualidades del modo &lt;em&gt;org-mode&lt;/em&gt;, considere su uso, de otra manera tendra que
editar &amp;ldquo;rusticamente&amp;rdquo;, debido a la juventud del lenguaje de marcas morg, de ser
asi no se moleste en &amp;ldquo;cuadrar&amp;rdquo; los parrafos, solo mantenga la indentacion&lt;/p&gt;

&lt;p&gt;Hasta el momento he utilizado google translate (&lt;code class=&#34;file&#34;&gt;sicp-es.porg&lt;/code&gt;)
tanto para la traduccion maquina, e igual para ir realizando una revicion
pararrafo a parrafo, dicho traductor, requiere de parrafos en una sola linea
para operar de forma optima. Para no tener la penosa necesidad de unir lineas a
mano utilice&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ morg toTxt sicp.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto genera el fichero &lt;code class=&#34;file&#34;&gt;sicp.txt&lt;/code&gt;, con cada parrafo en
una sola linea independiente. Es una caracteristica sin terminar, pero bastante
util&lt;/p&gt;

&lt;p&gt;todos los ficheros estan codificados en utf-8, antes de enviar sus cambios
revise la codificacion&lt;/p&gt;

&lt;p&gt;en la traduccion, las opciones de resaltado e inclucion de mathjax, estan
desabilitadas (comando &lt;code&gt;..options &amp;gt;&lt;/code&gt;) para evitar el cuello de botella que
suponen en el desarrollo, habilite si quiere la exportacion completa&lt;/p&gt;

&lt;p&gt;Para terminar, hay un subreddit donde realizar cualquer pregunta, propuesta o
insulto, en &lt;a href=&#34;https://www.reddit.com/r/SICP_ES/&#34;&gt;https://www.reddit.com/r/SICP_ES/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SICP (proyecto de traduccion)</title>
      <link>https://nasciiboy.github.io/prog/dot-slash-sicp2es/</link>
      <pubDate>Fri, 07 Jul 2017 18:27:56 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/dot-slash-sicp2es/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/jelly.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;o en otras palabras dadme pasta! (no en galletas)&lt;/p&gt;

&lt;h2 id=&#34;faq&#34;&gt;faq&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;por que?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;para traducir un libro de muchas lineas al español, el &lt;strong&gt;Structure and
Interpretation of Computer Programs&lt;/strong&gt;, tambien conocido como &lt;em&gt;SICP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;por que sicp?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;en los listados de lecturas para programadores suele aparecer inevitablemente
y en los primeros puestos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;puedo traducirlo y combrar por ello, sin romper ninguna ley (creo)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;parece interesante y creo que enseñan a programar, ademas utilizan un derivado
de lisp: &lt;em&gt;Scheme&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no lo he leido, ni lo entiendo en ingles&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;no entiendes ingles?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;he, je, he, nop! de hecho ni la ortografia, ni transmitir un pensamiento por
escrito son &lt;em&gt;features&lt;/em&gt; que posea&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uuuufff, de que vas?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;de nah, el libro no esta traducido, y yo, sin saber ingles, puedo utilizar un
traductor, sentido comun y muchas horas para dejar un trabajo cuando menos
entendible, por no decir bueno (sin llegar a lo profecional), todo esto
respaldado en un nuevo &lt;a href=&#34;https://github.com/nasciiboy/morg/&#34;&gt;formato de documentacion&lt;/a&gt;
(actualizacion de readme en proceso) que estoy construyendo, mientras aprendo a
programar decentemente, capto un poco de ingles y me convierto en un miembro
productivo de la sociedad. Todo ello por un modico y nada extrabagante (pero
digno) sueldo de &lt;s&gt;tercer mundo&lt;/s&gt; un pais en vias de desarrollo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;momento, seguro escapas con la pasta!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; palabra de boy scout, a menos que muera o me vea impedido fisicamente o
ambientalmente, y/o sea demandado por algun desacuerdo legal por alguna de mis
pasadas (y futuras) acciones informaticas, y como sinceramente no tengo nada
mejor, ni mas noble que hacer, &lt;em&gt;yo nasciiboy&lt;/em&gt; lo llevare a cabo&lt;/p&gt;

&lt;p&gt;en caso de no llegar a la meta finaciera, seguire adelante mientras mis parientes no me
echen a la calle, consiga empleo, pierda el interes o cualquier combinacion de estas&lt;/p&gt;

&lt;p&gt;cierto es que esta es la segunda vez que pido financiacion, anteriormente fue
para llevar a cabo la escritura
del &lt;a href=&#34;https://github.com/nasciiboy/raptor-book/&#34;&gt;libro del raptor&lt;/a&gt; + su revision
por alguien de letras. En esa ocacion, no optuve ni un centavo, aunque continua el desarrollo de la
libreria raptor, mas el nulo interes por esta, y la sensacion de no plasmar lo mejor
posible mis ideas, llevaron a un paron indefinido de tal labor&amp;hellip; pero esto es
distinto, verdad de la buena!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;seguro?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;si, seguro!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;seguro, seguro?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;que si, es mas, a diferencia de otros suplicantes de donacion que no ofrecen
nada de inicio, noblemente he realizado una maquetacion del libro al formato
morg (sin gluten, o aditivos), tambien incluyo una exportacion en html
en &lt;a href=&#34;https://github.com/nasciiboy/sicp/&#34;&gt;este repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;o puedes hacer una clonacion con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/nasciiboy/sicp.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hay encontraras, el fichero fuente y su exportacion a html, ambas en
ingles. Probe la version html con firefox y con un spin de chromium, sin
aparente problema&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/sicp-screeshot-a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/sicp-screeshot-b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;extenso el material es, asi que probablemente contenga algunos errores&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cuanto quieres?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5,000&lt;/em&gt; dolares, una cantidad aproximada entre 70,000 y 100,000 pesos mexicanos,
para un periodo de entre 5 a 8 meses (ampliable a un año), que seria un sueldo
bajo-bueno-promedio anual&lt;/p&gt;

&lt;p&gt;en mas de lo que esperiria ganar en un empleo regular, pero oye, para algo que
puedo hacer ya seria mucho no valorarme, ademas podria gastar una suma
considerable en un par de buenos monitores, una nueva placa, un disco de 4TB, o
ser persona&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;donde deposito?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;realmente nunca he echo un deposito, ni recivido dinero de internet, si quieres
hacerlo sin intermediarios ponte en contacto por correo, ya veremos si la
tarjeta bancaria maizoro que saque con 1 peso de saldo sirve para algo&lt;/p&gt;

&lt;p&gt;si por el contrario prefieres un intermediario, abri una cuenta en &lt;a href=&#34;https://es.liberapay.com/&#34;&gt;&lt;em&gt;liberapay&lt;/em&gt;&lt;/a&gt;,
que es algo asi como un patreon, pero sin fines de lucro, ni compromisos, basado
en software libre, tambien tiene un monton de usuarios registrados esperando
algo de pasta y su ultimo mes movieron poco mas de 1200 euros&amp;hellip; el
financiamiento de proyectos libres es complejo, nadie te da dinero si no eres un
chakal!&lt;/p&gt;

&lt;p&gt;el enlace a la cuenta para la financiacion, esta a fondo del blog, como sin
querer, mis unicos otros dos medios de contacto son el correo (tambien al fondo)
y en reddit, ambos con el usuario &lt;strong&gt;nasciiboy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y las (pegatinas|playeras|recompensas)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;no necesitas nada externo, las cosas bonitas las tienes dentro de ti, las mas
bonitas en el disco duro, si quieres
una baratija ya te la puedes comprar por tu cuenta he ir directo a #!eç¤¢¢
€¢#!¢e¤¢ $&amp;amp;~#@&amp;hellip;. desde el respeto&amp;hellip;&lt;/p&gt;

&lt;p&gt;lol, alimenta al troll&amp;hellip; bueno, por 10 dolares o asi, ya te pongo en el
&lt;em&gt;CONTRIBUTORS&lt;/em&gt; del repo, por 100 o mas en los agradecimientos del libro, y por
1000 al inicio del libro con el cargo ficticio (o real) que quieras! como &lt;em&gt;ninja
editor&lt;/em&gt;, o &lt;em&gt;Jr. revisor online ecologist superior chief developer master&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;no tengo pasta, puedo colaborar?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;esta en un repo, en texto plano, en internet, con una licencia libre (CC BY-SA
4.0), puedes hacer lo que te permita la ley o tu vision del mundo&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; por supuesto que puedes colaborar, dar una revicion a las cosas que voy
haciendo (suelo subir una seccion/capitulo por commit), ponerte a traducir,
ofrecer tu opinion sobre el formato, programar morg, hacer una portada, una hoja
de estilo, &amp;hellip;&lt;/p&gt;

&lt;p&gt;no voy a quejarme, por tardar menos, menos aun si se hace mejor&lt;/p&gt;

&lt;p&gt;tambien si te gusta el formato, recivo encargos, ofertas de empleo, como tambien
propuestas para hacer esto de documentar rentable a corto plazo, armar una empresa hippie, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cuando inicia la traduccion?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;obviamente, cuando vea la pasta&amp;hellip; en realidad puedo empezar inmediatamente,
aunque primero quiero programar un poco el exportador/visualizador/facilitador
del formato. Tengo por costumbre hacer un poco de esto y un poco de aquello,
en un mes subo (o no) una &lt;em&gt;pretraduccion&lt;/em&gt; (automatica, es decir del traductor) y/o
&lt;em&gt;premaquetacion&lt;/em&gt; de todo el material, esto lleva mucho mas tiempo que una simple
traduccion y por lo general no tiene un sentido entendible para humanos, pero es
la parte fundamental.&lt;/p&gt;

&lt;p&gt;Si deseo programar antes, es para automatizar la mayor parte de la labor, pese a
que esto tambien es una meta a largo plazo&lt;/p&gt;

&lt;h2 id=&#34;adaptacion-del-material&#34;&gt;adaptacion del material&lt;/h2&gt;

&lt;p&gt;Si he de clasificar la facilidad de adaptar un libro de un formato a otro, sin
duda, lo mas complejo seria partir del formato de arbol muerto, no obstante en
esa situacion la &amp;ldquo;libertad de ajuste&amp;rdquo;, es la mas grande, si no sabes
mecanografia, es un magnifico proyecto para aprender, e ir realizando la
adaptacion &amp;ldquo;al vuelo&amp;rdquo;, claro luego seran necesarias muchas pasadas cazando
fallos ortograficos&lt;/p&gt;

&lt;p&gt;el siguiente caso de complejidad seria un ocr o pdf &amp;ldquo;con letras&amp;rdquo;, primero se
vuelca el contenido y luego toca no solo maquetar desde el texto en bruto,
tambien transladar cualquier marca del original (bold, italica, enfasis,
codigo), asi como crear enlaces internos, si es el caso&lt;/p&gt;

&lt;p&gt;por ultimo temos la adaptacion partiendo de algun lenguaje de marcado, que
me gusta clasificar en dos subcategorias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;maquetado limpio&lt;/em&gt;, es decir, si es factible realizarlo con una herramienta
automatica o con un minimo de intervencion (a base de substitucion regexp y
macros) casi directamente&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;maquetado ofuscado&lt;/em&gt;, jo, esto suele encontrarse en mayor medida en documentos
html, cuando la apnesia ataca los fundamentos estructurales del lenguaje, y
mediante una y otra etiqueta o las que hagan falta se optiene el aspecto
visual deseado; esta tecnica tambien se vale de romper los propositos de un
elemento dado, asi tambien como emular una caracteristica no implementada&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;los documentos en (*)TeX, suelen estar en el punto medio de ambas subcategorias,
para fortuna mia, la persona &lt;em&gt;Lytha Ayth&lt;/em&gt;, en el 2001 se dedico a maquetar sicp
a conciencia en el formato texinfo (formato oficial de documentacion del
proyecto GNU, con un mimo particular en Emacs). Tras una larga cadena de
aportaciones y correcciones, optube una copia desde el repositirio &lt;a href=&#34;https://github.com/sarabander/sicp&#34;&gt;sicp-pocket&lt;/a&gt;
que contiene todo el libro dentro de un solo fichero (&lt;code class=&#34;file&#34;&gt;sicp-pocket.texi&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;como este fichero tenia una estructura razonable, la mayoria pudo hacerse
mediante macros y substitucion de expresiones regulares, revision manual y
un poco de lavor para encajar algunas cosas, este proceso llevo algo asi como 15
seciones de tiempo ocioso y un par de dias a tiempo completo&lt;/p&gt;

&lt;p&gt;diria que lo mas complejo fue encontrar sentido al uso del comando &lt;code&gt;quotation&lt;/code&gt;,
que se utilizaba indiscriminadamente en cuelquier figura, codigo, ejemplo y
bloque ambiguo, tambien fue complejo decidir que hacer con las bloques de arte
ascii encerrados en comandos de compilacion condicional, que se utilizaban
principalmente para graficar diagramas y algunas formulas matematicas, en ese
aspecto tome una licencia artistica, substituir el arte ascii con &amp;ldquo;arte&amp;rdquo; unicode
cuando fuese apropiado (y cuando no) y tambien la nada grata tarea de substituir
sup/super indices (unicode) de todas las formulas matemagicas que fue posible,
creo solo quedaron 5-10 formulas en TeX puro&lt;/p&gt;

&lt;p&gt;cierto es que el texto incluia todas las formulas tanto en ascii como en TeX,
pero borre este ultimo, no por incapacidad del lenguaje morg (que aun no se
decanta por una sintaxis para formulas matemagicas), sino por ahorrar
procesamiento y por considerar que la representacion unicode cumplia de forma
satisfactoria, tanto (y principalmente) para leer el libro directamente del
fuente, como en alguna de sus exportaciones (de momento solo html) y una
no completa vision desde el terminal con el comando &lt;code&gt;morg tui sicp.morg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para el par de formulas que no puedieron adaptarse, utilice el javascript de
MathJax, para la que tuve que incluir una opcion en el fuente, si desea
eliminarla, dentro del codigo fuente del documento (&lt;code class=&#34;file&#34;&gt;sicp.morg&lt;/code&gt;)
elimine la palabra &lt;code&gt;mathjax&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;el resaltado de syntaxis requiere tener instalado pygments. Dentro del documento
la palabra &lt;code&gt;pygments&lt;/code&gt; habilita dicho resaltado.&lt;/p&gt;

&lt;p&gt;Tome en cuenta que python es mas lento que morir por fumar, asi que desabilitese
para pruebas rapidas, lo mismo para &lt;code&gt;mathjax&lt;/code&gt;, la carga del javascript afecta el
rendimiento del navegador de mala, muy mala manera&lt;/p&gt;

&lt;p&gt;en los proximos dias pondre un readme al repo y una actualizacion al de morg&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>morg [dia 432]</title>
      <link>https://nasciiboy.github.io/prog/morg-d432/</link>
      <pubDate>Tue, 04 Jul 2017 18:47:44 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-d432/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/BOM.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;sin un titulo interesante y sin esperar una secuencia tan armonica, confie a un
programa informatico de internet la tarea de calcular los dias desde el primer
commit del repo de morg, no por ningun hecho revelante y menos por un desarrollo
agil, que es mas bien paralitico&lt;/p&gt;

&lt;p&gt;bueno, el programa exportador llevaba parado un rato con un bicho enorme, mientras continua el
aprendizage del lenguaje Go, a la espera de una refactorizacion, pruebas y demas
cosas necesarias, asi pues cuando me decidia a probar a exportar o visualizar
algun libro recien maquetado, optenia un log inverso de panicos y direcciones
de memoria exadecimales. Toque aqui y un poco alla, sin comprender el problema,
hasta que un momento de aburrimiento y terquedad irracional me guiaron por la ruta dificil&amp;hellip;&lt;/p&gt;

&lt;p&gt;en una revelacion mistica, pense que el problema era la codificacion del
documento, quiza no estaba en utf-8 puro (que es lo unico que acepta el exportador)
asi que con un &lt;code&gt;file&lt;/code&gt;, el fichero en cuestion decia tener un &lt;em&gt;BOM&lt;/em&gt;, &amp;ldquo;o, hay esta
el problema –me dije&amp;rdquo;&amp;hellip; mas bien no, al parecer es algo que se descarta mientras se lee
el fichero, pero por cualquier duda, los pase a utf-8 sin el BOM (en emacs &lt;code&gt;C-x
Enter f&lt;/code&gt;, se abre un prompt, e introduces la codificacion, &lt;code&gt;utf-8&lt;/code&gt;, pero
tambien vale con &lt;code&gt;unix&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;luego, en una muestra de ingenio impresionante, tome un manual de muchas muchas
lineas y comence a quitar y guardar cosas hasta encontrar la linea que hacia
explotar el programa, el culpable era un &lt;em&gt;bloque de comando&lt;/em&gt;, sin
definir.&lt;/p&gt;

&lt;p&gt;Dentro del codigo el error se devia a exportar un bloque vacio&amp;hellip; y no
considerar tal indudable posivilidad, provocada incluso por un error tipografico&lt;/p&gt;

&lt;p&gt;he, he, ya mencione que generalmente programo sin considerar los casos de error
y que el programa no notifica nada para ningun fallo&amp;hellip; fiel a mis costumbres
le hice unos pequeñøs ajustes, que tambien suponen datos de entrada
correctos&amp;hellip;&lt;/p&gt;

&lt;p&gt;entre los cambios, inclui el comando &lt;code&gt;srci&lt;/code&gt; para &amp;ldquo;simular&amp;rdquo; un prompt de algun
lenguaje, es decir, colocas la supuesta entrada en un determinado lenguaje y
tambien su supuesta salida, sencillo, no?&lt;/p&gt;

&lt;p&gt;un comando &lt;code&gt;tab&lt;/code&gt; para separar un poco de la izquierda cualquier cosa&lt;/p&gt;

&lt;p&gt;el comando &lt;code&gt;pret&lt;/code&gt;, de &amp;ldquo;texto pre&amp;rdquo;, es decir, es texto, cada linea es un
parrafo, pero se visualiza como pre&lt;/p&gt;

&lt;p&gt;un comando &lt;code&gt;verse&lt;/code&gt;, para versos y tambien un &amp;ldquo;separador&amp;rdquo; para los libros, que
ahora recuerdo olvide implementar, bueno no importa&lt;/p&gt;

&lt;p&gt;todo fue implementado de forma fugaz, por mis ancias de exportar el &lt;a href=&#34;https://github.com/nasciiboy/sicp&#34;&gt;sicp en formato morg&lt;/a&gt;,
tiene tanto cruft que se pega en la ropa! pero hey! solo es una prueba de
concepto, ya tengo una mejor idea de como implementar algunas cosas (algun dia)
y tambien he visto la necesidad de esconder la implementacion de los
exportadores del formato, haciendo que la estructura principial se &amp;ldquo;desenrrolle&amp;rdquo;
sola, el programador devera proporcionar solo las reglas para cada elemento, o
esa es la idea, veremos si puedo hacerlo o siquiera visualizarlo, pues hay es
donde radica la magia de la programacion, si eres capaz de imaginar una
estructura funcional, es problable que la puedas implementar (como en el kung-fu)&lt;/p&gt;

&lt;p&gt;me tome la libertad, y ya que esta version sera la ultima con el anterior
enfoque (desechable) de segir utilizando pygments para el resaltado de codigo
(go-highlight es un timo), e incluir el javascript de &lt;em&gt;Mathjax&lt;/em&gt; para hacerse
cargo de unas pocas formulas matemagicas de la version exportada del sicp. De
igual forma no le meti mano al visualizador de linea de comandos, pues considere
que seria un esfuerzo futil&lt;/p&gt;

&lt;p&gt;no modifique mucho mi hoja de estilos generica, sera tarea para otro dia mientras preparo
un discusito para pedir financiacion para la traduccion del sicp, continuar el
desarrollo del morg, comprar un par de monitores, una estacion de trabajo y
aspirar cocaina sobre el cuerpo de unas japonesas en nagoya&lt;/p&gt;

&lt;p&gt;tambien puse a prueba el morg con los 4 libros de Ender, pero ese material, ya
tendra su propio post&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crear una paleta de color con solo un indice</title>
      <link>https://nasciiboy.github.io/prog/rainbow/</link>
      <pubDate>Sat, 17 Jun 2017 12:39:43 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/rainbow/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/mandelbrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;que tal, como lo indica el titulo vamos a generar una paleta de color apartir de
un unico indice, para, por ejemplo colorear una imagen en una escala de
colores RGB del negro absoluto (0,0,0) al blanco (255,255,255), con una
trancicion &amp;ldquo;suave&amp;rdquo; por estos&lt;/p&gt;

&lt;p&gt;El asunto surgio resolviendo algunos de los ejercicios de libro de programacion
de go, especificamente el 3.5, donde proponian dar color a una imagen de
mandelbrot, que estaba en una escala de grises (de hay viene lo de generar los
colores apartir de un solo indice).&lt;/p&gt;

&lt;p&gt;La primer y mas facil solucion es utilizar una paleta de colores prefabricada y
adaptar el indice a un valor que entre en la paleta, pero eso es muy cutre, lo mas molon
seria generar el color &amp;ldquo;al vuelo&amp;rdquo; de una paleta con un numero de colores
arbitrario, yeee!&lt;/p&gt;

&lt;p&gt;entonces, como se hace? bueno&amp;hellip; tenia una idea con un circulo de color,
una espiral, y longitudes, pero como las mates no son lo mio, le pregunte a la gente de &lt;a href=&#34;https://www.reddit.com/r/programacion/comments/6g28j9/generar_paleta_de_colores_con_solo_un_indice/&#34;&gt;internet&lt;/a&gt;
(mejor explicado &lt;a href=&#34;https://www.reddit.com/r/Matematicas/comments/6g5f22/recorrido_atravez_de_un_circulo_de_color_rgb/&#34;&gt;aca&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;y luego? pues, no llego la respuesta matematica que esperaba, peeeeeero una
respuesta me dio a conocer dos modelos de color, como los que utilzaban las
teles crt de la antiguedad&lt;/p&gt;

&lt;h2 id=&#34;modelo-de-color-hsl&#34;&gt;Modelo de color HSL&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Modelo_de_color_HSL&#34;&gt;https://es.wikipedia.org/wiki/Modelo_de_color_HSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/HSL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;como podemos ver, tenemos tres valores, &lt;strong&gt;luminosidad&lt;/strong&gt;, &lt;strong&gt;saturacion&lt;/strong&gt; y
&lt;strong&gt;matiz&lt;/strong&gt;, con la particularidad que el color inicia en negro absoluto y luego
converge en blanco, y los colores puros (del esquema RGB, cuando uno de ellos es
255 y los otros dos 0) se optienen con la luminosidad a la mitad de su valor y
la saturcion al maximo, ahora, si la luminosidad esta al maximo, terminaremos
con un color blanco, independientemente de saturacion y matiz, lo mismo en caso
contrario, es decir, si la luminocidad al minimo dara el color negro&lt;/p&gt;

&lt;p&gt;estas particulares hacen a este modelo mucho mas intuitivo que el clasico modelo
RGB, ademas de practico para optener tranciciones suaves, especiarmente para el
caso de generar una paleta variada&lt;/p&gt;

&lt;p&gt;supondre que su popularidad no esta lo suficientemente extendida en el campo
programacional por requerir un calculo considerablemente mayor&lt;/p&gt;

&lt;h2 id=&#34;modelo-de-color-hsv&#34;&gt;Modelo de color HSV&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Modelo_de_color_HSV&#34;&gt;https://es.wikipedia.org/wiki/Modelo_de_color_HSV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este modelo, los colores alcanzan su maximo valor de iluminacion con el valor
maximo de luminocidad, sin embargo y adiferencia de HSL este se decanta por un
color u otro segun la
saturacion y matiz&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/HSV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;codigo&#34;&gt;Codigo&lt;/h2&gt;

&lt;p&gt;De entre los dos Modelos de color, escogi HSL, pues se realiza la trancicion del
negro al blanco y con HSV la trancicion culminaria en un color especifico (si
desea seguir este ultimo esquema, lo ideal seria generar distintos matizes con
niveles de saturacion especificos, realizando un bucle por la luminocidad)&lt;/p&gt;

&lt;p&gt;aqui esta el codigo para optener un color dentro de nuestra paleta de colores&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package color

const colors = 255             // colores disponibles
const secs   = 3               // seciones de color
const sec    = colors / secs   // longitud de seccion

func MagicColor( x, scale int ) (r, g, b uint8) {
  color := int(x * colors / scale)

  h := float64(color % sec) / sec
  s := 1.0
  l := float64(color) / colors

  return hsl2rgb( h, s, l )
}

func hsl2rgb( h, s, l float64 ) (red, green, blue uint8) {
  r, g, b := l, l, l

  var v float64

  if l &amp;lt;= 0.5 {
    v = l * (1.0 + s)
  } else {
    v = l + s - l * s
  }

  if v &amp;gt; 0 {
    m  := l + l - v
    sv := (v - m) / v
    h  *= 6.0
    sextant := int(h)
    fract := h - float64(sextant)
    vsf   := v * sv * fract
    mid1 := m + vsf
    mid2 := v - vsf

    switch sextant {
    case 0: r, g, b = v, mid1, m
    case 1: r, g, b = mid2, v, m
    case 2: r, g, b = m, v, mid1
    case 3: r, g, b = m, mid2, v
    case 4: r, g, b = mid1, m, v
    case 5: r, g, b = v, m, mid2
    }
  }

  red, green, blue = uint8(r * 255.0), uint8(g * 255.0), uint8(b * 255.0)
  return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debo aclarar que pese a que funciona segun lo planeado, los algoritmos para
convertir de HSL (y HSV) a rgb los traduje de codigo de internete, desconosco si
pueda hacerse mejor, por que no entiendo &amp;ldquo;las formulas&amp;rdquo; que proporciona la wikipedia&lt;/p&gt;

&lt;p&gt;vamos con la explicacion (de lo que entiendo), primero la funcion de cara al
publico, es &lt;code&gt;MagicColor&lt;/code&gt; que recive el indice, y el valor maximo que este puede
alcanzar (suprimir este ultimo si se conoce de antemano o mejor aun, que la
paleta tenga tantos colores como el valor maximo, no hice esto por pereza y por
que las constantes en Go son &amp;ldquo;magicas&amp;rdquo; y no requieren de estupidos cast y se
pueden utilizar tanto para enteros, como flotantes, como &lt;strong&gt;racionales&lt;/strong&gt;(?que es
esto?))&lt;/p&gt;

&lt;p&gt;la constante &lt;code&gt;colors&lt;/code&gt; establece el numero de colores que tendra la paleta,
&lt;code&gt;secs&lt;/code&gt; es el numero de &amp;ldquo;tranciciones&amp;rdquo; atraves del matiz (&lt;code&gt;h&lt;/code&gt;) es decir,
partiendo de color rojo, pasamos por el verde y luego azul para terminar de
nuevo en rojo. Si tenemos solo una transicion/seccion/ciclo digamos que nos
movemos en espiral (ver dibujo HSL) negro-rojo-verde-azul-rojo-blanco si tenemos mas
de un ciclo seria negro - &lt;strong&gt;(rojo-verde-azul)&lt;/strong&gt; - blanco, donde la region
&lt;strong&gt;(rojo-verde-azul)&lt;/strong&gt;  se repite una y otra vez, con variaciones de luminocidad&lt;/p&gt;

&lt;p&gt;por ultimo establesco el nivel de saturacion al maximo (&lt;code&gt;1.0&lt;/code&gt;, la variables de
hsl2rgb y hsv2rgb van de 0.0 a 1.0)&lt;/p&gt;

&lt;p&gt;aqui esta la vercion hsv2rgb, pero como antes mencione, debemos tomar un enfoque
distinto en MagicColor, para que la paleta tenga una variedad logica, primero un
ciclo por la luminocidad, y dentro de este un ciclo por saturacion y matiz, no hice
eso, asi que vas por cuenta propia, aunque tampoco es muy complicado&lt;/p&gt;

&lt;p&gt;(Nota: agregar &lt;code&gt;import &amp;quot;math&amp;quot;&lt;/code&gt; luego de la declaracion &lt;code&gt;package color&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func hsv2rgb( h, s, v float64 ) (red, green, blue uint8) {
  var r, g, b float64

  i := int(math.Floor(h * 6))
  f := h * 6 - float64(i);
  p := v * (1 - s);
  q := v * (1 - f * s);
  t := v * (1 - (1 - f) * s);

  switch i % 6 {
  case 0: r, g, b = v, t, p
  case 1: r, g, b = q, v, p
  case 2: r, g, b = p, v, t
  case 3: r, g, b = p, q, v
  case 4: r, g, b = t, p, v
  case 5: r, g, b = v, p, q
  }

  red, green, blue = uint8(r * 255.0), uint8(g * 255.0), uint8(b * 255.0)
  return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puedes copiar el codigo y ponerlo en un fichero (digamos en &lt;code&gt;~/color/color.go&lt;/code&gt;), y
hacer pruebas con lo siguiente (poner en &lt;code&gt;~/main.go&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;./color&amp;quot;
)

func main(){
  fmt.Printf( `&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; lang=&amp;quot;&amp;quot; xml:lang=&amp;quot;&amp;quot; &amp;gt;

  &amp;lt;body&amp;gt;
` )

  for i := 0; i &amp;lt; 255; i++ {
    r, g, b := color.MagicColor( i, 255 )
    var c int32
    c = int32(r) &amp;lt;&amp;lt; 16 | int32(g) &amp;lt;&amp;lt; 8 | int32(b)

    fmt.Printf( &amp;quot;&amp;lt;span style=\&amp;quot;color:#%06x;\&amp;quot; &amp;gt;a&amp;lt;/span&amp;gt;&amp;quot;, c )
  }
  fmt.Println( &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ir a nuestro &lt;code&gt;~&lt;/code&gt; y ejecutar con &lt;code&gt;go run main.go &amp;gt; prueba.html&lt;/code&gt;, abrimos
&lt;code&gt;prueba.html&lt;/code&gt; con nuestro flamante navegador y veremos una fila de &lt;code&gt;a&lt;/code&gt;s en
escala de colores!&lt;/p&gt;

&lt;p&gt;para terminar, &lt;a href=&#34;https://raw.githubusercontent.com/nasciiboy/TGPL-Exercises/master/03-05/nasciiboy/main.go&#34;&gt;aca&lt;/a&gt; esta
la solucion al ejercicio que motivo este post&lt;/p&gt;

&lt;p&gt;descargar y ejecutar con&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &#39;directorio-de-descarga&#39;

# para imagen mandelbrot
go run main.go &amp;gt; mandelbrot.png

# o

go run main.go -t m &amp;gt; mandelbrot.png

# para imagen newton
go run main.go -t n &amp;gt; newton.png

# para imagen sqrt
go run main.go -t s &amp;gt; sqrt.png

# para imagen acos
go run main.go -t a &amp;gt; acos.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;la imagen generada con mandelbrot es muy triste, en cambio con el algoritmo
newton es distinto:&lt;/p&gt;

&lt;p&gt;algoritmo newton con &lt;code&gt;secs&lt;/code&gt; establecido en 1 (un ciclo)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/newton.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;algoritmo newton con &lt;code&gt;secs&lt;/code&gt; establecido en 2 (dos ciclos)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/newton2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;algoritmo newton con &lt;code&gt;secs&lt;/code&gt; establecido en 50 y &lt;code&gt;colors&lt;/code&gt; en 5000&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/newton3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;para los algoritmos &lt;code&gt;acos&lt;/code&gt; y &lt;code&gt;sqrt&lt;/code&gt; no interviene nuestro &lt;code&gt;MagicColors&lt;/code&gt;, aun asi
la salida es bastante chula&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>El Lenguaje De programacion Go</title>
      <link>https://nasciiboy.github.io/prog/tgpl/</link>
      <pubDate>Mon, 29 May 2017 22:02:43 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/tgpl/</guid>
      <description>

&lt;p&gt;golang, el lenguaje de &lt;q&gt;programacion de sistemas&lt;/q&gt; de la gente de google con
el que planea llebar a cabo sus mas retorcidos y stalkerosos deseos.&lt;/p&gt;

&lt;p&gt;Hoy y tras pocos meses de programacion y muchas horas de investigacion
linguistica intentando entender el english, les traigo una reseña de la biblia
de golang (Go para los amigos) &lt;em&gt;The Go Programming Language&lt;/em&gt; (en adelante
TGPL o GPL(?))&lt;/p&gt;

&lt;h2 id=&#34;el-libro&#34;&gt;el libro&lt;/h2&gt;

&lt;p&gt;los usa-americanos tinen sus medidas extravagantes, siguiendo su ejemplo, yo
mido la extencion de un documento en las lineas (de 80 columnas indentadas) que
abarca, por ejemplo, 7000-10000 lineas suelen ser la extencion regular de una
novela, debajo de esta cantidad es un trabajo corto, superior de esta es extenso
y superior a las 20000 lineas ya es &lt;em&gt;muy extenso&lt;/em&gt;, aunque &lt;em&gt;Dune&lt;/em&gt;
utiliza (y muy bien) la friolera y descomunal cantidad de 34150 lineas.&lt;/p&gt;

&lt;p&gt;Pues bien TGPL son 21426 lineas, repartidas a partes iguales entre explicaciones
y codigo fuente, si quieres la extencion en paginas cerca de 400, aunque yo no
confiaria en esta medida&lt;/p&gt;

&lt;p&gt;La mayor parte del libro se utiliza para mostrar la forma de hacer las cosas en
Go, sintaxis, ideologia y paquetes. Haciendo un simil con C seria algo asi como
que te enseñåran a hacer muchas herramientas del sistema, mas una guia de gcc,
make y alguna cosa mas.&lt;/p&gt;

&lt;p&gt;Se asume que ya conoces al menos un lenguaje de programacion, particularmente C o
alguno de su descendencia, y aunque no es necesario, que manejes programacion
orientada a objetos y/o concurrencia es deseable, antes de iniciar esta aventura&lt;/p&gt;

&lt;p&gt;No es un manual para no iniciados, es decir, para quien no tenga ya asumido en
su ser lo que es programar, resultara hostil, diria que es apto como tercer o
cuarto libro de programacion&lt;/p&gt;

&lt;p&gt;Se enseña a construir aplicaciones no triviales, utilzando la rica libreria
estandar del lenguaje, aunque la mayoria encaminadas al tema web, ninguna es
despreciable, incluso se propone la construccion de un parser de espreciones-S y
un pequeño interprete para un lenguaje de programacion, aunque no se llega a
profundizar veraderamente en ningun tema, se da lo suficiente como para
enfrentar cualquier propuesta sin temor (jo, lo dice quien no ha hecho mas de 4
ejericios, en serio, eso es lo mas denso, ni en la vastedad de internet he
localizado a un intrepido programador que alla concluido tal mision)&lt;/p&gt;

&lt;p&gt;Lo mismo se aplica para las secciones que explican la herramienta principal del
lenguaje, que es compilador, perfilador (primera ves que utilizo algo asi),
administador de paquetes, &amp;ldquo;visor&amp;rdquo; de documentacion y muchas cosas mas. Nos dicen
de que va el tema y luego saltan al sugiente punto&amp;hellip; es este caso aunque
suficiente para iniciar, si hecho en falta mayor detalle, pues varios comandos
requieren un orden y sintaxis nada evidentes, siendo mas bien conjuros o trucos
misteriosos&lt;/p&gt;

&lt;p&gt;en resumen, recomendo su lectura a cualquiera, en particular si se biene de C o
C++ y se aspira a lenguajes mas desapegados de la maquina, sin topar de lleno en
abstracciones incomprensibles&lt;/p&gt;

&lt;h2 id=&#34;el-lengueje&#34;&gt;el lengueje&lt;/h2&gt;

&lt;p&gt;el libro esta muy bien!, que tal el lenguaje?&lt;/p&gt;

&lt;p&gt;bueno, desde la perspectiva de un aficionado a C, que ha pasado por C++, bash y
un ligero viaje por lisp, el lenguaje me gusta mucho, aunque no puedo perdonarle
que inponga un estilo arbitrario de como han de indentarse y separarse las
sintrucciones, es decir el formateo, biniendo de C tener llaves para
instrucciones sencillas (una instruccion) me parece atroz, por no decir forzar la
posicion de apertura y cierre de las demas llaves, sobre todo en intstrucciones
&lt;code&gt;else&lt;/code&gt;, no lo soporto esteticamente!, hooo y utilizar tabs para indentar, deben
arder en la hogera, y como te obligan a esto, simple si no cumples su mierda
formato no compila&amp;hellip;&lt;/p&gt;

&lt;p&gt;dejando atras este no precisamente poco importante aspecto, tenemos el
inmobiliacio habitual de los descendientes de C, ifs, elses, else ifs,
funciones, arreglos, switches, return, gotos y bucles for, caresiendo de bucles
while y do while, pero sumando slices, que son una especie de arreglo con
crecimiento dinamico automagico (el lenguaje tien recolector de basura), mapas
hash, una funcion llamada &lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;gorutinas&lt;/code&gt; para programacion concurrente,
&lt;q&gt;canales&lt;/q&gt; para pasar datos a las gorutinas y asegurar que completen su
ciclo, pero sobre todo y quiza lo mas interesante del lenguaje su orientacion a
objetos no evidente&lt;/p&gt;

&lt;p&gt;claro, el lenguaje tiene una forma &lt;q&gt;peculiar&lt;/q&gt; de organizar sus parametros
(al revez) que no pocas veces me ha causado transtornos cuando regreso a tocar
C, pero lo que mas me gusta es que no intenta ser innecesariamente complejo en
ningun aspecto, es mas, los programas son casi imperativos, la orientacion a
objetos aparece por si sola, aunque lo &amp;ldquo;metodos&amp;rdquo; requieren un poquito mas&lt;/p&gt;

&lt;p&gt;por defecto utiliza codificacion unicode utf-8, incorporando una utilidad
llamada &lt;code&gt;range&lt;/code&gt; que nos entrega los caracteres unicode sin tener que recurrir a
esotericas librerias, a si como convecion automagica de entre &lt;code&gt;runas&lt;/code&gt; unicode 32
a cadenas de caracteres utf-8, si necesitamos mas ya toca recurrir a la libreria
estandar&lt;/p&gt;

&lt;p&gt;por cierto, aunque el nucleo del lenguaje es compacto (bravo) la libreria
estandar es muy rica, te da un servidor web, analisis en cadenas, codificadores,
compresores y otro monton de cosas&lt;/p&gt;

&lt;p&gt;es sencillo crear programas relativamente complejos con estas facilidades,
aunque encuentro incomoda la herramienta de documentacion para linea de comandos&lt;/p&gt;

&lt;p&gt;no te voy a mentir, la libreria estandar es amplia, pero carece de librerias
nativas para graficos y esto es un punto flaco, tomando en cuenta que si te
apegas a la libreria estandar tus programas son multiplataforma y que el
costructor de programas es por naturaleza multiplataforma. Lamentablemente, veo
poco probable que algun dia llegue a tener librerias nativas para estos
menesteres&amp;hellip; a menos que el gestor de paquetes pueda meter sus manos en el
gestor de paquetes del sistema en si (apt, dnf, yum, etc)&lt;/p&gt;

&lt;p&gt;sobre esto, me encanta como administra las &amp;ldquo;librerias&amp;rdquo;/paquetes externos, nada
de buscar por internet, ni compilar a mano, ni naaah, el solito busca las
dependencias y las enlaza. Nunca perdonare al comite de los estandares de C y
C++, por no copiar este aspecto y evolucionarlos de forma razonable, si hicieran
su labor no tendria que aparecen Go&lt;/p&gt;

&lt;p&gt;respecto a la concurrencia, no tenia ninguna experiencia previa, era un tema
mistico, magico y misterioso y sin embargo he podido implementar un tipo
concurrente, aunque no se, encuentro un poco criptica las formas en que esta
implementada, aunque como digo desconosco como se haga esto en otros lenguajes,
de momento la puedo usar sin muchos complejos ingorando una parte que tenia que
ver con bucles for, captura de variables y cosas concurrentes que no me quedo
muy clara en el libro&lt;/p&gt;

&lt;h3 id=&#34;cosas-feas&#34;&gt;cosas feas&lt;/h3&gt;

&lt;p&gt;ademas del jodido formateo? cast, cast, cast por todas partes, y si no aplicas
cast, he?, creas una varible extra con el cast apropiado al inicio de la funcion&amp;hellip;
teniendo que asignar memoria extra&amp;hellip;?&lt;/p&gt;

&lt;p&gt;tan dificil y peligroso es asumir que el programador sabe que es lo que hace con
los tipos que escoge y en consonancia hacer conversion automatica de tipos, digo
con tener conversion autamatica en llamadas a fuciones seria un gran alivio,
pero no, ademas ni ellos resepetan su estricto y seguro tipado (ironia), pues
aveces hacen convesiones automaticas para ciertas tareas, a sabiendas de lo poco
practico de tal tipado, quedando mas que evinciado en su elecion de regresar
&lt;code&gt;int&lt;/code&gt;s aun en valores que deverian ser unsigned&lt;/p&gt;

&lt;p&gt;no le haria mal separar la herramienta en varias utilidades, en particular para
la documentacion, pruebas y perfilado&lt;/p&gt;

&lt;p&gt;tener un solo paquete por directorio es bueno, pero en paquetes conseptualmente
extensos puede ser dificil averiguar la procedencia de una funcion, no es grave
y es principalmente un problema del programador no distribuir el codigo de forma
coherente, pero aun asi se vuelve dificil seguir la logica de un programa extenso&lt;/p&gt;

&lt;h3 id=&#34;conclucion&#34;&gt;conclucion&lt;/h3&gt;

&lt;p&gt;Me gusta y lo recomiendo como lenguaje secundario, si bien es cierto que tiene
un fuerte enfoque para aplicaciones web, es un lenguaje de proposito general,
con un rendimiento aceptable&lt;/p&gt;

&lt;p&gt;segun pruebas mias, su rendimiento esta entre 3 a 4 veces mas lento que su
homologo en C, es decir, si un pragrama demora 1, en Go, demora 4 o 5, bueno no?
si, eheemee, aun tengo conflictos psicologicos al saber que va 3 o 4 veces mas
lento que C, pero bueno al menos no es 100 veces mas lento como el
&lt;q&gt;fabulosisimo&lt;/q&gt; python o JS&lt;/p&gt;

&lt;p&gt;momento, tengo que sacarlo de mi sistema, no programes con python, ni JS, no lo
hagas, por fabor, no son lenguajes poro programar por mas (falsamente) simples o
elgentes que sean, los lenguajes interpretados son para extender programas o
para servir como prompts, no para crear algo de cero. Sirve de algo tardar unas
horas menos programando en esos lenguajes cuando pasaras la eternidad
ejecutandolos lentamente? hay lo dejo&lt;/p&gt;

&lt;p&gt;Go apenas se encuentra en los limites que considero un rendiminto aceptable.&lt;/p&gt;

&lt;p&gt;Entre 7 y 10 veces mas lento que C, sin importar el paradigma, solo podre
considerar al lenguaje una &lt;q&gt;curiosidad&lt;/q&gt; intelectual&lt;/p&gt;

&lt;h2 id=&#34;porg&#34;&gt;porg&lt;/h2&gt;

&lt;p&gt;durante el ultimo mes, he estado traduciendo o mas bien dando sentido a la
traduccion de las maquinas sobre el libro en cuestion, pueden optener el codigo
con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/nasciiboy/TGPL.git
cd TGPL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;abren los ficheros &lt;code&gt;html&lt;/code&gt; en su navegador de confianza (pista: el que tiene un
sufijo &lt;code&gt;es&lt;/code&gt;, es el que esta en español&lt;/p&gt;

&lt;p&gt;para crear el material desde el codigo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u https://github.com/nasciiboy/morg
morg toHtml The-Go-Programming-Language.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;morg toHtml The-Go-Programming-Language_es.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para ver el fichero directamente en su terminal, utilice &lt;code&gt;morg tui fichero.morg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;si quiere colorizar el codigo en la exportacion a html, necesita tener instalado
&lt;code&gt;pygmentize&lt;/code&gt; (python pygments), y agregar &lt;code&gt;pygments&lt;/code&gt; a &lt;code&gt;options&lt;/code&gt; (dentro del
documento), asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..options &amp;gt; pygments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en fin, una labor estandar de traduccion a mi estilo sin acentos.&lt;/p&gt;

&lt;p&gt;apenas es lo suficientemente entendible, y apenas dare mi primer lectura seria
al libro y de paso corrijo algunas cosas.&lt;/p&gt;

&lt;p&gt;tuve problemas al localizar muchas cosas, pero si quieres colaborar a mejorar un
manual que nunca iba a aparecer en españøl, tienes mi correo y clave gpg abajo&lt;/p&gt;

&lt;p&gt;happy hacking, en la proxima entrega nasciiboy inc. por cierto si retiran este
sitio de internete, dadle asilo&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nirvana</title>
      <link>https://nasciiboy.github.io/prog/nirvana/</link>
      <pubDate>Thu, 20 Apr 2017 11:54:03 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/nirvana/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hu! ha!&lt;/strong&gt;, imparable el proyecto de programacion morg (nombre temporal) es (o
no), mientras tanto y a modo de respaldo (por si en algun momento me convierto
al lado privativo de la fuerza&amp;hellip;) les presento las ultimas novedades
codificadas del proyecto&lt;/p&gt;

&lt;p&gt;Primero se agrego &lt;strong&gt;katana&lt;/strong&gt; que conceptualmente se encarga de parsear/cortar el
texto plano formateado, y regresar una estructura convenientemente estructurada
que facilita cualquier labor a realizar.&lt;/p&gt;

&lt;p&gt;Dentro de la estructura se enucuentran los datos del documento y opciones,
ademas de un arreglo de &lt;strong&gt;nodos&lt;/strong&gt;, llamado &lt;code&gt;Toc&lt;/code&gt; donde cada elemento es un
encabezado (de cualquier nivel) que contiene los parrafos, listas, abouts,
tablas, comandos, etc.&lt;/p&gt;

&lt;p&gt;Luego se agrego &lt;strong&gt;nirvana&lt;/strong&gt; (nombre temporal) que conceptualmente se encarga de
desplegar visualmente los documentos. Al momento de escribir esto, solamente hay
un poco de codigo que muestra el documento en terminal.&lt;/p&gt;

&lt;p&gt;Creo que este componente terminara por desaparecer, o incorparese de otra
manera, en fin&amp;hellip;&lt;/p&gt;

&lt;p&gt;Finalmente para que funsionase &lt;strong&gt;nirvana&lt;/strong&gt; era necesario poder dibujar cosas en
terminal, siguiendo la &lt;q&gt;Canonical Way&lt;/q&gt; tome codigo de internet (termbox-go)
sobre el cual edificar mi propia libreria de manejo de terminal, con casinos y
colegialas japonesas! el nombre? &lt;strong&gt;tui&lt;/strong&gt; (text user interface) que esta
fuertemente impirado en ncurses, pero con un poco de orientacion a objetos&lt;/p&gt;

&lt;p&gt;Ahora, la integracion entre &lt;strong&gt;nirvana&lt;/strong&gt; y &lt;strong&gt;tui&lt;/strong&gt; fue compleja, pues aun con el
documento parseado (katana), la interaccion entre el formato y su tratamiento a
&lt;q&gt;imagen&lt;/q&gt; no es un asunto trivial, lo que termine haciendo fue agregar
interpretacion directa del formato en &lt;strong&gt;tui&lt;/strong&gt; con un objeto llamado &lt;code&gt;Pad&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bueno, bueno, estos son temas para charlas directas o libros extensos (escritos
por gente competente), el codigo esta echo al vapor con porciones grandes de
espageti, es decir, es un lio, aunque tiene un regusto, que deja la impresion de
llegar a ser algo molon algun dia en un futuro proximo.&lt;/p&gt;

&lt;p&gt;Libero esta prematura version, con motivo de poder mostrarla en una sede del
flisol, para agregar o convencer, a seres que se una al proyecto.&lt;/p&gt;

&lt;p&gt;No deja de ser una prueba de concepto. Muchas caracteristicas no fueron
implementadas, con otras no se que hacer para la version de terminal
(imagenes/videos), ademas la libreria grafica presenta algunos &amp;ldquo;artefactos&amp;rdquo;
ocacionalmente, creo que debidos al unicode.&lt;/p&gt;

&lt;p&gt;Con todo, me sorprende el resultado, aun con la libreria de expresiones
regulares hecha en casa, la lectura del fichero, el parseo, transformaciones y
visualizacion, un documento que en pdf abarca casi 600 paginas, se despliega en
terminal en cerca de 2 segundos (sin programacion paralela, que de eso, aun no
conosco), alucinante! esta es la razon por la que utilizar lenguajes de
scripting es un error, el &lt;q&gt;desarrolla rapido, ejecuta lento&lt;/q&gt; es un
desproposito! todo programa debe aspirar a la grandeza, a la eficiencia y ser
veloz!&lt;/p&gt;

&lt;p&gt;oh, modifique un poco el comando. Ahora se utiliza &lt;code&gt;morg export
mi-documento.morg&lt;/code&gt; para convertir del funte a html y &lt;code&gt;morg tui
mi-documento.morg&lt;/code&gt; para mostrar el documento en terminal&lt;/p&gt;

&lt;p&gt;si aun no tienen instalado morg, pero ya cuentan con go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o si ya lo tienes, para actualizar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nota: aun no actualizo los readmes de proyecto, quiza en un par de dias)&lt;/p&gt;

&lt;p&gt;me gustaria decir &lt;strong&gt;Happy Haking&lt;/strong&gt;&amp;hellip; pero ni el codigo, ni el formato estan aun
definidos por lo que trabajar en ellos en este momento puede ser (o no) una
perdida de tiempo&amp;hellip; veanlo como un adelanto del 🌈futuro🌈&lt;/p&gt;

&lt;h2 id=&#34;mooo&#34;&gt;Mooo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;unas &lt;strong&gt;capturas&lt;/strong&gt; del invento en accion&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nasciiboy.github.io/img/katana-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programmer&#39;s Guide to NCurses</title>
      <link>https://nasciiboy.github.io/prog/pg2ncurses/</link>
      <pubDate>Tue, 11 Apr 2017 12:38:06 -0500</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/pg2ncurses/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../gumy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go, que no es un lenguaje nuevo (ya tiene sus añitos) carece de librerias
nativas para desplegar guis, asi como tuis&amp;hellip; bueno esto ultimo no es del todo
cierto, pues cuenta con unas pocas librerias nativas para mostrar graficos por
la terminal, solo queeee, estan muy verdes, me explico, tienes la habilidad de
modificar los &lt;q&gt;caracteres&lt;/q&gt;, conocer la dimencion de la terminal, leer la
entrada del rator (y teclado) y poco mas, ni funciones para desplegar texto, ni
scroll, ni todo el arsenal de funciones que por ejemplo, posee &lt;strong&gt;ncurses&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Asi que lo mas logico fue &lt;s&gt;cambiar de lenguage&lt;/s&gt; comenzar la escritura de
una nueva libreria para hacer cosas en la terminal, con casinos y colegialas
japonesas!&lt;/p&gt;

&lt;p&gt;Da la  casualidad, que tenia a la mano el libro &lt;strong&gt;Programmer&amp;rsquo;s Guide to Ncurses&lt;/strong&gt;
de un tal Dang Gookin y ya que estaba en la labor hago una breve reseña del
asunto (y otras cosas)&lt;/p&gt;

&lt;p&gt;Por cierto si nos sabes que es ncurses, puedes visitar un post
relacionado &lt;a href=&#34;../ncurses/index.html&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;comor&#34;&gt;comor?&lt;/h2&gt;

&lt;p&gt;El libro asume que tienes conocimientos de programacion, especificamente
programacion en C, que es el lenguaje con el que esta escrita la libreria ncurses,
aunque tambien podrias utilizar C++.&lt;/p&gt;

&lt;p&gt;Tambien, que estas o vas a programar bajo un entorno *nix, con un arsenal
formado por un terminal (con bash), editor y un compilador (gcc), aunque esto
queda mas como una recomendacion. Aun asi se toma un par de secciones para
enseñar lo mas basico antes de iniciar. Quedando como asignacion a quien tome el
material, profundizar en el uso de estas herramientas&lt;/p&gt;

&lt;p&gt;Una vez aclarado el tema, la estructura de la lectura es: plantear/mostrar unas
cuantas funciones de la libreria, dejar el codigo fuente de un programa con
dichas funciones y analizar un poco el asunto.&lt;/p&gt;

&lt;p&gt;La &lt;q&gt;dificultad&lt;/q&gt; aumenta de forma incremental, a medida que se van
introduciendo los conseptos propios de ncurses (estos ultimos son suficientes
para hacerse de una idea de como esta implementada la libreria, o al menos sirve
de guia para implementar una propia) pasando por mostrar texto, leer la entrada
del teclado, refrescar la pantalla, ventanas, color, etc.&lt;/p&gt;

&lt;p&gt;Si bien todo es muy ameno, con un lenguaje relajado y no existen retos que
puedan frustrar a quien inicia, lamentablemente el asunto no pasa de ser un
&lt;strong&gt;paseo por la libreria&lt;/strong&gt;. Puedes olvidarte de tener el codigo para construir
una interfaz molona, menos, fantacear con programar un videojuego o un editor de
texto.&lt;/p&gt;

&lt;p&gt;Digo el material (pdf) son 570 paginas, aunque tiene truco, de esas paginas lo
didactico representa el 35% con letra grande y un monton de listados (esto esta
bien), el resto es una &lt;q&gt;compilacion&lt;/q&gt; de todas las funciones, con una
pequeña explicacion, su formato, notas y ejemplos, muy del estilo de las paginas
man (sospecho que con un pequeño retoque). Llega a dar la imprecion que solo fue
hecho para sacar algunas monedas, algo lamentable, pues aparte de una
pequeña guia oficial de la libreria, este es el unico material de consulta sobre
el tema y encima los dos (estaban) en ingles.&lt;/p&gt;

&lt;p&gt;Entonces? es bueno para conocer los fundamentos de ncurses, salir de
algunas dudas y como material de referencia. Si deseas profundizar y ejemplos
mas elaborados, necesario acudir a la documentacion oficial de la libreria
(NCURSES Programming HOWTO).&lt;/p&gt;

&lt;h2 id=&#34;prison-blues&#34;&gt;Prison Blues&lt;/h2&gt;

&lt;p&gt;a bbeeee, boooohoo, hooo, beeep, beibe. Hace mucho, mucho tiempo, mientras
experimentaba con org mode, el sujeto de este post sirvio
de &lt;a href=&#34;../cobaya.zip&#34;&gt;cobaya&lt;/a&gt; en la busqueda del sistema de documentacion
definitivo(?), tambien como excusa para traducir cosas y aprender (o no) un poco
ingles de forma salvaje.&lt;/p&gt;

&lt;p&gt;Por aquel tiempo imaginaba que prodria finaciarme adaptando libros a formato
digital, cobrando en $dolares. El asunto no fue muy bien e incluso fui llamado
ladron, je, quiza con razon, como saberlo. Lo intente un par de veces mas
enviando el material a algunas editoriales sin resivir respuesta, en fin.&lt;/p&gt;

&lt;p&gt;Al menos, sirvio para conocer los limites de org-mode, que cayo de mi gracia, al
igual que ncurses, por cierto la hoja de estilos, no esta muy fina y lo
referente al español, solo fue revisado mientras lo iba leyendo.&lt;/p&gt;

&lt;p&gt;Org-mode, tiene pocos estilos de resaltado y sus estructuras no estan pensadas
para maquetar documentos extensos, asi que alguna seccion puede fallar, ademas
la traduccion esta en bruto sobre el material original comentado. Se puede
exportar del fuente, pero org es lento y puede fallar, por aquel tiempo un bug
en alguna cosa hacia que emacs se colgara un rato y consumiera 3gb de ram el
solito, motivo por el cual tuve que expardir la memoria a 8gb. No se por que
sera pero no se resalta en colores el codigo fuente.&lt;/p&gt;

&lt;h2 id=&#34;sobre-ncurses&#34;&gt;sobre ncurses&lt;/h2&gt;

&lt;p&gt;Partiendo del principio de que ncurses es heredero de una libreria que permitia
mayor control &lt;strong&gt;sobre un terminal&lt;/strong&gt;, con hardware y software primigenios de
limitadas capacidades, unica y exclusivamente para manejar texto codificado en
ASCII&amp;hellip; fue perfecto!&lt;/p&gt;

&lt;p&gt;Ahora bien, en el precente con equipo que es capaz de mostrar mas colores que el
arcoiris, emuladores de terminal sobre entornos graficos y mas caracteres que
chinos&amp;hellip; es limitado.&lt;/p&gt;

&lt;p&gt;No se mal entienda un terminal es para ser un terminal, su deber es ser
eficiente desplegando texto, no tiene sentido dedicar 4 bytes por caracter para
almacenar colores, ni 2 bytes para atributos (negrita, italica, subrayado, etc),
menos tener la capacidad de modificar los caracteres a nivel pixel (para generar
imagenes), como tampoco tener velocidades de refresco de pantalla mayores a 10 o
20 ciclos, o contar con &lt;strong&gt;&lt;q&gt;modos graficos&lt;/q&gt;&lt;/strong&gt;, soporte para mandos, o midi,
o que la lectura de teclado y raton fuesen librerias independientes&lt;/p&gt;

&lt;p&gt;Pero por que tener la necesidad de averiguar si el terminal puede hacer esto o
aquello, si tiene o no soporte para colores (8, 16, 256, etc), no puede haber un
jodido estandar que me asegure poder desplegar interfaces lizergicas
basadas en texto, con midis y pad, si o si?&lt;/p&gt;

&lt;p&gt;La documentacion y ser software libre son importantes, tanto como lo es para mi
el contar con codigo para subnormales (como yo), quiza es lentitud mia el
encontrar indescifrable el codigo de Ncurses, seran las macros? los guiones
bajos?&amp;hellip; misterioso (ademas de digno de respeto) que un solo individuo lleve el
desarrollo de esta libreria desde hace varios años (que hace poco libero la
vercion 6 (sin aparentes cambios)), los motivos, son un enigma digno de mayor
analisis, te ha pasado actualizar la pantalla con algun &lt;code&gt;wrefresh&lt;/code&gt; y no ver
cambios?&lt;/p&gt;

&lt;p&gt;(narrador) Y asi mientras nasciiboy se cuestionava sobre el pasado, presente y
futuro de las terminales, otro dia mas llegaba a su fin en la isla de los heroes
del viento, no dejen de sintonizar la proxima entrega (/narrador)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>yorozuya</title>
      <link>https://nasciiboy.github.io/prog/yorozuya/</link>
      <pubDate>Tue, 14 Mar 2017 16:33:15 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/yorozuya/</guid>
      <description>&lt;p&gt;&lt;em&gt;Yorozuya&lt;/em&gt; en una tienda donde se toma cualquier tipo de trabajo por una
tarifa&amp;hellip; bienvenidos los encargos!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../yorozuya.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;bueno, bueno, matizando un poco y conectado con la saga de post
sobre &lt;a href=&#34;https://nasciiboy.github.io/tags/morg&#34;&gt;morg&lt;/a&gt;, me encontraba aprendiendo
golang y para tener una referencia rapida del lenguaje, pase el libro oficial
(apartir de un pdf) a morg (&lt;a href=&#34;../tgpl.zip&#34;&gt;AQUI&lt;/a&gt; el material, fuente, resultado e
imagenes). Aun le falta una revision &lt;q&gt;fina&lt;/q&gt; que ire realizando a medida que
avance su lectura, aunque la actualizacion quisa solo vea la luz cuando aparesca
el proyecto morg al 100%.&lt;/p&gt;

&lt;p&gt;Por cierto, aunque solo he leido (medio entendiendo english) hasta el capitulo
2, el libro promete a lo grande, eso si como no se hagan los ejersicios dificil
sera dominar el asunto.&lt;/p&gt;

&lt;p&gt;Claro que hay mas cosas de donde salio esta! como: &lt;em&gt;The Land of Lisp&lt;/em&gt;, &lt;em&gt;Clean
Code&lt;/em&gt;, &lt;em&gt;Programmer&amp;rsquo;s Guide to NCurses&lt;/em&gt;, &lt;em&gt;The C programming Languge&lt;/em&gt;, &lt;em&gt;In the
Beginning was the Command Line&lt;/em&gt;, &lt;em&gt;matematicas para programadores&lt;/em&gt;, &lt;em&gt;elisp&lt;/em&gt;,
&lt;em&gt;arduino projects for the evil genius&lt;/em&gt;, &lt;em&gt;openGL game programming&lt;/em&gt;, &lt;em&gt;rama&lt;/em&gt;,
&lt;em&gt;dune&lt;/em&gt;, &lt;em&gt;el fin de la eternidad&lt;/em&gt;, &lt;em&gt;3012&lt;/em&gt;, &lt;em&gt;Fahrenheit 451&lt;/em&gt;, &lt;em&gt;El calculo de
dios&lt;/em&gt;, y otros tantos a medio hacer. Las novelas las adapte para obligarme a
leerlas y los libros para averiguar si eran interesantes, ademas de prara
practicar mecanografia transcribiendo unos 5 de ellos (la dislexia y poca
habilidad literaria es un defecto incorregible). El asunto es que este es el
primero (o mejor dicho el ultimo) que cumple con la sintaxis actual&lt;/p&gt;

&lt;p&gt;El proceso de adaptacion fue sencillo, pero fueron necesarios pequeños ajustes
al exportador. Lo mas complejo fue hacer una funcion que convirtiese las tablas
a html y agregar un comando para crear columnas. Siendo sincero no me complique
mucho y dichos comandos son en realidad muy basicos.&lt;/p&gt;

&lt;p&gt;Ademas descubri que mes mejor exportar el comando &lt;code&gt;&amp;quot;&lt;/code&gt; como &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; en lugar de
&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; (internamente se ve mejor) y que no es buena idea colocar targets
dentro de los encabezados, por que al generar la tabla de contenidos hay una
coalicion de identificadores, a menos que se desactive la intepretacion de
contenido en la tabla de contenidos, peeeroo, si el exportador ya genera un
blaco automagicamente, por que habria que crear target adicional?&lt;/p&gt;

&lt;p&gt;Como el documento no tiene formulas matematicas, no tuve que lidiar con latex,
ni buscar un generador de texto a imagen, por otro lado, el material esta lleno
de referencias (enlaces), y &lt;em&gt;&lt;q&gt;citas&lt;/q&gt;&lt;/em&gt; (commillas dobles), asunto que
dificulta (pero no imposibilita) la lectura del documento fuente en texto plano&lt;/p&gt;

&lt;p&gt;El resaltado de codigo se realiza con pygments, asi que si quieres comprobar que
morg funciona tiene que tenerlo instalado (y esperar un rato, python es
&lt;b&gt;lento&lt;/b&gt;), o en su defecto eliminar &lt;code&gt;pygments&lt;/code&gt; del comando de configuracion
&lt;code&gt;..options &amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por cierto, la imagenes las optuve con capturas en png. Para hacer ligero el
resultado converti a jpg, ho, y un par de imagenes (graficos) las hice con texto
plano, en el fuente se ven bien, pero en el html las exporto como codigo, asi
que desentonan&amp;hellip;&lt;/p&gt;

&lt;p&gt;En fin, si el resultado o el metodo es de tu agrado y deseas que adapte un
documento o cooperar con la causa, recivo pedidos. El precio por algo de similar
complejidad a la muestra, es de 500 euros/dolares (en nasciiboy inc. no hay
sobreprecio). El proceso de adaptacion toma entre 1 o 2 semanas de tiempo ocioso&lt;/p&gt;

&lt;p&gt;pd: tambien son bienvenidas las criticas al estilo visual&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>morg: como usar</title>
      <link>https://nasciiboy.github.io/prog/morg-howto/</link>
      <pubDate>Sun, 12 Mar 2017 09:33:15 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg-howto/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../hello.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;la aleatoriadad llevo a programar morg en golang (aunque creo que ya se como
portarlo a c) de momento a instalar go&lt;/p&gt;

&lt;h2 id=&#34;instalar-go-version-gnu&#34;&gt;instalar go (version GNU)&lt;/h2&gt;

&lt;p&gt;primero ve a la direccion &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt; y clica el enlace de descarga
donde diga algo como (al dia de escribir esto)
&lt;em&gt;go1.8.linux-amd64.tar.gz&lt;/em&gt; (Cambia el &lt;em&gt;amd64&lt;/em&gt; por la arquitectura
de tu equipo)&lt;/p&gt;

&lt;p&gt;Si todo va bien tendras el comprimido en &lt;code&gt;$HOME/Downloads&lt;/code&gt;, abrimos un terminal
y vamos hay&lt;/p&gt;

&lt;h3 id=&#34;segun-la-guia-oficial&#34;&gt;segun la guia oficial&lt;/h3&gt;

&lt;p&gt;pasa a modo root, y ejecuta&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tar -C /usr/local -xzf go*.tar.gz
rm go*.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esto crea la carpeta &lt;code&gt;/usr/local/go&lt;/code&gt; que en su interior contiene todo lo
necesario para ejecutar go y sus cosillas. Si la curiosidad te puede ve a dicha
carpeta y observa que regalos contiene (me parecio interesante la estructura de
los articulos en la carpeta&lt;code&gt;blog&lt;/code&gt;, al parecer los de google tambien estan
ideando su lenguaje de marcas ligeras).&lt;/p&gt;

&lt;p&gt;Ahora bien, la carpeta &lt;code&gt;/usr/local/go&lt;/code&gt; tiene un directorio &lt;code&gt;bin&lt;/code&gt; donde se
encuetra el compilador/interprete/formateador y otras cosas del lenguaje.&lt;/p&gt;

&lt;p&gt;Da la casualidad, que nuestro shell no sabe eso, asi que hay que informarle
donde buscar estos binarios, para que luego, de forma comoda se pueda escribir
&lt;code&gt;go algo&lt;/code&gt; y se ejecute sin mas.&lt;/p&gt;

&lt;p&gt;pero antes, de configurar &lt;code&gt;$PATH&lt;/code&gt;&amp;hellip; go necesita una ruta donde colocara el
codigo de los proyectos, dependencias y demas cosas que descarguemos, esto se
establece en la variable de entorno &lt;code&gt;GOPATH&lt;/code&gt;, en mi caso&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export GOPATH=/home/nasciiboy/go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora cuando le pida a &lt;code&gt;go&lt;/code&gt;, que me instale algo, lo colacara dentro de la
carpeta &lt;span class=&#34;file&#34; &gt;go&lt;/span&gt; en mi
home&amp;hellip; peero para ejecutar los binarios que se creen en dicha direccion tambien
debe agregarse esta direccion a &lt;code&gt;$PATH&lt;/code&gt;. Vamos con ello&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;es decir, al final tenemos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export GOPATH=/home/nasciiboy/go
export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;obviamente, queremos que los cambios sean permanentes, asi que agregamos la
configuracion en &lt;code&gt;~/.bashrc&lt;/code&gt; o similar&lt;/p&gt;

&lt;h3 id=&#34;opcion-personalizada&#34;&gt;opcion personalizada&lt;/h3&gt;

&lt;p&gt;no me fio mucho de google, para reducir los daños, prefiero colocar los binarios
y todo lo demas en mi &lt;code&gt;$HOME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;sin pasar a root, ni naaah&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# se asume estar en ~/Downloads
tar -C . -xzf go*.tar.gz
rm go*.tar.gz
mv go ../.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;con esto dejamos los binarios y cosas de go en la carpeta &lt;code&gt;.go&lt;/code&gt; en nuestro
&lt;code&gt;$HOME&lt;/code&gt; configuramos variables de entorno&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export GOROOT=/home/nasciiboy/.go
export GOPATH=/home/nasciiboy/go
export PATH=$PATH:$GOPATH/bin:$GOROOT/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;code&gt;GOROOT&lt;/code&gt; segun la pagina de instalacion de golang, se necesita para
instalaciones a medida como en este caso)&lt;/p&gt;

&lt;p&gt;Si utilizas &lt;code&gt;fish&lt;/code&gt; en lugar de &lt;code&gt;bash&lt;/code&gt;, como en mi caso, la configuracion se
agrega de la siguiente manera&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set --export GOROOT /home/nasciiboy/.go
set --export GOPATH /home/nasciiboy/go
set --export PATH   $PATH $GOPATH/bin $GOROOT/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en  &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;morg&#34;&gt;morg&lt;/h2&gt;

&lt;p&gt;vamos al meollo del asunto, ya con &lt;code&gt;go&lt;/code&gt; en el sistema, instalamos morg:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si ya tenemos morg y queremos actualizar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nota: no se para que sea la &lt;code&gt;v&lt;/code&gt;, asi lo vi en un proyecto&amp;hellip; y asi lo dejo)&lt;/p&gt;

&lt;p&gt;para quien no lo sepa, morg es un lenguaje de marcas ligeras que pretende
dominar el mundo, terminar con el empleo, y otras cosas (probablemente demasiado
ambisiosas)&lt;/p&gt;

&lt;p&gt;el sistema de documentacion aun esta en fase inicial y no es mi proposito ni
intencion definir o programar todos los aspectos, pero vamos a lo basico&lt;/p&gt;

&lt;h3 id=&#34;primer-paso&#34;&gt;primer paso&lt;/h3&gt;

&lt;p&gt;creamos en nuestro editor de confiansa un fichero con (o sin) terminacion
&lt;code&gt;.morg&lt;/code&gt;, para el caso  &lt;em&gt;ejemplo.morg&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;en su interior ponemos algo de texto, como &lt;code&gt;hola morg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;o con un &lt;code&gt;echo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;hola morg&amp;quot; &amp;gt; ejemplo.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y exportamos a html, que por el momento es lo unico que morg sabe hacer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;morg ejemplo.morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;listo, se genera un fichero de nombre &lt;code&gt;ejemplo.html&lt;/code&gt; con nuestro documento.&lt;/p&gt;

&lt;p&gt;Agregemos mas cosas. morg utiliza &lt;strong&gt;comandos&lt;/strong&gt; para configurar el documento:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..title    &amp;gt;  Morg, ejemplo y otras cosas
..author   &amp;gt;  nasciiboy
..lang     &amp;gt;  es
..date     &amp;gt;  2016
..tags     &amp;gt;  regex regexp c-prog algorithm
..licence  &amp;gt;  GNU FDL v1.3
..style    &amp;gt;  worg-data/worg.css
..options  &amp;gt;  toc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;los comandos de configuracion tienen la estructura &lt;code&gt;..&lt;/code&gt; (dos puntos) &lt;code&gt;comando&lt;/code&gt;
(el comando) y &lt;code&gt;&amp;gt;&lt;/code&gt; (mayor que) y luego sigue &lt;code&gt;argumento&lt;/code&gt;, que es todo lo que se
encuentre en la misma linea de la declaracion, aunque puede extenderse por
varias lineas, siempre y cuando no se dejen lineas en blanco y se cumpla una
indentacion de dos espacios, como en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..title &amp;gt; este es un tutulo de documento muy muy
  extenso, como para ocupar multiples lineas
  y mas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un comando de configuracion finaliza cuando se encuentra la primer linea en
blanco o se incumple con la indentacion (en caso de que el argumento abarque
multiples lineas)&lt;/p&gt;

&lt;p&gt;Ademas los comandos de configuracion deben colocarse al inicio del documento,
sin dejar espacios en blanco entre el inicio de la linea y la declaracion del
comando. Este &lt;q&gt;bloque de configuracion&lt;/q&gt; terminara en cuanto aparesca el
primer parrafo o encabezado&lt;/p&gt;

&lt;p&gt;el comando &lt;code&gt;style&lt;/code&gt; sirve para establecer la ruta a una hoja de estilos, para el
caso un css. De momento &lt;a href=&#34;../worg-data.zip&#34;&gt;este&lt;/a&gt; es el que utilizo, puedes
encontrar la version &lt;em&gt;de desarrollo&lt;/em&gt; dentro del codigo fuente, si vas a
&lt;code&gt;~/go/src/github.com/nasciiboy/morg/biskana/testdata/worg-data/worg.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;si no se incluye un titulo (&lt;code&gt;..title &amp;gt; titulo&lt;/code&gt;) en el documento, se asigna el
nombre del fichero como el titulo.&lt;/p&gt;

&lt;p&gt;de momento el comando &lt;code&gt;options&lt;/code&gt; permite tres cosas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Si colocamos &lt;code&gt;toc&lt;/code&gt; se creara una tabla de contenido (indice)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Con &lt;code&gt;highlight&lt;/code&gt; se incluira el enlace a un script para resaltar el codigo
fuente, este apunta a una carpeta de nombre &lt;code&gt;highlight&lt;/code&gt; que debe encontrarse
en la misma ruta que el fichero resultado&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para optener tu carpeta &lt;code&gt;highlight&lt;/code&gt; ve
  a &lt;a href=&#34;https://highlightjs.org/download/&#34;&gt;esta&lt;/a&gt; pagina y especifica que lenguajes
  deseas, descarga, descomprime y coloca en la misma carpeta del resultado, o en
  &lt;code&gt;~/go/src/github.com/nasciiboy/morg/biskana/testdata/&lt;/code&gt; encortraras la carpeta
  &lt;code&gt;highlight&lt;/code&gt; con todos los lenguajes disponibles, copia y mueve a tu directorio
  de trabajo&lt;/p&gt;

&lt;p&gt;Coloque un estilo por defecto en el codigo fuente, la forma mas sencilla de
  modificarlo es hacelo el fichero resultado (a mano), los estilos de resaltado
  disponibles estan dentro de &lt;code&gt;highlight/styles&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Si por el contrario si (tienes instalado y) quieres que el resaltado se
incluya con etiquetas utilizando &lt;code&gt;pygments&lt;/code&gt;, debes utilazar esta opcion en
options &lt;code&gt;..options &amp;gt; pygments&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;encontraras tambien dentro del &lt;a href=&#34;../worg-data.zip&#34;&gt;css&lt;/a&gt;, etiquetas para
  establecer el estilo del resaltado.&lt;/p&gt;

&lt;p&gt;Puedes opteren mas estilos css para
  pygments &lt;a href=&#34;https://github.com/jwarby/jekyll-pygments-themes/&#34;&gt;aqui&lt;/a&gt;, descarga
  el estilo, y agrega un comando &lt;code&gt;..style &amp;gt; direccion/a/mi/pygments.css&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;estructura&#34;&gt;estructura&lt;/h3&gt;

&lt;p&gt;la estructura es fundamental en un lenguaje de marcas que se precie. En el caso
de morg (basado en org, md reestructure text, texinfo y otras cosas) se opta
por dividir el documento en secciones o encabezados&lt;/p&gt;

&lt;p&gt;La sintaxis de un encabezado es muy simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org-mode&#34;&gt;* Encabezado principal
** Segundo nivel
*** 3er. nivel

    primer parrafo del 3er. nivel

    segundo parrafo del 3er. nivel

*** otro 3er. nivel

    mas texto

* Otro encabezado principal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(como vez, he indentado el texto que pertenece a cada encabezado (no es
necesario, pero a mi me gusta que se vea asi).&lt;/p&gt;

&lt;p&gt;Toda linea que inicia con uno o varios &lt;code&gt;*&lt;/code&gt; seguido por al menos un espacio en
blanco, es un encabezado.&lt;/p&gt;

&lt;p&gt;El texto (en la misma linea) donde esta el o los &lt;code&gt;*&lt;/code&gt; sera el titulo del encabezado.&lt;/p&gt;

&lt;p&gt;El nivel del encabezado depende del numero de &lt;code&gt;*&lt;/code&gt; al inicio de la linea, es
decir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; == &lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; == &lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;***&lt;/code&gt; == &lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;****&lt;/code&gt; == &lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*****&lt;/code&gt; == &lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(en realidad, al exportar a html, los encabezados se desplazan en uno, el titulo
del documento es el que se corresponde con &lt;code&gt;h1&lt;/code&gt;, pero lo dejo asi para evitar
esfuerzo mental)&lt;/p&gt;

&lt;p&gt;A que encabezado pertenece el texto? al primero que aparezca por encima de
el. Si no tiene un encabezado encima pertenece al &lt;q&gt;titulo&lt;/q&gt; del documento&lt;/p&gt;

&lt;p&gt;por cierto, el titulo de los encabezados (al igual que el argumento de los
comandos de configuracion) puede extenderse en varias lineas siempre y cuando se
respete la indentacion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** encabezada dividido en multiples lineas
   por ser demasiado extenso y a modo
   de ejemplo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por cierto, todos los encabezados generan una referencia dentro del documento,
donde se substituyen los espacios en blanco por &lt;code&gt;-&lt;/code&gt; (menos), por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** El Raptor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generara&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&amp;quot;El-Raptor&amp;quot; &amp;gt;El Raptor&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si deseamos especificar el contenido de la referencia, se utiliza la sintaxis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** referencia personalizada &amp;lt;&amp;gt; texto del encabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&amp;quot;referencia-personalizada&amp;quot; &amp;gt;texto del encabezado&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enfasis-bold-links-el-comando&#34;&gt;enfasis, bold, links, el comando &lt;code&gt;@&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;otros lenguajes de marcas ligeras utilizan marcas varias, el problema con este
enfoque radica en naturaleza exotica de las marcas, que los limitan a dos o tres
formas de resaltado, antes de recurrir a etiquetas html (blasfemia).&lt;/p&gt;

&lt;p&gt;luego de meditar por 15 dias, 10 noches, ver texinfo y realizar una
investigacion con fondos provenientes del gobierno (nada extraordinario, solo un
par de millones) se descubrio &lt;em&gt;la sintaxis&lt;/em&gt; de marcas perfecta&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@x()
@x[]
@x{}
@x&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;@&lt;/code&gt; indica &lt;em&gt;a continuacion contenido especial&lt;/em&gt;, &lt;code&gt;x&lt;/code&gt; es un caracter
ascii imprimible, que describe el comando o accion a aplicar al contenido
delimitado por &lt;code&gt;{…}&lt;/code&gt;, &lt;code&gt;(…)&lt;/code&gt;, &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; o &lt;code&gt;[…]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;por que una &lt;code&gt;@&lt;/code&gt;?&lt;/em&gt; Fuera de algun lenguaje exotico o el correo, podria
ser el signo menos utilizado y mas aun con la estructura &lt;code&gt;@x{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;y la &lt;code&gt;x&lt;/code&gt;?&lt;/em&gt; Un caracter ascii imprimible. Si hemos de necesitar mas
marcas que los caracteres ascii, mal vamos.&lt;/p&gt;

&lt;p&gt;de momento, puedes utilizar las marcas de resaltado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- A :: acronym
- a :: abbr
- b :: bold
- c :: code
- e :: emph
- f :: file
- &#39; :: ‘samp’
- &amp;quot; :: cite
- i :: italic
- k :: kbd
- ^ :: sup
- _ :: sub
- m :: math
- q :: quote
- - :: —exp—
- s :: strike
- u :: underline
- v :: verbatim
- $ :: command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;^&lt;/code&gt; sirve para generar superindices y &lt;code&gt;_&lt;/code&gt; para los subindices&lt;/p&gt;

&lt;p&gt;&lt;em&gt;y los &lt;code&gt;({[&amp;lt;&amp;gt;]})&lt;/code&gt;?&lt;/em&gt; Mas opciones, mas diversion.&lt;/p&gt;

&lt;p&gt;Segun sea el contexto &lt;code&gt;{}&lt;/code&gt; o &lt;code&gt;()&lt;/code&gt; podrian requerir el &lt;em&gt;escape&lt;/em&gt; de algun
caracter. Para minimizar la inclucion de signos extraños, los delimitadores se
aplican deacuerdo a la necesidad y gusto del &lt;q&gt;creador&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;importante resaltar que el signo &lt;code&gt;@&lt;/code&gt; sirve tambien para escapar caracteres,
cuando no se cumple la secuencia &lt;code&gt;@x()&lt;/code&gt;, por ejemplo, &lt;code&gt;@(&lt;/code&gt; se substituye por
&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;@}&lt;/code&gt; por &lt;code&gt;}&lt;/code&gt;. (nota: dentro del texto o un comado &lt;code&gt;@&lt;/code&gt; para que aparesca &lt;code&gt;@&lt;/code&gt;
hay que colocar &lt;code&gt;@@&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;los comandos &lt;code&gt;@&lt;/code&gt; pueden utilizarse en cualquier sitio, inclusive dentro de la
configuracion del titulo, encabezados, tablas y demas, (solo no colocar en otros
comandos de configuracion que no sean &lt;code&gt;title&lt;/code&gt; no contemplo esta sitiacion y no
tiene sentido&amp;hellip;&lt;/p&gt;

&lt;p&gt;los &lt;q&gt;comandos&lt;/q&gt; &lt;code&gt;@&lt;/code&gt; soportan anidamiento de otros comandos como en &lt;code&gt;@b(bold
@e(emph @i(italic)))&lt;/code&gt;. En caso de no encontrar el operador de cierre de un
comando, la accion de este tendra efecto hasta el final del parrafo o encabezado
en cuestion&lt;/p&gt;

&lt;p&gt;por si esto no fuera suficiente tenemos un comando especifico para el manejo de
enlaces&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- l :: link
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;@l(https://direccion)&lt;/code&gt;, convierte en un enlace a su contenido, asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;https://direccion&amp;quot; &amp;gt;https://direccion&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para que aparesca un texto distinto al de la direccion seria
&lt;code&gt;@l(https://direccion&amp;lt;&amp;gt;texto distinto)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;https://direccion&amp;quot; &amp;gt;texto distinto&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;he? (movimiento de manos y aparece un arcoiris) la magia del comando &lt;code&gt;@&lt;/code&gt;. En
realidad todos los comandos &lt;code&gt;@&lt;/code&gt; tienen la estructura&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@x(custom&amp;lt;&amp;gt;contenido)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;custom&lt;/code&gt; es un parametro personalizado y opcional, y el &lt;code&gt;contenido&lt;/code&gt; es el
contenido del comando, el cual siempre debe proporcionarse&lt;/p&gt;

&lt;p&gt;Cuando un comando, por ejemplo, un enlace enlace, requiere un &lt;code&gt;custom&lt;/code&gt; y este no se ha
especificado, se genera apartir del &lt;code&gt;contenido&lt;/code&gt;, extrayendo las marcas expeciales
dejando unicamente el texto.&lt;/p&gt;

&lt;p&gt;Cuando el comando no requiere de un &lt;code&gt;custom&lt;/code&gt; y este es proporcionado, el comando
o lo ignora o se utiliza como identificador o etiqueta segun sea el caso (nota:
esto esta a consideracion y podria requerir sintaxis adicional)&lt;/p&gt;

&lt;p&gt;Cuando el comando esta dentro de otro comando, el comando interno &lt;em&gt;pasa&lt;/em&gt; su
contenido al comando externo, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(objetivo&amp;lt;&amp;gt;lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;objetivo&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;lo-que-sea-con-enfasis-con-bold&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y finalmente&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(@b(bold)&amp;lt;&amp;gt;lo que sea)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;bold&amp;quot; &amp;gt;lo que sea&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el comando&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- t :: target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sirve para crear una referencia dentro del documento. Por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@t(objetivo interno)

@l(#objetivo interno)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;@t&lt;/code&gt; declara el objetivo interno en el documento, y &lt;code&gt;@l&lt;/code&gt; enlaza a dicho
objetivo. Recordar que  para los encabezados, el exportador genera  el &lt;q&gt;objetivo&lt;/q&gt;
automaticamente&lt;/p&gt;

&lt;p&gt;Cuando se exporta la referencia &lt;code&gt;@l(#referencia)&lt;/code&gt; se elimina el signo &lt;code&gt;#&lt;/code&gt; del
texto, es decir, genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#referencia&amp;quot; &amp;gt;referencia&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listados&#34;&gt;listados&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- lista desordenada

  contenido de elemento

+ lista desordenada

1. lista ordenada numericamente

1) lista ordenada numericamente

a. lista ordenada alfabeticamente

a) lista ordenada alfabeticamente

   contenido de elemento a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de una lista debe indentarse segun la seccion de la que forme
parte. Se permite anidar listas dentro de otras listas, asi como otro tipo de
elementos del formato&lt;/p&gt;

&lt;h3 id=&#34;dialogos&#34;&gt;dialogos&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;quot;Dialogo, Lorem ipsum dolor sit amet, consectetur adipiscing
  elit, sed eiusmod tempor incidunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;los dialogos tienen la mismas normas que una lista.&lt;/p&gt;

&lt;h4 id=&#34;definiciones&#34;&gt;definiciones&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.

+ elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;about-s&#34;&gt;about&amp;rsquo;s&lt;/h4&gt;

&lt;p&gt;en realidad no se como nombrar estos elementos, asi que por ahora se llaman
&lt;q&gt;acerca de&lt;/q&gt; o about&amp;rsquo;s. Son comunes en muchos libros, por lo tienen sintaxis
propia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:: NOTA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ADVERTENCIA ADVERTENCIA ADVERTENCIA ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ADVERTENCIA ADVERTENCIA ADVERTENCIA

   ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;comandos&#34;&gt;..comandos &amp;gt;&lt;/h3&gt;

&lt;p&gt;los comandos de configuracion del documento, son un subconjunto de la sistaxis
&lt;code&gt;..comando &amp;gt;&lt;/code&gt; que cumple con la forma &lt;code&gt;..comando &amp;gt; argumento&lt;/code&gt;, sin embargo
existen multiples formas de este comando&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando-de-configuracion &amp;gt; argumento

..comando &amp;gt; argumento
  cuerpo

..comando &amp;gt; argumento en
  multiples lineas

  cuerpo

..comando &amp;gt;
  solo cuerpo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ademas estos pueden ser simentricos, es decir tener una marca de cierre&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt; argumento
  cuerpo
&amp;lt; comando..

..comando &amp;gt; argumento en
  multiples lineas

  cuerpo
&amp;lt; comando..


..comando &amp;gt;
  solo cuerpo
&amp;lt; comando..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(resaltar que los comandos de configuracion, &lt;em&gt;no son simetricos&lt;/em&gt;, es decir, no
necesita (ni debe) escribirse el cierre del comando)&lt;/p&gt;

&lt;p&gt;Bien? Para el primer caso, el &lt;em&gt;argumento&lt;/em&gt; abarca hasta la aparicion de la primer
linea en blanco o sin la indentacion apropiada.&lt;/p&gt;

&lt;p&gt;en este tipo de comandos se encuentran los de configuracion del documento (que
ya vimos al inicio)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..title    &amp;gt; titulo del documento
  puede abarcar varias lineas, siempre con indentacion y sin lineas
  en blanco

  esto queda fuera del comando titulo, (de hecho termina el bloque de
  comandos de configuracion)

..author   &amp;gt; nasciiboy
..mail     &amp;gt; nasciiboy@gmail.com
..style    &amp;gt; worg/worg.css
..options  &amp;gt; highlight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para los comandos que solo tienen &lt;code&gt;cuerpo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..emph &amp;gt;
  toda esta seccion tiene enfasis
&amp;lt; emph..

..emph &amp;gt;
  tambien esta

..bold &amp;gt;
  esta es bold

..center &amp;gt;
  y esta va centrada
&amp;lt; center..

..quote &amp;gt;
  Cuando hago esto, la gente piensa que es porque quiero alimentar mi
  ego, ¿verdad? Por supuesto, ¡no pido que se le llame “Stallmanix!”

  --Richard Matthew Stallman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estan diseñados para resaltar o aplicar alguna configuracion a una parrafo o
bloque extenso del documento&lt;/p&gt;

&lt;p&gt;En este tipo de comandos se encuentran: &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;emph&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;,
&lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt;, &lt;code&gt;pre&lt;/code&gt;, &lt;code&gt;diagram&lt;/code&gt;, &lt;code&gt;art&lt;/code&gt;, &lt;code&gt;cols&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De proporcionar un &lt;code&gt;argumento&lt;/code&gt;, el exportador sencillamente lo ignora.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cols&lt;/code&gt; tiene una sintaxis especial que nos premite crear columnas con cualquier
tipo de contenido, su sintaxis es&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..cols &amp;gt;
  primer columna

  ::

  segunda columna

  ..src &amp;gt; codigo-fuente
    algo

  ::

  tercer columna

  ..img &amp;gt; ruta/a/imagen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el delimitador de las columnas es la secuencia &lt;code&gt;::&lt;/code&gt;. Debe estar en
solitario en su propia linea, con dos espacios de indentacion.&lt;/p&gt;

&lt;p&gt;Por su parte los comandos con &lt;em&gt;argumento&lt;/em&gt; y &lt;em&gt;cuerpo&lt;/em&gt;, se utilizan para bloques
de tipo &lt;q&gt;codigo fuente&lt;/q&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..src &amp;gt; c
  #include &amp;lt;stdio.h&amp;gt; # esto es codigo en C
&amp;lt; src..

..src &amp;gt; go

  package biskana

  import &amp;quot;github.com/nasciiboy/regexp3&amp;quot;

  // esto es codigo en go


..src &amp;gt; sh
  echo &amp;quot;hola que hace&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui el contenido despues del (y en la misma linea que) &lt;code&gt;&amp;gt;&lt;/code&gt; especifica el
lenguaje. Por su parte, el cuerpo del bloque, es toda linea que cumpla con la
indentacion de dos espacios.&lt;/p&gt;

&lt;p&gt;Por ultimo, los bloques con &lt;em&gt;argumentos&lt;/em&gt; de multiples lineas y &lt;em&gt;cuerpo&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..figure &amp;gt; esto el titulo
  de una mini seccion

  este es el contenido de la mini seccion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;em&gt;contenido&lt;/em&gt; empieza luego de la primer linea en blanco.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..img &amp;gt; ruta/a/mi/imagen.jpg

  descripcion, contenido o lo que sea

..video &amp;gt; ruta/a/mi/video.ogg

  descripcion, contenido o lo que sea
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tablas&#34;&gt;Tablas&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;| encabezado    | otro e  |
|===============|=========|
| elemento uno  | algo x  |
|---------------|---------|
| elemento dos  | algo    |
|               | mas...  |
|---------------|---------|
| elemento tres | otra    |
|               | cosa    |
|               | @b(mas) |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el encabezado se coloca a la cima, delimitado con &lt;code&gt;|===|==|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;cada fila se separa con &lt;code&gt;|----|---|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;una tabla puede tener (o no) cuerpo o encabezado, pero las filas deben tener
siempre el mismo numero de columnas, en el futuro se hara una tabla super
dopada, de momento esto es lo que hay, por cierto, las tablas tienes soporte
completo de comandos &lt;code&gt;@&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-mañana&#34;&gt;el mañana&lt;/h2&gt;

&lt;p&gt;De momento, me encuentro adaptando el libro, &lt;strong&gt;The Go programming language&lt;/strong&gt; a
morg, por varias razones&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;primero, programe esto con muy poca idea de golang, y por lo que veo el
lenguaje tiene herramientas que haran el codigo abismalmente mejor
(suponiendo que algo bueno tiene)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;para poner a prueba el formato&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;el texto plano es infinitamente superior como referencia comparandolo con un
ebook, ya de un pdf ni se diga&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;por joder (el copyright) (vera la luz el resultado? o se quedara en mi
coleccion privada de cosas adaptadas a texto plano)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;asi que estare aprendiendo el lenguage la semana siguiente y luego mejorando el
codigo, no se si un momento de debilidad me obligue a ofrecer el proyecto a
alguna empresa, aver que sucede&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>morg</title>
      <link>https://nasciiboy.github.io/prog/morg/</link>
      <pubDate>Thu, 02 Mar 2017 06:37:35 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/morg/</guid>
      <description>

&lt;p&gt;Que tal, por fin tras un año de hacer el vago ha surgido el primer exportador
del lenguaje de marcas ligeras &lt;strong&gt;morg&lt;/strong&gt; (nombre tentativo). Aun esta en una fase
de programacion, con muchos apaños y trucos sucios&amp;hellip; pero funciona! toma eso
internet!&lt;/p&gt;

&lt;p&gt;Que igual y no era tan dificil, pero que me hice lio y termine programando un
motor de expresiones regulares y por puro orgullo lo incluyo en el programa&lt;/p&gt;

&lt;p&gt;que es &lt;strong&gt;morg&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;otro sistema de documentacion de marcas ligeras, basado en otros sistemas de
documentacion (de marcas ligeras), que intenta dominar el mundo, transformar a
la humanidad, terminar con el trabajo, la propiedad intelectual y forrar a su
creador&lt;/p&gt;

&lt;h2 id=&#34;por-que&#34;&gt;por que?&lt;/h2&gt;

&lt;p&gt;Como toda creacion humana la informatica ha respondido a las necesidades de los
presentes deacuerdo a los conocimientos y habilidades disponibles. Acaso al
inicio alguien considero la necesidad de codificar informacion mas alla del
conjunto de caracteres USAmericano? claro que no, los humanos no somos tan
inteligentes, y avansamos a base de apaños, resolviendo unas pocas dificultades
de vez en vez, lamentablemente solo mirando en retrospectiva esto se torna
evidente, y al hacerlo quedamos obligados a cuestionar nuestra realidad.&lt;/p&gt;

&lt;p&gt;En esta ocacion veamos en perspectiva al mas importante recurso de la humanidad
&lt;q&gt;la informacion&lt;/q&gt; y los medios a nuestro alcance para crearla e interactuar
con ella.&lt;/p&gt;

&lt;blockquote&gt;
&lt;em&gt;seccion pendiente&lt;/em&gt; llena de palabras con muchas letras, donde se
describe el trayecto de los sistemas para documentar informacion
&lt;/blockquote&gt;

&lt;p&gt;Con lo anterior llegamos a la siguente conclucion, &lt;em&gt;tener libros impresos
esta chulo, aunque poco practico e ineficiente es, si se compara con otos
formatos de documentacion&lt;/em&gt;, por ello surgieron las paginas man, los
derivados de TeX, XML, la web y sobre ella la wikipedia. Sin embargo seguimos
forjando informacion, pensando en imprimir en papel, con la consecuencia directa de
que todos los formatos de documentacion surgidos despues del transistor son un
dolor en el culo, y es momento de forjar un sistema a la altura, apenas mas
complicado que ascii, e igual de valido que cualquier hijo vastardo de
GML-&amp;gt;SGML-&amp;gt;XML-&amp;gt;HTML&lt;/p&gt;

&lt;h2 id=&#34;como-debe-ser-un-sistema-de-documentacion-ideal&#34;&gt;Como debe ser un sistema de documentacion ideal&lt;/h2&gt;

&lt;h3 id=&#34;inmediato&#34;&gt;&lt;strong&gt;Inmediato&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Debe estar disponible en todo momento. Las paginas man, fueron un gran acierto
de nuestros ancestros. El problema? &lt;code class=&#34;command&#34; &gt;cat&lt;/code&gt; o &lt;code
class=&#34;command&#34; &gt;less&lt;/code&gt; con una base de datos de documentos en texto
plano serian igualmente eficientes. No tendriamos colores, pero a cambio
podriamos agregar nuevas paginas y/o secciones de forma mas elegante y rapida.&lt;/p&gt;

&lt;h3 id=&#34;sencillo&#34;&gt;Sencillo&lt;/h3&gt;

&lt;p&gt;Si la wikipedia existe no es por algun genio del marketing vende motos, o por
un loco programador hasta arriba de flow, no, no, no, la razon es &lt;em&gt;roff&lt;/em&gt;,
&lt;em&gt;groff&lt;/em&gt; o alguna de sus variantes, si has intentado crear una pagina man, o
incluso has sido tan intrepido como para documentar tus cosas en man, habras
decistido al poco tiempo, no hay nada mas feo he inteligible que una pagina de
manual en groff. Por ello GNU lanzo &lt;strong&gt;info&lt;/strong&gt; que sin duda es mas util que man,
ademas TexInfo es menos feo que groff.&lt;/p&gt;

&lt;p&gt;Entoces por que no utilizamos info para escribir la wikipedia?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hay que leer un manual (en ingles) de muchas paginas para utilizarlo como es
debido&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Esta lleno de marcas y cosas misticas (pensadas para imprimir libros)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Una ves finalizado el documento hay que &amp;ldquo;compilar&amp;rdquo; para exportar a otros
formato mas manejables, es decir, pasar del fuente &lt;span class=&#34;file&#34; &gt;.texi&lt;/span&gt; a info, html, pdf,
&amp;hellip; y si no compila te comes los mocos!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;practico&#34;&gt;Practico&lt;/h3&gt;

&lt;p&gt;El formato pdf se utiliza mucho, ha de ser bueno, si no por que
habria tantos libros escaneados?&lt;/p&gt;

&lt;p&gt;Si no puedes realizar una busqueda de culquier palabra dentro del documento &lt;em&gt;no&lt;/em&gt;
puede ser bueno, si la forma de acceder al fuente para modificar algun error no
esta a tu alcance &lt;em&gt;es&lt;/em&gt; infame y si has de recorrerlo por paginas es &lt;em&gt;perverso&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;modificable-por-humanos&#34;&gt;Modificable (por humanos)&lt;/h3&gt;

&lt;p&gt;Si aspiras a ser un &lt;em&gt;heroe del teclado&lt;/em&gt; y por &amp;ldquo;curiosidad&amp;rdquo; se te ha ocurrido
mirar el codigo html de cualquer pagina web, habras llegado a la conclucion de
que el mejor lugar para guardar un mensaje que nadie ha de ver jamas, esta dentro
de una etiqueta html anidada sobre cientos de etiquetas html en una linea unica
sin ningun salto de linea.&lt;/p&gt;

&lt;p&gt;Un formato que acepta tales aberraciones deberia ser prohibido o almenos
intervenido por un consejo de sabios, para evitar tal desgracia.&lt;/p&gt;

&lt;h3 id=&#34;wysiwymag&#34;&gt;WYSIWYMAG&lt;/h3&gt;

&lt;p&gt;What You See Is What You Mean And Get (Lo que ves es lo que quieres decir y
obtener)&lt;/p&gt;

&lt;p&gt;La estructura del documento ha de ser minimamente agradable a la vista y
proporcionar la herramientas necesarias para utilizarlo en la creacion de
cualquier timpo de documento, desde un post a un libro o publicaciones
cientificas de cualquier indole, teniendo siempre en cosideracion que el
proposito y fin ultimo es la documentacion, no convertirse en la base para crear
interfaces visuales.&lt;/p&gt;

&lt;p&gt;Animaciones neon, anuncios publicitarios, botones &amp;ldquo;sociales&amp;rdquo;, typografias con
sombras, colores que afectan la vista (y el buen gusto), no son el objetivo del
formato, de eso ya seguiran encargandose los formatos existentes&lt;/p&gt;

&lt;h2 id=&#34;propuesta&#34;&gt;Propuesta&lt;/h2&gt;

&lt;p&gt;html es tan feo que la wikipedia utiliza mediawiki (uno de los tantos lenguajes
de marcas ligeros que existen). Por su parte, sitios como github directamente
pasan de html, fomentando el uso de markdown, org, ReStructured Text, texto
plano, etc. Algo similar ocurre con plataformas de gestion de contenido y
herramientas para la creacion de blogs como en el caso de wordPress&lt;/p&gt;

&lt;p&gt;Por alguna razon desconocida los sistemas de marcado ligero son comodos, sin
embargo, si algun error se les ha de atribuir (que probablemente sea la razon de
que existan tantos) es, &lt;strong&gt;no valerse por si mismos&lt;/strong&gt;, al mas minimo
inconveniente se recurre a trozos de codigo html o latex, resultando en
horrendos engendros &lt;q&gt;&lt;em&gt;facilitadores&lt;/em&gt;&lt;/q&gt; de estos ultimos.&lt;/p&gt;

&lt;p&gt;El formato que creemos ha de ser tan agradable a la vista que incluso no
requiera ninguna herramienta especial para su visualizacion y creacion, los mas
intrepidos haran alarde de valerse solo con &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; o mariposas.&lt;/p&gt;

&lt;p&gt;Ya, esta bonito, sencillo y autosuficiente! algo mas? que tal un &lt;strong&gt;Proyecto de
&lt;s&gt;Complementacion&lt;/s&gt; Documentacion Humana&lt;/strong&gt;, por que no crear un super
repositorio (distribuido/federado) que contenga (al menos) toda obra escrita, ya
sea un blog, un libro e incluso la wikipedia, todo con el mismo formato,
separado en secciones elegibles y descargables a medida del disco duro&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;origen
   .
   ├── recursos
   │   ├── imgenes
   │   ├── videos
   │   ├── programas
   │   ├── codigo
   │   └── musica
   ├── man
   │   ├── 1
   │   ├── 2
   │   ...
   │   └── N
   ├── blog
   │   ├── gnusr
   │   ├── nasciiboy
   │   ... cualquiera
   │   └── emacsChan
   ├── books
   │   ├── scifi
   │   ├── math
   │   ...
   │   └── ajedrez

   ...

   └── wikipedia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un error es, permitir que la informacion desaparesca, mas aun, dejarla en custodia
de entes que solo permiten el acceso a unos cuantos elegidos.&lt;/p&gt;

&lt;p&gt;A un lado el copyrigth, los bytes no tienen dueños!&lt;/p&gt;

&lt;p&gt;Sobre la implementacion&amp;hellip; solo hay ideas, informacion mas adelante&lt;/p&gt;

&lt;h3 id=&#34;sintaxis&#34;&gt;sintaxis&lt;/h3&gt;

&lt;h4 id=&#34;estructura-e-indentacion&#34;&gt;Estructura e indentacion&lt;/h4&gt;

&lt;p&gt;Un buen sistema de documentacion priorisa la estructura sobre el aspecto.&lt;/p&gt;

&lt;p&gt;La estructura minima, consiste en separar el documento en secciones,
encabezados gerarquizados&lt;/p&gt;

&lt;p&gt;&lt;em&gt;una marca un nivel&lt;/em&gt;: un encabezado inicia con el signo &lt;code&gt;*&lt;/code&gt; seguido por (un)
espacio(s) y el nombre de la seccion.&lt;/p&gt;

&lt;p&gt;El numero de &lt;code&gt;*&lt;/code&gt; indica el nivel del encabezado, su equivalente  en html seria&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; == &lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; == &lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;***&lt;/code&gt; == &lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;****&lt;/code&gt; == &lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*****&lt;/code&gt; == &lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;* nivel Uno

  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
  eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
  enim ad minim veniam.

** nivel dos

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
   eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
   enim ad minim veniam.

*** nivel tres

    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de cada encabezado inicia tras dejar una linea de espacio en blanco
y ha de indentarse (opcional y a gusto) con un numero de espacios igual al
numero de &lt;code&gt;*&lt;/code&gt;, mas un espacio.&lt;/p&gt;

&lt;p&gt;Para mantener una estetica agradable los titulares extensos
pueden colocarse de la forma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* encabezado muy muy muy muy muy muy muy
  muy muy muy muy muy muymuy muy muy muy
  muy muy extenso
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;listas&#34;&gt;Listas&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- lista desordenada

  contenido de elemento

+ lista desordenada

1. lista ordenada numericamente

1) lista ordenada numericamente

a. lista ordenada alfabeticamente

a) lista ordenada alfabeticamente

   contenido de elemento a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de una lista debe indentarse segun la seccion de la que forme
parte. Se permite anidar listas dentro de otras listas, asi como otro tipo de
elemnentos del formato&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* nivel uno

  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

     a) Lorem ipsum dolor sit amet.

        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;y-si-tengo-una-novela&#34;&gt;y si tengo una novela&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;quot;Dialogo, Lorem ipsum dolor sit amet, consectetur adipiscing
  elit, sed eiusmod tempor incidunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;los dialogos tienen la mismas normas que una lista.&lt;/p&gt;

&lt;h4 id=&#34;definiciones&#34;&gt;definiciones&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.

+ elemento :: definicion Lorem ipsum dolor sit amet, consectetur
  adipiscing elit, sed eiusmod tempor incidunt ut labore et
  dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;about-s&#34;&gt;about&amp;rsquo;s&lt;/h4&gt;

&lt;p&gt;en realidad no se como nombrar estos elementos, asi que por ahora se llaman
&lt;q&gt;acerca de&lt;/q&gt; o about&amp;rsquo;s. Son comunes en muchos libros, por lo tienen sintaxis
propia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:: NOTA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ::  Lorem ipsum dolor sit amet, consectetur
   adipiscing elit, sed eiusmod tempor incidunt ut labore et
   dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ADVERTENCIA ADVERTENCIA ADVERTENCIA ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.

:: ADVERTENCIA ADVERTENCIA ADVERTENCIA ADVERTENCIA

   ::

   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor
   incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;resaltado&#34;&gt;resaltado&lt;/h4&gt;

&lt;p&gt;nadie quiere tener etiquetas a lo html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;etiqueta&amp;gt;
  &amp;lt;etiqueta&amp;gt;
    contenido
  &amp;lt;/fin_etiqueta&amp;gt;
&amp;lt;/fin_etiqueta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;los lenguajes de marcas ligeras lo manejan de forma un poco mas agradable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(org)       *bold*
(markdown)  **bold**
(mediawiki) &#39;&#39;&#39;bold&#39;&#39;&#39;

algun otro  &amp;lt;^bold^&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no obstante con esta aproximacion pronto se crean ambiguedades, ademas de
limitarse a 3 o 4 formas de etiquetar el contenido antes de recurrir a marcas
exoticas o recaer en etiquetas html.&lt;/p&gt;

&lt;p&gt;A espera de una mejor alternativa, podria recurrirse al estilo de marcas de
texinfo… con un leve retoque al formato.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@x()
@x[]
@x{}
@x&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;@&lt;/code&gt; indica &lt;em&gt;a continuacion contenido especial&lt;/em&gt;, &lt;code&gt;x&lt;/code&gt; es un caracter
ascii imprimible, que describe el comando o accion a aplicar al contenido
delimitado por &lt;code&gt;{…}&lt;/code&gt;, &lt;code&gt;(…)&lt;/code&gt;, &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; o &lt;code&gt;[…]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;por que una &lt;code&gt;@&lt;/code&gt;?&lt;/em&gt; Fuera de algun lenguaje exotico o el correo, podria
ser el signo menos utilizado y mas aun con la estructura &lt;code&gt;@x{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;y la &lt;code&gt;x&lt;/code&gt;?&lt;/em&gt; Un caracter ascii imprimible. Si hemos de necesitar mas
marcas que los caracteres ascii algo estaremos haciendo mal.&lt;/p&gt;

&lt;p&gt;Algunas propuestas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- A :: acronym      - a :: abbr       - 0 ::            - : :: def
- B ::              - b :: bold       - 1 ::            - ; ::
- C :: smallCaps    - c :: code       - 2 ::            - = ::
- D ::              - d :: data       - 3 ::            - ? ::
- E :: error        - e :: emph       - 4 ::            - @ :: escape
- F :: func         - f :: file       - 5 ::            - ` ::
- G ::              - g ::            - 6 ::            - &#39; :: ‘samp’
- H ::              - h ::            - 7 ::            - &amp;quot; :: “quote”
- I ::              - i :: italic     - 8 ::            - # :: path
- J ::              - j ::            - 9 ::
- K :: keyword      - k :: kbd        - ^ :: sup
- L :: label        - l :: link       - _ :: sub
- M ::              - m :: math       - \ ::
- N :: defnote      - n :: note       - | ::
- O :: option       - o ::            - * ::
- P ::              - p ::            - + ::
- Q ::              - q :: quote      - , ::
- R :: result       - r :: ref        - - :: —exp—
- S ::              - s :: strike     - . ::
- T :: radiotarget  - t :: target     - / ::
- U ::              - u :: underline  - % :: (parentesis)
- V :: var          - v :: verbatim   - &amp;amp; :: symbol
- W :: warnig       - w ::            - $ :: command
- X ::              - x ::            - ~ ::
- Y ::              - y ::            - ! ::
- Z ::              - z ::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que cada caracter solo tenga un significado permite concatenar acciones como en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@uisb(underlineItalicStrikeBold)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;su equivalente html seria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;i&amp;gt;&amp;lt;strike&amp;gt;&amp;lt;b&amp;gt;underlineItalicStrikeBold&amp;lt;/b&amp;gt;&amp;lt;/strike&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;y los &lt;code&gt;({[&amp;lt;&amp;gt;]})&lt;/code&gt;?&lt;/em&gt; Mas opciones, mas diversion.&lt;/p&gt;

&lt;p&gt;Segun sea el contexto &lt;code&gt;{}&lt;/code&gt; o &lt;code&gt;()&lt;/code&gt; podrian requerir el &lt;em&gt;escape&lt;/em&gt; de algun
caracter. Para minimizar la inclucion de signos extraños, los delimitadores se
aplican deacuerdo a la necesidad y gusto del &lt;q&gt;creador&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;cuando no haya &lt;em&gt;escapatoria&lt;/em&gt;, para anular el significado de un caracter se
antecede con &lt;code&gt;@&lt;/code&gt; (nota: para que aparesca &lt;code&gt;@&lt;/code&gt; hay que colocar &lt;code&gt;@@&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@b(1@). punto uno)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;al expandir la etiqueta &lt;code&gt;@)&lt;/code&gt; se substituye por &lt;code&gt;)&lt;/code&gt;, asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;1). Punto uno&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;comentarios&#34;&gt;comentarios&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;@ linea comentada
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;una &lt;code&gt;@&lt;/code&gt; al inicio de linea con almenos uno o mas espacios en blanco comenta la
linea en cuestion&lt;/p&gt;

&lt;h4 id=&#34;mas-alla-del-ascii&#34;&gt;mas alla del ASCII&lt;/h4&gt;

&lt;p&gt;preferiblemente se utilizara un sistema de codificacion &lt;q&gt;moderno&lt;/q&gt; como
UTF-8.&lt;/p&gt;

&lt;p&gt;Opcionalmente (y para no vernos en la necesidad de buscar un caracter
complicado) se puede echar mano del &lt;q&gt;comando&lt;/q&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;, por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@&amp;amp;{nombreGenericoDeCaracterComplicado}
@&amp;amp;{leftarrow}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;math&#34;&gt;math&lt;/h4&gt;

&lt;p&gt;para las formulas matematicas (inline) y ya que desconosco bastante en este
tema, podriamos no reinventar la rueda y tomar las formulas Tex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@m{\formula\Matematica\Tex}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enlaces&#34;&gt;enlaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@l{ruta}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivalente a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;ruta&amp;quot;&amp;gt;ruta&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l{ruta&amp;lt;&amp;gt;descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivalente a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;ruta&amp;quot;&amp;gt;descripcion&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora, todos los encabezados generan un indentificador interno apartir de su
nombre, por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* encabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;encabezado&amp;quot; &amp;gt;encabezado&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* @b(encabezado) con @e(enfasis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;encabezado-con-enfasis&amp;quot; &amp;gt;&amp;lt;b&amp;gt;encabezado&amp;lt;/b&amp;gt; con &amp;lt;em&amp;gt;enfasis&amp;lt;/em&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y un enlace dentro de un encabezado con enfasis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* @l(http://fsf.org/&amp;lt;&amp;gt;@b(link-encabezado)) con @e(enfasis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se traduce en html como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 id=&amp;quot;link-encabezado-con-enfasis&amp;quot; &amp;gt;&amp;lt;a href=&amp;quot;http://fsf.org/&amp;quot; &amp;gt;&amp;lt;b&amp;gt;link-encabezado&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt; con &amp;lt;em&amp;gt;enfasis&amp;lt;/em&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para hacer una referencia interna a un encabezado hariamos asi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que se traduce en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;encabezado&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado&amp;lt;&amp;gt;lo que sea)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;que se traduce en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;lo que sea&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nota: en el futuro se planea presindir del signo &lt;code&gt;#&lt;/code&gt; haciendo primero una
busqueda en todas las referencias internas del documento. En caso de no encotrar
coincidencias dejar la referencia tal cual)&lt;/p&gt;

&lt;h5 id=&#34;como-funciona-esta-magia&#34;&gt;como funciona esta magia?&lt;/h5&gt;

&lt;p&gt;todas los &lt;q&gt;comandos&lt;/q&gt; tienen esta estructura &lt;code&gt;@x(custom&amp;lt;&amp;gt;contenido)&lt;/code&gt;. Donde
&lt;code&gt;custom&lt;/code&gt; es un parametro personalizado y opcional. Por su parte &lt;code&gt;contenido&lt;/code&gt; es
el contenido del comando&lt;/p&gt;

&lt;p&gt;Cuando un comando, por ejemplo, los enlaces requieren un &lt;code&gt;custom&lt;/code&gt; y este no se ha
especificado, se genera apartir del &lt;code&gt;contenido&lt;/code&gt;, extrayendo las marcas expeciales
dejando unicamente el texto.&lt;/p&gt;

&lt;p&gt;Cuando el comando no requiere de un &lt;code&gt;custom&lt;/code&gt; y este es proporcionado, el comando
o lo ignora o se utiliza como identificador o etiqueta segun sea el caso (nota:
esto esta a consideracion y podria requerir sintaxis adicional)&lt;/p&gt;

&lt;p&gt;Cuando el comando esta dentro de otro comando, el comando interno &lt;em&gt;pasa&lt;/em&gt; su
contenido al comando externo, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(#encabezado&amp;lt;&amp;gt;lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#encabezado&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(lo que sea con @e(enfasis con @b(algo&amp;lt;&amp;gt;bold)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;lo-que-sea-con-enfasis-con-bold&amp;quot; &amp;gt;lo que sea con &amp;lt;em&amp;gt;enfasis con &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y finalmente&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@l(@b(bold)&amp;lt;&amp;gt;lo que sea)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;bold&amp;quot; &amp;gt;lo que sea&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tambien se pueden crear enlaces internos mediante el comando &lt;code&gt;t&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@t{target}
@t{target&amp;lt;&amp;gt;descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y radio objetivos con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@T{radioTarget}
@T{radioTarget,descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;un &lt;em&gt;radio target&lt;/em&gt; conbierte en un enlace a cualquier palabra que encaja con la
descripcion del radio opjetivo (ignorando entre mayusculas y minusculas), el
objetivo de todos los enlaces, es la declaracion misma del objetivo. Los bloques
de codigo quedan exentos de este comportamiento&lt;/p&gt;

&lt;h4 id=&#34;notas&#34;&gt;notas&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@n{enlace-a-nota}
@n{enlace-a-nota&amp;lt;&amp;gt;descripcion}
@n{nota en linea&amp;lt;&amp;gt;descripcion}
@N{objetivo-descripcion}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nota: a esto aun le falta mas trabajo)&lt;/p&gt;

&lt;h4 id=&#34;comandos-de-bloque&#34;&gt;comandos de bloque&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.. comando &amp;gt; contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o en su forma &amp;ldquo;simetrica&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.. comando &amp;gt;
  contenido
&amp;lt; comando ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el contenido tiene que estar indentado con dos espacios por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt;
  contenido

  mas contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt;
  contenido

  mas contenido

  ..otro-comando &amp;gt;
    contenido

    mas contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien? Hay varios tipos de comandos y varias formas de optener su contenido. Por
un lado tenemo comandos donde el cuerpo se define en una sola linea o mas
indentadas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando &amp;gt; contenido contenido contenido
  contenido
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido o &lt;em&gt;argumentos&lt;/em&gt; abarcan hasta la aparicion de la primer linea en
blanco o sin la indentacion apropiada.&lt;/p&gt;

&lt;p&gt;en este tipo de comandos se encuentran los de configuracion del documento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..title    &amp;gt; titulo del documento
  puede abarcar varias lineas, siempre con indentacion y sin lineas
  en blanco

  esto queda fuera del comando titulo

..author   &amp;gt; nasciiboy
..mail     &amp;gt; nasciiboy@gmail.com
..style    &amp;gt; worg/worg.css
..options  &amp;gt; highlight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adicionalmente, los comandos de configuracion se colocan al inicio del documento
y terminan cuando aparece el primer parrafo o encabezado. Los comandos de
configuracion no deben tener espacios en blanco al inicio, ni etiqueta de
cierre, es decir &lt;code&gt;&amp;lt; title..&lt;/code&gt; no significa nada para el comando &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;tambien tenemos comandos que solo tiene cuerpo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..emph &amp;gt;
  toda esta seccion tiene enfasis
&amp;lt; emph..

..emph &amp;gt;
  tambien esta

..bold &amp;gt;
  esta es bold

..center &amp;gt;
  y esta va centrada
&amp;lt; center..

..quote &amp;gt;
  Cuando hago esto, la gente piensa que es porque quiero alimentar mi
  ego, ¿verdad? Por supuesto, ¡no pido que se le llame “Stallmanix!”

  --Richard Matthew Stallman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;esta diseñada para resaltar o aplicar alguna configuracion a una parrafo o
bloque extenso del documento&lt;/p&gt;

&lt;p&gt;luego tenemos comandos con &lt;em&gt;argumentos&lt;/em&gt; y &lt;em&gt;cuerpo&lt;/em&gt;, como pueden ser los bloques
de codigo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..src &amp;gt; c
  #include &amp;lt;stdio.h&amp;gt; # esto es codigo en C
&amp;lt; src..

..src &amp;gt; go

  package biskana

  import &amp;quot;github.com/nasciiboy/regexp3&amp;quot;

  // esto es codigo en go


..src &amp;gt; sh
  echo &amp;quot;hola que hace&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aqui el contenido despues del (y en la misma linea que) &lt;code&gt;&amp;gt;&lt;/code&gt; especifica el
lenguaje, por su parte, el cuerpo del bloque es toda linea que cumpla con la
indentacion&lt;/p&gt;

&lt;p&gt;por ultimo, teneos bloque con &lt;em&gt;argumentos&lt;/em&gt; de multiples lineas y &lt;em&gt;cuerpo&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..figure &amp;gt; esto el titulo
  de una mini seccion

  este es el contenido de la mini seccion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;em&gt;contenido&lt;/em&gt; empieza luego de la primer linea en blanco.&lt;/p&gt;

&lt;p&gt;Como vez, todo depende del comando que se utilize, en terminos generales
un comando tiene esta estructura&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..comando parametros-especiales &amp;gt; argumentos

  //
  cuerpo
  //
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tambien hay lugar para imagenes y video&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..img parametros-especiales &amp;gt; direccion/a/mi/imagen.jpg

  descripcion, contenido o lo que sea

..video parametros-especiales &amp;gt; direccion/a/mi/video.mkv

  descripcion, contenido o lo que sea
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ya vimos que son los argumentos y el cuerpo, los &lt;code&gt;parametros&lt;/code&gt; son modificadores
para el comando, como podrian ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;interpretar algun tipo de enfasis dentro de un
bloque de codigo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;agregar un identificador&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;establecer la orientacion visual de los elementos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aunque los parametros pueden ser variados, deben ser pocos, uno, dos maxime tres
por comando de bloque. Remarcar que el formato no es para crear espectaculos
visuales.&lt;/p&gt;

&lt;p&gt;los bloques propuestos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;block o custom // como bloques personalizables
img
video
figure
quote
verse
emph
center
bold
italic
src
example/pre
cols
math
diagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para la configuracion del documento&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title
subtitle
author
translator
mail
licence
style
date
tags
description
id
options
lang/language
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a resaltar &lt;code&gt;options&lt;/code&gt;, que sirve para especificar como ha de comportarse el
traductor/visualisador del formato, de este, al igual que los parametros aun no
defino su estructura (las mas comunes son: &lt;code&gt;cosa&lt;/code&gt;, &lt;code&gt;bandera:valor&lt;/code&gt;,
&lt;code&gt;bandera=valor&lt;/code&gt;)&lt;/p&gt;

&lt;h4 id=&#34;tablas&#34;&gt;Tablas&lt;/h4&gt;

&lt;p&gt;Sin duda un tema complejo, podria tenerse una tabla totalmente funcional con
formulas y demas, pero para inciar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| encabezado    | otro e  |
|===============|=========|
| elemento uno  | algo x  |
|---------------|---------|
| elemento dos  | algo a  |
|               |---------|
|               | algo b  |
|---------------|---------|
| d o s  c e l d a s      |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el encabezado se coloca a la cima, delimitado con &lt;code&gt;|===|==|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;cada elemento se separa con &lt;code&gt;|----|---|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;unir celdas es complicado podria tomarse en consideracion el numero exacto de
caracteres para obtener esta informacion, o colocar un signo &lt;q&gt;invisible&lt;/q&gt; de
alineacion dentro la la tabla como &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;a-considerar&#34;&gt;a considerar&lt;/h4&gt;

&lt;p&gt;En algunos documentos se agrega un subtitulo en lugar de crear una subseccion
para esto pobria ofreserse algo como:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* encabezado
  @ subencabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde un una &lt;code&gt;@&lt;/code&gt; al mismo nivel de indentacion del inicio del nombre del
encabezado seguido por un espacio en blanco establece un subencabezado&lt;/p&gt;

&lt;p&gt;poder concatenar varias definiciones&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- A ::
  B ::
  C :: exadecimal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- A :: B :: C :: exadecimal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variables de substitucion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@V{variable definida en alguna parte}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(la siguiente, es una idea que abandone en pro de parametros en los bloque, pero igual
resulta interesante)&lt;/p&gt;

&lt;p&gt;En algunos bloques poder establecer la orientacion del contenido, o agregar una
sintaxis especifica, como:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^^ elemento :: descripcion
&amp;gt;&amp;gt; elemento :: descripcion
&amp;lt;&amp;lt; elemento :: descripcion
__ elemento :: descripcion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La posicion del elemento se establece de la combinacion de dos caracteres, a
elegir &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; y &lt;code&gt;_&lt;/code&gt;. El primer caracter indica la posicion del elemento
(&lt;code&gt;^&lt;/code&gt;) superior, (&lt;code&gt;_&lt;/code&gt;) inferior, (&lt;code&gt;&amp;gt;&lt;/code&gt;) derecha o (&lt;code&gt;&amp;lt;&lt;/code&gt;) izquierda.&lt;/p&gt;

&lt;p&gt;La segunda combninacion establece la alineacion del contenido.
(&lt;code&gt;::&lt;/code&gt;) justificado, (&lt;code&gt;&amp;lt;:&lt;/code&gt;) a la izquierda, (&lt;code&gt;:&amp;gt;&lt;/code&gt;) a la
derecha o (&lt;code&gt;&amp;gt;:&amp;lt;&lt;/code&gt;) centrado.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt; elemento :: descripcion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|------------------+-----------------------|
|                  | descripcion           |
|                  |                       |
|     elemento     |                       |
|                  |                       |
|                  |                       |
|------------------+-----------------------|
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;^elemento &amp;gt;:&amp;lt; descripcion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|------------------+-----------------------|
|    elemento      |      descripcion      |
|                  |                       |
|                  |                       |
|                  |                       |
|                  |                       |
|------------------+-----------------------|
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;^&amp;gt; elemento &amp;gt;:&amp;lt; descripcion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-----------------------------------------|
|                                         |
|                                         |
|                           elemento      |
|                                         |
|                                         |
|-----------------------------------------|
|              descripcion                |
|                                         |
|                                         |
|                                         |
|                                         |
|-----------------------------------------|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en org-mode, existe una forma para colocar el resultado de ejecutar un bloque de
codigo fuente. Es asi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC elisp
  (message &amp;quot;hola lisp&amp;quot;)
#+END_SRC

#+RESULTS:
: hola lisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en morg podria ser&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..src &amp;gt; elisp
  (message &amp;quot;hola lisp&amp;quot;)

&amp;gt;&amp;gt; hola lisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..src &amp;gt; c
  #include &amp;lt;stdio.h&amp;gt;

  int main(){
    printf( &amp;quot;Hola mundo\n&amp;quot; );
    return 0;
  }

..result &amp;gt;
  &amp;quot;Hola mundo&amp;quot;
&amp;lt; src..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;otra duda surge y aunque antes se expuso como posibilidad es la forma de
concatenar los comandos &lt;code&gt;@&lt;/code&gt;. Deberian poderse concateran de la forma
&lt;code&gt;@abcd(cosas)&lt;/code&gt;? o solo deberia haber ordenes sencillas? si pueden concatenarse
cuales? y en que orden de ejecucion?&lt;/p&gt;

&lt;p&gt;para terminar dos opciones para establecer un encabezado/bloque con un
idetificador&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** @t(identificador-personalizado&amp;lt;&amp;gt;contenido del encabezado)

..figure &amp;gt; @t(identificador-personalizado&amp;lt;&amp;gt;argumento)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si el encabezado, inicia con un comando &lt;code&gt;t&lt;/code&gt; especifica el identificador y texto a
utilizar&lt;/p&gt;

&lt;p&gt;es decir, con&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** @t(identificador&amp;lt;&amp;gt;titulo del encabezado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** @t(identificador) titulo del encabezado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&amp;quot;identificador&amp;quot; &amp;gt;titulo del encabezado&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aunque considero mas congruente utilizar&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;** identificador &amp;lt;&amp;gt; contenido del encabezado

..figure &amp;gt; identificador &amp;lt;&amp;gt; argumento
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;porg&#34;&gt;porg&lt;/h4&gt;

&lt;p&gt;los ficheros &lt;code&gt;po&lt;/code&gt; producidos con &lt;code&gt;gettext&lt;/code&gt; se utilizan para traducir documentos
de un lenguaje a otro, si gettext no muere en el intento&amp;hellip; con morg podemos
hacer algo mucho mas sencillo para traducir documentos&lt;/p&gt;

&lt;p&gt;imaginemos que tenemos este texto&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* nivel uno

  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

     a) Lorem ipsum dolor sit amet.

        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a si se ve como documento &lt;code&gt;porg&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#* nivel uno
* nivel uno

#   1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
#      eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
#      enim ad minim veniam.
  1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.

#      a) Lorem ipsum dolor sit amet.
     a) Lorem ipsum dolor sit amet.

#         - Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

#   2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
#      eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
#      enim ad minim veniam.
  2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
     eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
     enim ad minim veniam.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;se toma el contenido fuente, se duplica cada seccion, se coloca justo debajo
del original y se marca con algun signo especial el contenido original.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;por que esto es sencillo?&lt;/em&gt; estas trabajando con el contenido original, se puede
contrastar la traduccion directamente y no requiere compilaciones ni trucos
complejos.&lt;/p&gt;

&lt;p&gt;Para generar la traduccion, solo es necesario borrar las lineas con la marca
especial, por que la estructura del documento siempre esta precente, es decir,
siempre tenemos el producto final, solo eliminamos lo inecesario!&lt;/p&gt;

&lt;p&gt;Si agregamos un programa que haga todo automagicamente, con una pre-traduccion,
el tabajo sera pan comido!&lt;/p&gt;

&lt;p&gt;incluso y fantaceando, podria haber ficheros para reemplazar rss (rorg) y que el
navegador interprete directamente morg. Las fantacias no cuestan nada.&lt;/p&gt;

&lt;h3 id=&#34;biskana&#34;&gt;biskana&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;biskana&lt;/code&gt; es lo que hay hasta el momento, una primitiva libreria escrita en
lenguaje de programacion go para exportar el formato &lt;em&gt;morg&lt;/em&gt; a html, funcionan
muchos de los comandos &lt;code&gt;@&lt;/code&gt; de forma limitada, aunque el sistema
&lt;code&gt;@x(identificador&amp;lt;&amp;gt;contenido)&lt;/code&gt; extrae los datos perfectamente, ademas si un
comando no cuenta con llave de cierre, el resaltado abarca hasta el final del
parrafo y se cierra automaticamente&lt;/p&gt;

&lt;p&gt;tambien el sistema para extraer el contenido de un bloque de comando funciona de
manera correcta, claro esta, solo para los casos definidos&lt;/p&gt;

&lt;p&gt;para los bloques de codigo funte se brinda la posibilidad de resaltado de
sintaxis agregando un enlace de java-script a la configuracion.&lt;/p&gt;

&lt;p&gt;Existe un wrapper en go de pygments con el cual podemos resaltar la sintaxis
mediente un simple css, obviamente requiere tener instalado pygments y esperar
un tiempo consideramlemente mayor para generar el resultado&lt;/p&gt;

&lt;p&gt;aun no hay codigo para manejar las tablas de datos (proximamente)&lt;/p&gt;

&lt;h4 id=&#34;como-usar&#34;&gt;Como usar&lt;/h4&gt;

&lt;p&gt;Primero tenemos que tener instalado &lt;em&gt;go&lt;/em&gt; en el
sistema, &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;esta&lt;/a&gt; es la guia de instalacion
oficial (la verdad no recuerdo como lo instale)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;biskana&lt;/code&gt; es solo un componete del proyecto, de momento el unico escrito, para
su uso se envolvio en el comando &lt;code&gt;morg&lt;/code&gt;
(&lt;a href=&#34;https://github.com/nasciiboy/morg&#34;&gt;aqui&lt;/a&gt; el codigo en todo su explendor), el
cual hara muchas mas cosas, mientras tanto se limita a exportar a html los
ficheros que le indiquemos.&lt;/p&gt;

&lt;p&gt;Asi optenemos el codigo y generamos el ejecutable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(desconosco la funcion de &lt;code&gt;-v&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;si ya tenemos intalado morg, para actualizar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u -v github.com/nasciiboy/morg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para utilizar el comando&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;morg fichero-uno.morg fichero-dos.morg ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el resultado es un fichero en el directorio actual de tabajo con terminacion &lt;code&gt;.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;para activar el resaltado con &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;
(java-script) tienes que colocar la siguiente opcion de configuracion dentro del
fichero morg&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-morg&#34;&gt;..options &amp;gt; highlight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;coloque un estilo por defecto en el codigo fuente, para modificarlo lo mas
sencillo es hacerlo en el fichero resultado (a mano), ademas para esta opcion
debes tener la capeta &lt;code&gt;highlight&lt;/code&gt; en la misma dereccion del resultado&lt;/p&gt;

&lt;p&gt;para optener tu carpeta &lt;code&gt;highlight&lt;/code&gt; ve a &lt;a href=&#34;https://highlightjs.org/download/&#34;&gt;esta&lt;/a&gt; pagina y especifica que lenguajes
deseas, descarga, descomprime y coloca en la misma carpeta del resultado&lt;/p&gt;

&lt;p&gt;Si por el contrario si (tienes instalado y) quieres marcar de resaltado de
codigo utilizando &lt;code&gt;pygments&lt;/code&gt; debes utilazar esta opcion de configuracion&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-morg&#34;&gt;..options &amp;gt; pygments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luego especificar mediante una hoja de estilos css el estilo de
resaltado. Puedes opteren estilos css para
pygments &lt;a href=&#34;https://github.com/jwarby/jekyll-pygments-themes/&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;la hoja de estilo se especifica asi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-morg&#34;&gt;..style &amp;gt; direccion/a/mi/style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no aseguro que el programa no te explote en la cara, de momento ha servido para
dos pequeñas pruebas&lt;/p&gt;

&lt;h4 id=&#34;porque-go&#34;&gt;porque Go&lt;/h4&gt;

&lt;p&gt;por nada en especial&amp;hellip; cuando empece a escribir el codigo hace cosa de un año
en C mis habilidades no daban para mucho, no es que ahora sea un jodido guru,
pero algo he aprendido, he? pero por que C? por velocidad y eficiencia, si vas a
hacer un proyecto tan ambicioso, mal seria que fuese lagueado y demorara aun
unos pocos segundos en mostrar el contenido.&lt;/p&gt;

&lt;p&gt;Aun si el proyecto se escribiese en un lenguaje interpretado en algun momento
deberia portarse a C o similar.&lt;/p&gt;

&lt;p&gt;podria haber elegido C++&amp;hellip; pero me cruce con Go, no es un lenguage que proboque
facinacion en mi, pero solo es 3 veces mas lento que C y tiene ideas muy
interesantes. Por añadir creo que su tipado fuerte es un fastidio, al igual que
el estilo de codificacion, llaves forsosas para instrucciones simples y el no
contar con punteros de verdad (al menos con un nivel de indireccion) obliga a
hacer apaños impresionantes. Desde luego, como recien llegado a go y tras una
ligera prueba del lenguaje este comentario puede ser una cagada, disculpad mi
ignorancia.&lt;/p&gt;

&lt;p&gt;Por cierto, pygments, en un tremendo consumidor de tiempo, desconosco si es por
estar escrito en python, o por la naturaleza compleja de su labor. Habra que
reescribir una version mas veloz.&lt;/p&gt;

&lt;h4 id=&#34;el-codigo&#34;&gt;el codigo&lt;/h4&gt;

&lt;p&gt;sin importar el lenguaje, el codigo debe ser elegante o almenos claro y
sencillo, evintando dependencias inecesarias que dificulten su adaptacion a
otros lenguajes o peor aun el aprendisaje de otros programadores. En resumen se
buscara siempre ser una implementacion de referencia con toques didacticos en la
que cualquier indicio de aparicion de cruft sera señal de refleccion y futura
refactorizacion e incluso reescritura&lt;/p&gt;

&lt;p&gt;&lt;code&gt;biskana&lt;/code&gt; no es el programa definitivo, lo pienso como un componente &lt;em&gt;el
traductor&lt;/em&gt; a otros lenguajes o dicho de otra manera el &lt;em&gt;renderizador&lt;/em&gt; (que hace
realidad nuesras fantacias) de texto a texto, cuando el codigo alcance cierto
grado de madures sera dividido en otro companente &lt;code&gt;katana&lt;/code&gt; este sera el parser
del formato que genere una estructura o formato de aun mas facil traduccion,
clasificando cada seccion del documento.&lt;/p&gt;

&lt;p&gt;Momentaneamente supongo que la mejor manera en que de deben
clasificarse/generarse las secciones es como entes independientes sin estar
influenciados por el nivel de anidamento por ejemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* seccion 1
** seccion 2
*** seccion 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no se traduce como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;seccion 1&amp;lt;/h1&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;seccion 2&amp;lt;/h3&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;seccion 3&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en su lugar se traduce como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;seccion 1&amp;lt;/h1&amp;gt;
&amp;lt;div class=&amp;quot;h1&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2&amp;gt;seccion 2&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;quot;h2&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h3&amp;gt;seccion 3&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;quot;h3&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cada seccion es &amp;ldquo;relativamente&amp;rdquo; independiente de otra, pues contiene toda la
informacion para visualirarse por si misma, unicamente su contenido tiene un
nivel de anidamiento&lt;/p&gt;

&lt;p&gt;aunque de momento no es asi, lo mismo planeo para las listas&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- elemento 1
- elemento 2

  + subelemento 2.1

- elemento 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no se traduce como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;elemento 1&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;elemento 2&amp;lt;/li&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;subelemento 2.1&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;li&amp;gt;elemento 3&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si no como&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;li-1&amp;quot; &amp;gt;elemento 1&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;li-1&amp;quot; &amp;gt;elemento 2&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;li-2&amp;quot; &amp;gt;subelemento 2.1&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;li-1&amp;quot; &amp;gt;elemento 3&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;este enfoque requiere de un monton de nuevas etiquetas, en el caso de exportar a
html, por el otro lado en un programa, esto no tiene ningun inconveniente,
incluso sera mas sencillo la visualizacion&lt;/p&gt;

&lt;p&gt;Varios modulos, necesario sera implementar, uno, encargado de la busqueda (local
y web) del un documento, &lt;code&gt;katana&lt;/code&gt; para parsear el documento, &lt;code&gt;biskana&lt;/code&gt; como
exportador, &lt;code&gt;*ana&lt;/code&gt; (&lt;code&gt;*&lt;/code&gt;? algun buen nombre que termine en ana? se me ocurre
&lt;code&gt;nirvana&lt;/code&gt; y &lt;code&gt;hana&lt;/code&gt;) como visualizador/navegador del documento y &lt;code&gt;morg&lt;/code&gt; (nombre
tentativo) como cohesianador de todo&lt;/p&gt;

&lt;p&gt;son solo ideas, que tal?&lt;/p&gt;

&lt;p&gt;por cierto &lt;code&gt;biskana&lt;/code&gt; hace uso de un motor de expresiones regulares elaborado
desde cero llamado &lt;code&gt;regexp3&lt;/code&gt; que por mera casualidad programe, este motor esta
en desarrollo y en algun momento sera substituido por &lt;code&gt;regexp4&lt;/code&gt;. Ambos utilizan
la misma sintaxis y aunque esta limitado solo a exrpesiones regulares, capturas
y pocas cosas mas. Lo utilizo por estas razones&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;funciona!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no ha aparecido alguna exprecion que revase su limitada capacidad&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;es sencillo y facil de modificar (por mi, almenos), ademas cuando surge un
error se donde buscar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;puede port-arse con relativa facilidad a cualquier lenguaje (creo), el
desarrollo original fue hecho en C. Cuando digo en C me refiero a solo C, sin
recurrir a ninguna libreria, ni siquiera la libreria estandar. Su port a go
no fue demasiado traumatico, encima se vio veneficiado por la orientacion a
objetos&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;primer-ejemplo&#34;&gt;primer ejemplo&lt;/h4&gt;

&lt;p&gt;seria grosero no monstrar ni un poco, asi que aqui estan dos ejemplos con el
&lt;code&gt;biskana&lt;/code&gt; (&lt;code&gt;morg&lt;/code&gt;) y el formato actual (exportacion a html)&lt;/p&gt;

&lt;p&gt;El primero es un libro (aun en proceso de escritura) sobre el motor de
expresiones regulares Recursive Regexp
Raptor &lt;a href=&#34;https://github.com/nasciiboy/raptor-book&#34;&gt;aqui&lt;/a&gt; el repo, el resultado
es
&lt;a href=&#34;https://github.com/nasciiboy/raptor-book/blob/master/raptor-book.html&#34;&gt;este&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para ver el resultado en todo su esplendor, clona o baja una copia del repo y
visualiza en el navegador el html.&lt;/p&gt;

&lt;p&gt;El segundo, es una colaboracion que estaba haciendo para traducir un manual de
emacs. Por motivos varios no he terminado y necesita una serio correccion.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Por que poner algo tan vago?&lt;/em&gt; en el se muestra el concepto de utilizar morg para
traducir manuales de forma
sencilla. &lt;a href=&#34;https://github.com/nasciiboy/emacs-lisp-intro-es&#34;&gt;aqui&lt;/a&gt; el repo, el
resultado (no muy bueno por no actualizar el formato)
es
&lt;a href=&#34;https://github.com/nasciiboy/emacs-lisp-intro-es/blob/master/emacs-lisp-intro_es.html&#34;&gt;este&lt;/a&gt; y
el fichero protagonista, el
&lt;em&gt;.porg&lt;/em&gt;
&lt;a href=&#34;https://github.com/nasciiboy/emacs-lisp-intro-es/blob/master/emacs-lisp-intro_es.porg&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;como se hace el &lt;em&gt;po&lt;/em&gt;-org? primero se pasa el material a traducir a &lt;em&gt;morg&lt;/em&gt;, luego
se duplica cada seccion, poniendo el duplicado justo debajo y comentando el
original con alguna marca especial, para el caso utilice &lt;code&gt;#&lt;/code&gt; y se va
traducciondo cada seccion.&lt;/p&gt;

&lt;p&gt;El proceso de exportar la traduccion es igual de sencillo, copias el &lt;em&gt;porg&lt;/em&gt; y le
cambias de nombre, luego le aplicas una regexp de substitucion con el programa
de preferencia que elimine todas las lineas que inicien con la marca especiol y
voala, el documento traducido!&lt;/p&gt;

&lt;h3 id=&#34;zen&#34;&gt;zen&lt;/h3&gt;

&lt;p&gt;Extenso esto es ya, momento y pausa, el codigo no es elegante, apenas soy un
programador al inicio de su travesia y recien llegado a golang. Antes de empezar
a programar, modificar o agregar funciones debe establece una especificacion
para el formato y de ser posible un consenso global.&lt;/p&gt;

&lt;p&gt;Mas tarde, como calentamiento hacer un exportador robusto y luego sus
componentes. De camino integrarlo en algunos cms (como hugo), Darle soporte en
nuestros editores faboritos, al tiempo de otorgarle facilidas de autocompletado y
resaltado.&lt;/p&gt;

&lt;p&gt;Luego establecer una estructura capaz de mantenerse por cuenta propia y/o por
la coperacion desinteresado de empresas y gobiernos, absorver todo el contenido
que sea posible y dominar la galaxia&lt;/p&gt;

&lt;h2 id=&#34;como-puedo-ayudar&#34;&gt;como puedo ayudar&lt;/h2&gt;

&lt;p&gt;Pagameeeee un salario, enserio! (que medio te es ma sencillo?, contactame por
correo)&lt;/p&gt;

&lt;p&gt;Contrata a un grupo de programadores motivados, que compartan este sueño, y
pagame un salario!&lt;/p&gt;

&lt;p&gt;Programa, traduce, discute y comenta&lt;/p&gt;

&lt;p&gt;Estas en una organizacion afin a este ideal, acupas un cargo de gobierno?
comenta y difunde&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;definir el formato&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;crear exportador robusto. De inicio a html, luego a otros formatos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;programar el resto de componentes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;estructura operativa, para poner en marcha el/los repositorios que albergaran
blogs, libros, wikipedia y lo que se deje, para formar un repositorio global
de conocimiento libre, permanente e imparable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;difusion, expansion y dominacion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quiero terminar, aclarando lo siguiente: difundo estas ideas y codigo bajo la
licencia GNU AGPL v3, si tienes las habilidades para hacer lo planteado
programando todo por cuenta propia, te pido que lo hagas (aunque no estas
obligado) bajo esta licencia.&lt;/p&gt;

&lt;p&gt;Incluso sin financiacion, programare lo que pueda, cuando pueda, simplemente por
ser un reto emocionante, empesando por incorporar el formato a hugo (en unos
meses o mas) y asi escribir este blog a gusto.&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>INBO</title>
      <link>https://nasciiboy.github.io/prog/inbo/</link>
      <pubDate>Mon, 13 Feb 2017 22:14:42 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/inbo/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../steins:gate.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Despues de año y medio de desempleo (y quiza de ser un inutil) aparecio una idea
&lt;em&gt;&lt;q&gt;voy a programar un juego como MegaMan II&lt;/q&gt;&lt;/em&gt;. Por supuesto, no tenia
ningun conocimiento de programacion (ni conputadora), solo tiempo y
&lt;q&gt;patrocinadores&lt;/q&gt; que gentilmente me proporcionaron un pc pentium 4 con un
monitor lcd de imagen difuminada aderesada por unas lineas misteriosas capaces
de disminuir la vida util de tus ojos 10 años (como la edad (minima) del pc,
coincidencia? no lo creo).&lt;/p&gt;

&lt;p&gt;Asi dio inicio mi aventura ninja por el mundo de la programacion, el software
libre y como yonki de internet.&lt;/p&gt;

&lt;p&gt;Siguiendo la filosofia de &lt;em&gt;&lt;q&gt;crea una meta tan alta, que despues no puedas
cumplir&lt;/q&gt;&lt;/em&gt;, no solo el juego deberia ser una maravilla, el codigo y cada elemento
que se utilizara deberia ser una obra de arte por si misma. Tras leer la
wikipedia y algunos foros elegi aprender C, una busqueda mas tarde tenia el
libro &amp;ldquo;Como programar en C/C++ y Java&amp;rdquo; (cuarta edicion) de Deitel &amp;amp; Deitel, en
bonito formato pdf salido de fotocopias.&lt;/p&gt;

&lt;p&gt;Llego la flamante pc con un windows xp, intente ver que se podia hacer, como
instalar algo, eclipse (lol), visual estudio (shame, shame, shame) y luego de una
semana de llenar formularios que pedian mi correo, buscar cracks, uno o varios
virus e intentar formatear, no podia tener mas odio hacia el engendro ese
llamado windos, tanto que recorde que en un podcast bdsm un tecnico sado, decia
entusiasmado algo de un sistema llamado linux, que su comunidad era una pasada y
otras cosas.&lt;/p&gt;

&lt;p&gt;Asi llego linux Mint, una instalacion fallida de ubunto (que suerte) y luego
Debian. No olvidare esos reformateos fruto del desconocimento (en serio? si
borras una particion deja de funcionar?).&lt;/p&gt;

&lt;p&gt;Superada la instalacion (con visitas constantes al ocaso de &lt;q&gt;desde linux&lt;/q&gt;)&amp;hellip;&lt;/p&gt;

&lt;p&gt;Que? para aprender C debo apreder a usar un editor?&lt;/p&gt;

&lt;p&gt;Que? para apreder C debo apreder a usar un compilador?&lt;/p&gt;

&lt;p&gt;Que? para aprender a usar el compilador tengo que usar un terminal?&lt;/p&gt;

&lt;p&gt;Que? para el terminal tengo que aprender a usar bash?&lt;/p&gt;

&lt;p&gt;frustracion mucha, pero tambien diversion, pase tres meses obsesionado, estaba
aprendiendo como nunca, conoci &lt;code class=&#34;command&#34;&gt;vi&lt;/code&gt;, &lt;code
class=&#34;command&#34;&gt;gedit&lt;/code&gt;, tambien gnome 2 (que pasada son los escritorios),
&lt;code class=&#34;command&#34;&gt;transmision&lt;/code&gt;, &lt;code class=&#34;command&#34;&gt;firefox&lt;/code&gt;, &lt;code
class=&#34;command&#34;&gt;moc&lt;/code&gt;, &amp;hellip; &lt;code class=&#34;command&#34;&gt;apt&lt;/code&gt;, &lt;code
class=&#34;command&#34;&gt;aptitude&lt;/code&gt;, &lt;code class=&#34;command&#34;&gt;synaptic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;luego de medio aprender C, encontre un libro para programar videojuegos, el
&lt;em&gt;&lt;q&gt;Tutorial de libSDL para la programacion de videojuegos&lt;/q&gt;&lt;/em&gt; de
Antonio Garcia Alba.&lt;/p&gt;

&lt;p&gt;En realidad encontre muchos libros, pero este fue el mas decente y hasta el
momento el unico que he leido del tema. Son casi 700 paginas, creo que por el
empece a utilizar &lt;em&gt;&lt;code class=&#34;command&#34;&gt;Emacs&lt;/code&gt;&lt;/em&gt;. Gran trabajo, aunque el
codigo no es lo mejor y como dice el titulo es mas un tutorial de SDL que un
libro de progracion de videojuegos, lo digo, por que cuando llega el momento de
programar el motor, termina abruptamente, te quedas desamparado y con mucho
codigo del que debes averiguar como demonios funciona.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../TutorialSDL.pdf&#34;&gt;aqui&lt;/a&gt; el libro y
&lt;a href=&#34;../TutorialSDL-material.tar.gz&#34;&gt;aqui&lt;/a&gt; su material.&lt;/p&gt;

&lt;p&gt;perfecto no? no, el libro estaba en C++ y apenas era un novato en C&lt;/p&gt;

&lt;p&gt;bueno que mas da? nahh, a aprender C++ y SDL (1.2) al mismo tiempo.&lt;/p&gt;

&lt;p&gt;Tres meses mas tarde&amp;hellip; medio sabia SDL, muy poco de C++, habia olvidado C,
llegado al fin del libro y tenia un motor de videjuegos que no tenia ni idea de
como modificar, menos corregir.&lt;/p&gt;

&lt;p&gt;Otro mes mas tarde, habia reescrito (transcrito es mas correcto) todo el codigo, con
algunos dibujos de como se conectaba cada componente.&lt;/p&gt;

&lt;p&gt;Un par de meses despues tenia un videojuego al que nombre como INBO. El nombre
salio de un anime llamado &lt;em&gt;Welcome to the NHK&lt;/em&gt; (NHK ni Youkoso!) donde un
hikikomori (nini) y un soñador se proponen hacer un videojuego, mientras el
mundo y las limitaciones mentales de los protagonistas paracen conspirar
(conspiracion ==&amp;gt; inbo) para que todo se vaya a la mierda, llamo a este
fenomeno &lt;q&gt;vivir&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;(La imagen que inicia el post, coresponte a otro anime &lt;em&gt;Stains;Gate&lt;/em&gt;
tambien de mis preferidos, no encontre un fanart a la altura de NHK)&lt;/p&gt;

&lt;p&gt;Y que paso con el videojuego? bueno, aqui esta lo mas importante, el icono (al final,
no se utilizo, apenas se distinguia algo en 32x32 pixeles)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../icon.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(es e.t.? un robot? ninja? lo dibujo un niño?)&lt;/p&gt;

&lt;p&gt;La bienvenida&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../inbo-0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../inbo-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Menu&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../inbo-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Una Captura&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../inbo-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;El editor&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../inbo-4.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;../inbo-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Exeptuando SDL y C++, el resto esta programado a mano, son como 5,000 lineas de
codigo de mala calidad con muchos comentarios. Je, en aquel tiempo hacia una
copia de cada modificacion, una version hasta tiene imagenes de fondo en lugar
de tiles.&lt;/p&gt;

&lt;p&gt;Entonces? El codigo es una basura, en realidad, ni sabia C++, ni C, ni tenia un
libro al cual recurrir, tire todo, comence a documentar SDL y C en groff (man),
regrese a C y me propuse no programar nada hasta que fuera un guru del lenguaje,
aprender a hacer juegos sencillos como el tetris o la serpiente, documentar todo
y de paso hacer un libro para que ningun tipo tubiera que ir por hay, hurgando
en uno y otro libro, en busca del conocimiento para programar de cero a guru.&lt;/p&gt;

&lt;p&gt;Despues llegaron los juegos en c con ayuda de ncurses y mas tarde, el empleo se
apodero de mi vida un par de años y olvide como programar, luego el desempleo
regreso por venganza y aqui estoy.&lt;/p&gt;

&lt;p&gt;El empleo regresara? encontrare(/hare) un sistema de documentacion que cumpla
con mis exigencias? algun dia sere un haker? o solo un juanker?&lt;/p&gt;

&lt;p&gt;Nunca pense mostrar el codigo de INBO al munto, asi que nunca pase nada a
git&amp;hellip; &lt;a href=&#34;../jumpman_BPA_final.zip&#34;&gt;aqui&lt;/a&gt; el codigo.&lt;/p&gt;

&lt;p&gt;Este sitio carese de cualquier tipo de estadistica o registro, si el morbo le
puede y no tiene nada que hacer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;descomprimase&lt;/li&gt;
&lt;li&gt;instale SDL1.2 (image, ttf y mixer)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; y &lt;code&gt;./test&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las imagenes fueron hechas con inskape, el protagonista se basa en goku, los
enemigos en nada, hay dos niveles mal echos, no recuendo de donde salieron los
efectos/musica, la tipografia es una modificacion personalizada personal de otra
tipografia y las teclas son&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; ==&amp;gt; salto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; ==&amp;gt; ataque&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; ==&amp;gt; ataque especial (con la barra de vida en rojo)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; ==&amp;gt; entrar/salir a pantalla completa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESC&lt;/code&gt; ==&amp;gt; terminar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RET&lt;/code&gt; ==&amp;gt; regresar al menu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INTRO&lt;/code&gt; ==&amp;gt; selecionar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;recuerdo el orgullo tras hacer que el motor liberara recursos o programar un
scroll sin crasheos, tambien que el pc se moria cada ves que abria inskape o
firefox!&lt;/p&gt;

&lt;p&gt;Nos vemos, sin Software Libre, no tendria un pasatiempo, una coleccion de musica
fantastica y seria mas estupido de lo que soy! Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>regexp3-go (dia cero)</title>
      <link>https://nasciiboy.github.io/prog/regexp3-go/</link>
      <pubDate>Sat, 11 Feb 2017 10:26:04 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/regexp3-go/</guid>
      <description>&lt;p&gt;Hace un año, luego de &amp;ldquo;maquetar&amp;rdquo; algunos libros en org-mode, decidi crear mi
propio lenguaje de marcas ligeras, con casinos y colegialas japonesas, programar
un substituto del comando man/info y aniquilar a html/latex como sistema de
documentacion.&lt;/p&gt;

&lt;p&gt;Un mes mas tarde fruto de la necesidad de &lt;em&gt;parsear&lt;/em&gt; el texto del nuevo lenguaje
y mi incapacidad de entender como utilizar una libreria de expresiones
regulares, nacio Recursive Regexp Raptor (alias regexp3) que es un motor de
expresiones regulares para C, otro mes mas tarde salio a la web la primer
version en forma de repositorio
en &lt;a href=&#34;https://github.com/nasciiboy/RecursiveRegexpRaptor/&#34;&gt;github&lt;/a&gt; y ahora&amp;hellip; ni
hay un nuevo lenguaje, ni un substituto de man/info, ni ha muerto html y he
dedicado mas horas de las que jamas pense en regexp3 (y regexp4 &amp;ldquo;el sucesor&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Por un mes (entero) intente programar el interprete del lenguaje de marcas
ligero y fracase, asi que pase al plan de emergencia, ver como estaban hechos
otros interpretes como el de &lt;em&gt;org-mode&lt;/em&gt; o el de &lt;em&gt;reStructured Text&lt;/em&gt;, lo que trajo
un nuevo problema: aprender (e)lisp o aprender python(2|3).&lt;/p&gt;

&lt;p&gt;Lo primero implicaba aprender ingles, encortrar un buen libro y ponerme a
traducir cosas, lo segundo encontrar un buen libro (e intentar por segunda vez
con python), termine llendo por la primer opcion y cuando llego la desesperacion
se mezclo con la segunda.&lt;/p&gt;

&lt;p&gt;Lisp es interesante, asombroso en su simplesa e incomodo en su escritura&lt;/p&gt;

&lt;p&gt;Python&amp;hellip; no puedo con python, lo encuentro aburrido, un pegote de muchas cosas
en un mismo lenguaje e indentar a mano pelada por ahorrar unas llaves es un
sufrimiento carente de toda elegancia&lt;/p&gt;

&lt;p&gt;en fin, que no aprendi mucho de nada&amp;hellip; cerca de octubre del año pasado con la
inquietud de hacer un blog (de nuevo) y tras probar algunos cms llege a &lt;em&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;hugo&lt;/a&gt;&lt;/em&gt;,
me parecio que era sencillo y digno de investigacion, luego de un par de semanas
nacio este blog y decidi aprender algo de su motor de renderizado markdown
llamado &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;blackfriday&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;entonces? habia que aprender go&lt;/p&gt;

&lt;p&gt;entonces? mas ingles (solo hay una pequeña guia traducida al
español &lt;a href=&#34;https://github.com/karlseguin/the-little-go-book&#34;&gt;aqui&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;y haci, pase a buscar un pdf en la web, aparecio &lt;em&gt;The way to go&lt;/em&gt;, luego de unas
semanas viendo ejemplos y como no hay mejor manera de apreder algo que ponerlo
en practica, comenzo el port de lo unico que entiendo a la perfeccion y estoy
orgulloso, asi es, el motor de expresiones regulares (terminen con mi
sufrimiento)&lt;/p&gt;

&lt;p&gt;De momento funciona, aunque no es mas que una copia medio usable de C a Go, sin
ninguna orientacion a objetos.&lt;/p&gt;

&lt;p&gt;Hace ya unos años que di un recorrido ninja por sdl 1.2 y C++ (deitel y como
pensar en c++) medio aprendi algo de OO, pero di media vuelta hacia atras, tome
el C de k&amp;amp;r (+ deitel), algo de ncurses y prometi no programar nada hasta no
dominar C.&lt;/p&gt;

&lt;p&gt;asi que? no me acuerdo de como programar OO&lt;/p&gt;

&lt;p&gt;y que con go? podria ser un buen sucesor de C, si tubiese punteros de verdad,
cadenas de caracteres de verdad, un tipado menos estricto, pero sobre todo, si
presindiera de su estupido autoformateo, guia de estilo y llaves para
instrucciones simples, te maldigo &lt;code&gt;gofmt&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;y &lt;em&gt;regexp3-go&lt;/em&gt; que? &lt;a href=&#34;https://github.com/nasciiboy/regexp3/&#34;&gt;aqui&lt;/a&gt;, algo mas de
informacion en el readme&lt;/p&gt;

&lt;p&gt;que sigue? transitar la aleatoriedad.&lt;/p&gt;

&lt;p&gt;Bueno hasta aqui con mis cosas, pronto (una semana, un mes o mas) una version
simplificada del lenguaje de marcas ligeras.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gotor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gnome Keys</title>
      <link>https://nasciiboy.github.io/prog/gnome-keys/</link>
      <pubDate>Wed, 18 Jan 2017 20:57:15 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/gnome-keys/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../kp-01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;He utilizado gnome 2 (mas de un año en Debian 6), tambien xfce, lxde, dwm, ratpoison,
stumpwm, kde 4, kde 5, fluxbox y openbox (y visto unity&amp;hellip;) con todo, mi
escritorio es y sera &lt;strong&gt;Gnome Shell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lo unico que evita que &lt;strong&gt;Gnome Shell&lt;/strong&gt; sea perfecto es la capacidad de
personalizar el teclado a gusto, como puede  ofreser kde, o eso creia.&lt;/p&gt;

&lt;p&gt;Hace un par de dias comence a utilizar un emulador grafico nuevo llamado
&lt;code&gt;terminix&lt;/code&gt; el cual tambien adolece de una personalizacion profunda de los atajos
de teclado, asi que me pase por su proyecto y les deje una lista de
deseos. Imbuido del espiritu coloborativo en forma de peticion, ocurrioseme
pasar y hacer lo mismo en el repositorio del proyecto gnome, que igual, cual
seres cosmicos-imaginarios cumplian mis solicitud. Oh, sorpresa! descubrir que
otros habian pasado ha solicitar lo mismo (en english) con bonito descenlace&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;gnome-shell-keybindings-like-a-pro&#34;&gt;Gnome-Shell keybindings like a PRO&lt;/h2&gt;

&lt;p&gt;Abrimos un terminal. Muestro la version desde la que realizo las pruebas&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gnome-shell --version
GNOME Shell 3.22.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gnome posee un comando con el cual podemos configurar, mostrar y restaurar
(creo) todas las variables de las que haga uso el entorno, desde establecer con
que programa se debe abrir determinada extension a configurar los atajos de
teclado, su nombre es &lt;code&gt;gsettings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Con el siguiente comando podemos ver cuantas variables pueden (o no)
configurarse&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings list-recursively | wc -l
3057
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y con el siguiente, podemos ver cuantos atajos tenemos disponibles para
interactuar con el entorno de escritorio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings list-recursively org.gnome.desktop.wm.keybindings  | wc -l
85
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El esquema del comando es el siguiente&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsettings comando esquema argumentos
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;comando&lt;/code&gt;, es&amp;hellip; el comando&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;esquema&lt;/code&gt; es una ruta a la seccion que nos interesa conocer/modificar, en el
comando anterior seria &lt;code&gt;org&lt;/code&gt; -&amp;gt; &lt;code&gt;gnome&lt;/code&gt; -&amp;gt; &lt;code&gt;desktop&lt;/code&gt; -&amp;gt; &lt;code&gt;wm&lt;/code&gt; -&amp;gt;
&lt;code&gt;keybindings&lt;/code&gt;. Existen muchos mas esquemas, pero solo me limitare a este.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;argumentos&lt;/code&gt; aqui van los nombres de valores de un esquema y/o una varible en
especifico&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings get org.gnome.desktop.wm.keybindings toggle-fullscreen
@as []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el comando es &lt;code&gt;get&lt;/code&gt;, es decir, &lt;strong&gt;optener&lt;/strong&gt;. El esquema, son los atajos de entorno
de escritorio, la variable es &lt;code&gt;toggle-fullscreen&lt;/code&gt;, es decir, optener que
combinacion activa el comando &lt;code&gt;toggle-fullscreen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cuando la salida es &lt;code&gt;@as []&lt;/code&gt; significa que el comando no esta asignado a ninguna
combinacion, vamos a asignar &lt;code&gt;Super+KP_9&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el comando es &lt;code&gt;set&lt;/code&gt;, es decir, &lt;strong&gt;asignar&lt;/strong&gt;, el esquema son los atajos de entorno
de escritorio, la variable es &lt;code&gt;toggle-fullscreen&lt;/code&gt; y el valor que estamos
asignando es &lt;code&gt;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&lt;/code&gt; (las comillas son para escapar el &lt;code&gt;&#39;&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;comprobemos que el cambio se ha realizado&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings get org.gnome.desktop.wm.keybindings toggle-fullscreen
[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora, al presionar &lt;code&gt;Super+KP_9&lt;/code&gt; la ventana activa entra/sale del modo pantalla
completa.&lt;/p&gt;

&lt;p&gt;para restaurar el comando a la configuracion inicial&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings reset org.gnome.desktop.wm.keybindings toggle-fullscreen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si por alguna razon queremos reestablecer todos los comandos del entorno de
escritorio a su configuracion inicial&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsettings reset-recursively org.gnome.desktop.wm.keybindings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen, otros dos modos de modificar una variable, si tenemos el comando
&lt;code&gt;dconf&lt;/code&gt;, estableceriamos la variable &lt;code&gt;toggle-fullscreen&lt;/code&gt; de esta manera&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dconf write /org/gnome/desktop/wm/keybindings/toggle-fullscreen &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como vemos el esquema, ahora inicia y se separa mediante &lt;code&gt;/&lt;/code&gt; hasta llegar a la
variable o &lt;q&gt;directorio&lt;/q&gt; de interes. El valor a establecer es identico a la
version de &lt;code&gt;gsettings&lt;/code&gt;, mientras que los comandos pasan a ser &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt; y
&lt;code&gt;write&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;finalmente tenemos una interfaz grafica de &lt;code&gt;dconf&lt;/code&gt; llamada &lt;code&gt;dconf-editor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../dconf-editor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;podemos navegar entre los esquemas mediante el raton, clicando en la ruta que
esta en el titulo de la ventana.&lt;/p&gt;

&lt;h2 id=&#34;gnome-shell-mas-alla-del-workspace-4&#34;&gt;Gnome-Shell Mas alla del workspace #4&lt;/h2&gt;

&lt;p&gt;Bueno, todo esto tenia un proposito, la aplicacion de configuracion de gnome
solo nos permite establecer atajos para los primeros cuatro escritorios, un
problema cuando necesitas 5 o mas escritorios como en mi caso que utilizo
almenos 7 con dos monitores.&lt;/p&gt;

&lt;p&gt;Asi es como estableci los atajos a &lt;code&gt;Super+KP_algo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# combinaciones para moverse al workspace x
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-7  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-8  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-9  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-10 &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;

# combinaciones para mover ventana al workspace x
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-1    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-2    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-3    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-4    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-5    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-6    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-7    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-8    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-9    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-10   &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lo mismo mediante dconf&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-1  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-2  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-3  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-4  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-5  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-6  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-7  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-8  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-9  &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/switch-to-workspace-10 &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;

dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-1    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-2    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-3    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-4    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-5    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-6    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-7    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-8    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-9    &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
dconf write /org/gnome/desktop/wm/keybindings/move-to-workspace-10   &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nascii-keys&#34;&gt;nascii keys&lt;/h2&gt;

&lt;p&gt;Por ultimo dejo la lista de todos los atajos que tengo (o no) establecidos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gsettings set org.gnome.desktop.wm.keybindings activate-window-menu         &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings always-on-top                &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings begin-move                   &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings begin-resize                 &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings close                        &amp;quot;[&#39;&amp;lt;Super&amp;gt;q&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-group                  &amp;quot;[&#39;&amp;lt;Super&amp;gt;Home&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-group-backward         &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;Home&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-panels                 &amp;quot;[&#39;&amp;lt;Primary&amp;gt;&amp;lt;Alt&amp;gt;Escape&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-panels-backward        &amp;quot;[&#39;&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;&amp;lt;Alt&amp;gt;Escape&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-windows                &amp;quot;[&#39;&amp;lt;Super&amp;gt;space&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings cycle-windows-backward       &amp;quot;[&#39;&amp;lt;Shift&amp;gt;&amp;lt;Super&amp;gt;space&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings lower                        &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings maximize                     &amp;quot;[&#39;&amp;lt;Primary&amp;gt;&amp;lt;Super&amp;gt;Up&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings maximize-horizontally        &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings maximize-vertically          &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings minimize                     &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_Subtract&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-center               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-corner-ne            &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-corner-nw            &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-corner-se            &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-corner-sw            &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-down         &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-left         &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;Left&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-right        &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;Right&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-up           &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-side-e               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-side-n               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-side-s               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-side-w               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-1          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-2          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-3          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-4          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-5          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-6          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-7          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-8          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-9          &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-10         &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-11         &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-12         &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down       &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;Page_Down&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-last       &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;End&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left       &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right      &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up         &amp;quot;[&#39;&amp;lt;Alt&amp;gt;&amp;lt;Super&amp;gt;Page_Up&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings panel-main-menu              &amp;quot;[&#39;&amp;lt;Super&amp;gt;s&#39;, &#39;&amp;lt;Alt&amp;gt;F1&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings panel-run-dialog             &amp;quot;[&#39;&amp;lt;Alt&amp;gt;F2&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings raise                        &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings raise-or-lower               &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings set-spew-mark                &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings show-desktop                 &amp;quot;[&#39;&amp;lt;Super&amp;gt;d&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-applications          &amp;quot;[&#39;&amp;lt;Super&amp;gt;BackSpace&#39;, &#39;&amp;lt;Alt&amp;gt;Tab&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-applications-backward &amp;quot;[&#39;&amp;lt;Shift&amp;gt;&amp;lt;Super&amp;gt;BackSpace&#39;, &#39;&amp;lt;Shift&amp;gt;&amp;lt;Alt&amp;gt;Tab&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-group                 &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-group-backward        &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-input-source          &amp;quot;[&#39;&amp;lt;Super&amp;gt;F4&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-panels                &amp;quot;[&#39;&amp;lt;Control&amp;gt;&amp;lt;Alt&amp;gt;Tab&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-panels-backward       &amp;quot;[&#39;&amp;lt;Shift&amp;gt;&amp;lt;Control&amp;gt;&amp;lt;Alt&amp;gt;Tab&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_7&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_8&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_9&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_4&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_5&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_6&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-7        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_1&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-8        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_2&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-9        &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_3&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-10       &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_0&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-11       &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-12       &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down     &amp;quot;[&#39;&amp;lt;Super&amp;gt;Page_Down&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-last     &amp;quot;[&#39;&amp;lt;Super&amp;gt;End&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left     &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right    &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up       &amp;quot;[&#39;&amp;lt;Super&amp;gt;Page_Up&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-windows               &amp;quot;[&#39;&amp;lt;Super&amp;gt;Return&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings switch-windows-backward      &amp;quot;[&#39;&amp;lt;Shift&amp;gt;&amp;lt;Super&amp;gt;Return&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings toggle-above                 &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen            &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_Multiply&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings toggle-maximized             &amp;quot;[&#39;&amp;lt;Super&amp;gt;KP_Divide&#39;]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings toggle-on-all-workspaces     &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings toggle-shaded                &amp;quot;[]&amp;quot;
gsettings set org.gnome.desktop.wm.keybindings unmaximize                   &amp;quot;[]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Raptor-Book</title>
      <link>https://nasciiboy.github.io/prog/raptor-book/</link>
      <pubDate>Wed, 11 Jan 2017 10:03:58 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/raptor-book/</guid>
      <description>&lt;p&gt;Solo queria programar un juego similar a &lt;strong&gt;Megaman 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../MegaMan2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;y termine instalando debian, leyendo de bash, sdl, ncurses, c, c++, Emacs&amp;hellip;&lt;/p&gt;

&lt;p&gt;Desafortunadamente aun no hay un texto sagrado de nombre &lt;strong&gt;&amp;ldquo;De Cero a Motor
3D&amp;rdquo;&lt;/strong&gt; (en solo 15 años) ni siminar. Entre intentar aprender ingles y buscar un
sistema de documentacion decente, termine por programar un motor de expresiones
regulares sin comprender la teoria de automatas finitos, lenguajes finitos ni
recordar un poco de las clases de mate de nivel basico, pues no llegue al
medio&amp;hellip;&lt;/p&gt;

&lt;p&gt;Con estos precedentes, el tiempo que brinda el desempleo en un mundo turbulento
lleno de humanos, aleatoriedad incomprendida y falto de materiales
psicotropicos, comence a escribir un libro lleno de palabras dilexicas que
muestra lo aprendido hasta ahora, con la sucia intencion de ganar dinero&amp;hellip; y
aportar conocimiento de libre disposicion a quien lo desee.&lt;/p&gt;

&lt;p&gt;De que va el libro? Como programar un motor de expresiones regulares sin tener
ni idea, el unico requisito es saber lenguaje de programacion C.&lt;/p&gt;

&lt;p&gt;Por ahora estoy revisando y reescribiendo las primeras secciones, pueden
colaborar con revision, anotaciones de que puntos se pueden mejorar y lo que les
venga en gana. Hay una version en html y en el repositorio hay una explicacion
un poco mas detallada.&lt;/p&gt;

&lt;p&gt;Pueden descargar una copia en un comprimido zip &lt;a href=&#34;https://github.com/nasciiboy/raptor-book/archive/master.zip&#34;&gt;aqui&lt;/a&gt; o
clonar el repositiorio asi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/nasciiboy/raptor-book.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aunque no me gustan los tutoriales en fasciculos, se iran agregando secciones al
libro segun esten listas, intentare ser constante.&lt;/p&gt;

&lt;p&gt;happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2017Challenges</title>
      <link>https://nasciiboy.github.io/prog/2017challenges/</link>
      <pubDate>Wed, 04 Jan 2017 20:41:22 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/2017challenges/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../orange.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hace unos dias (presuntamente a principio de año) aparecio en reddit
(r/programming) un enlace a una competencia para programadores mediante github &lt;a href=&#34;https://github.com/YearOfProgramming/2017Challenges&#34;&gt;2017Challenges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aparentemente, el premio es el reto, la busqueda de nuevo conocimiento y la
alegria interior de ser el primero en publicar una solucion (ingeniosa) para un
lenguaje determinado&amp;hellip;&lt;/p&gt;

&lt;p&gt;iniciaron con cuatro pruebas&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hello World: escribir un programa &amp;ldquo;hola mundo&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reverse String: invertir el orden de una cadena&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lonely: encontrar elementos no repetidos en un arreglo con longitud y valores
aleatorios, con opcion de mesclar enteros y caracteres&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Majority Element: dentro de un arreglo de longitud y elementos aleatorios,
localizar el valor que se repita almenos la mitad de la dimencion del arreglo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invert Binary Tree: invertir un arbol binario&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El dia de hoy se incluyo un nuevo reto&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the Difference: comparar dos cadenas donde una difiere en incluir un
caracter adicional, el punto es desplegar el caracter discordante&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cualquier lenguaje de programacion es valido&amp;hellip; he? pues si, lo que mas abunda
son python, seguido por java y javascript&amp;hellip;&lt;/p&gt;

&lt;p&gt;Todo lo necesario para que el codigo se incluya en el repositorio esta explicado
en el &lt;code&gt;readme.md&lt;/code&gt; del proyecto (o en internet)&lt;/p&gt;

&lt;p&gt;No ser un guru de la programacion es un buen motivo para participar, como
tambien aprender a colaborar en un proyecto mediante git(hub) (no tengo ni idea
que hacen fetch, merge, o el orden en que deba realizarce el pull), ademas
puedes poner en practica estructuras &amp;ldquo;complejas&amp;rdquo; como los arboles binarios, que
en mi caso solo los habia visto de lejos con respeto y admiracion en el &amp;ldquo;k&amp;amp;r&amp;rdquo; y
&amp;ldquo;C como programar&amp;rdquo;&lt;/p&gt;

&lt;p&gt;de momento llebo los 4 primeros retos en c (&lt;a href=&#34;https://github.com/nasciiboy/2017Challenges&#34;&gt;aqui&lt;/a&gt;) (aun pendientes de aprobacion los
ultimos 2), cuando tenga mas confianza intentare con go y en algun futuro lejano
quiza con lisp.&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ncurses</title>
      <link>https://nasciiboy.github.io/prog/ncurses/</link>
      <pubDate>Mon, 19 Dec 2016 21:45:05 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/ncurses/</guid>
      <description>

&lt;h2 id=&#34;que-es-ncurses&#34;&gt;Que es Ncurses&lt;/h2&gt;

&lt;p&gt;Es una libreria (parte del proyecto GNU) que nos permite crear &lt;strong&gt;TUIs&lt;/strong&gt; (Text
User Interface) escrita en lenguaje de programacion &lt;strong&gt;C&lt;/strong&gt; con &lt;em&gt;envoltorios&lt;/em&gt; para
algunos otros lenguajes. Se utiliza principalmente en el sistema GNU/linux y en
los derivados de BSD y probablemente tambien corra en el sistema de las ventanas
mediante minGW (Minimalist GNU for Windows).&lt;/p&gt;

&lt;p&gt;Proporciona funciones para «dibujar» caracteres en la pantalla con hasta 256
colores disponibles (si la terminal lo permite). Despues de conocer &lt;code&gt;mvwprintw&lt;/code&gt;
utilizar &lt;code&gt;printf&lt;/code&gt; es igual a sufrir alguna incapacidad. Tambien nos da la
posibilidad de modificar varios atributos de la tipografia como pueden ser
&lt;strong&gt;negrita&lt;/strong&gt;, &lt;em&gt;italica&lt;/em&gt; o &lt;u&gt;subrayado&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;finalmente nos ofrece la posibilidad de tener acceso completo al teclado y
raton.&lt;/p&gt;

&lt;h2 id=&#34;por-que-programar-tuis&#34;&gt;Por que programar TUIs&lt;/h2&gt;

&lt;p&gt;Bueno, es una foma muy sencilla de crear una interfaz «visual» sin morir en el
intento y como fiel creyente de la iglesia de Emacs creo que &lt;em&gt;el texto es la
unica interfaz verdadera&lt;/em&gt;. Si planeas aprender programacion de videojuegos
tambien encontraras que es mas sencillo interactuar con caracteres en lugar de
con pixeles (aunque en el fondo sean lo mismo)&lt;/p&gt;

&lt;h2 id=&#34;como-aprender-a-programar-con-ncurses&#34;&gt;Como aprender a programar con Ncurses?&lt;/h2&gt;

&lt;p&gt;complicado lo tienes&amp;hellip; solo existe un mini-manual (NCURSES Programming HOWTO) y
un libro (Programmer&amp;rsquo;s Guide to NCurses) (ambos en ingles) para aprender lo
basico del tema.&lt;/p&gt;

&lt;p&gt;Tampoco leer codigo ayuda mucho, sobre todo el codigo fuente de la propia
libreria (es muy raro).&lt;/p&gt;

&lt;p&gt;Hace ya un tiempo dedique algunas tardes a traducir el minimanual, puedes encontrar
lo fundamental en este &lt;a href=&#34;../ncurses-programming-howto.zip&#34;&gt;zip&lt;/a&gt; y el resto en un
repositorio en &lt;a href=&#34;https://github.com/nasciiboy/NCURSES-Programming-HOWTO&#34;&gt;github&lt;/a&gt;.
No ha sido revisado, y la traduccion  se realizo con el &amp;ldquo;traductor de
internet&amp;rdquo;. En el repositorio encontraras los fuentes en formato org-mode de
emacs, en algun momento (o años) le dare alguna revicion y quizo se
actualice. Si te es de &lt;code&gt;interes &amp;amp;&amp;amp; utilidad &amp;amp;&amp;amp; y-lo-mejoras&lt;/code&gt; no dudes en
enviarme el resultado&lt;/p&gt;

&lt;p&gt;quiza en un post/tutorial futuro ponga algun codigo interesante del tipo &amp;ldquo;como
programar un tetris&amp;rdquo; o algo asi&amp;hellip;&lt;/p&gt;

&lt;p&gt;ps: tengo una traduccion (ilegal) de el libro casi terminada&amp;hellip;&lt;/p&gt;

&lt;p&gt;ps 2: actualmente no me gusta ncurses, principalmente por que no entiendo su
codigo fuente, y porque es un &amp;ldquo;todo en uno&amp;rdquo;, preferiria que la interaccion con
el teclado, el mouse e incluso joystick fuesen librerias independientes&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance comparison of regular expression engines</title>
      <link>https://nasciiboy.github.io/prog/performance-comparison-of-regular-expression-engines/</link>
      <pubDate>Fri, 16 Dec 2016 20:22:03 -0600</pubDate>
      
      <guid>https://nasciiboy.github.io/prog/performance-comparison-of-regular-expression-engines/</guid>
      <description>&lt;p&gt;Hola gente, hace unos meses tome el codigo de &lt;strong&gt;dark100&lt;/strong&gt; &amp;ldquo;Performance
comparison of regular expression engines&amp;rdquo; (pueden ver el orginal
&lt;a href=&#34;http://sljit.sourceforge.net/regex_perf.html&#34;&gt;aqui&lt;/a&gt;) para hacer algunas pruebas
a un pequeño &lt;a href=&#34;https://github.com/nasciiboy/RecursiveRegexpRaptor&#34;&gt;motor regexp&lt;/a&gt;
que programe en mi tiempo &lt;em&gt;libre?&lt;/em&gt;, bueno &amp;hellip; acabo de actualizar la prueba
(&lt;a href=&#34;https://github.com/nasciiboy/RecursiveRegexpRaptor-vs-Benchmarks&#34;&gt;aqui&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;El proceso fue el siguiente&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Optener el codigo fuente de cada motor (PCRE2, RE2, tre, oniguruma)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compilar cada motor localmente (intel x86-64 celeron 847), es
decir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./autogen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure&lt;/code&gt; (para PCRE con alguna consideracion especifica)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copiar el código fuente al entorno&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intentar con el makefile existente hasta que se logro compilar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modificar levemente el ambiente (no se si compilara en un sistema no GNU)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En realidad no tengo ni idea si este es el proceso adecuado para actualizar el
entorno, pero funciona ¯_(ツ)_/¯. Si conoces una mejor configuracion o como
optimizar alguna prueba sera bien recibida, siempre y cuando los makefiles se
mantengan KISS (aunque solo compile en x86-64)&lt;/p&gt;

&lt;p&gt;Para leer la prueba cómodamente tienes que descagar el fichero &lt;code&gt;readme.html&lt;/code&gt; del
repositorio y visualizarlo en tu navegador.&lt;/p&gt;

&lt;p&gt;por cierto la exprecion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;^( )*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera un bucle infinito en pcre, tre, oniguruma, re2. En principio esta fue la
motivacion principal para actualizar el codigo de cada prueba&amp;hellip; alguna pista?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
