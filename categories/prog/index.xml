<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prog on nba - GNU&#39;s Rock</title>
    <link>http://nasciiboy.github.io/categories/prog/index.xml</link>
    <description>Recent content in Prog on nba - GNU&#39;s Rock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <copyright>GPL 3.0</copyright>
    <atom:link href="http://nasciiboy.github.io/categories/prog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2017Challenges</title>
      <link>http://nasciiboy.github.io/prog/2017Challenges/</link>
      <pubDate>Wed, 04 Jan 2017 20:41:22 -0600</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/2017Challenges/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../orange.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hace unos dias (presuntamente a principio de año) aparecio en reddit
(r/programming) un enlace a una competencia para programadores mediante github &lt;a href=&#34;https://github.com/YearOfProgramming/2017Challenges&#34;&gt;2017Challenges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aparentemente, el premio es el reto, la busqueda de nuevo conocimiento y la
alegria interior de ser el primero en publicar una solucion (ingeniosa) para un
lenguaje determinado&amp;hellip;&lt;/p&gt;

&lt;p&gt;iniciaron con cuatro pruebas&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hello World: escribir un programa &amp;ldquo;hola mundo&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reverse String: invertir el orden de una cadena&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lonely: encontrar elementos no repetidos en un arreglo con longitud y valores
aleatorios, con opcion de mesclar enteros y caracteres&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Majority Element: dentro de un arreglo de longitud y elementos aleatorios,
localizar el valor que se repita almenos la mitad de la dimencion del arreglo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invert Binary Tree: invertir un arbol binario&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El dia de hoy se incluyo un nuevo reto&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the Difference: comparar dos cadenas donde una difiere en incluir un
caracter adicional, el punto es desplegar el caracter discordante&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cualquier lenguaje de programacion es valido&amp;hellip; he? pues si, lo que mas abunda
son python, seguido por java y javascript&amp;hellip;&lt;/p&gt;

&lt;p&gt;Todo lo necesario para que el codigo se incluya en el repositorio esta explicado
en el &lt;code&gt;readme.md&lt;/code&gt; del proyecto (o en internet)&lt;/p&gt;

&lt;p&gt;No ser un guru de la programacion es un buen motivo para participar, como
tambien aprender a colaborar en un proyecto mediante git(hub) (no tengo ni idea
que hacen fetch, merge, o el orden en que deba realizarce el pull), ademas
puedes poner en practica estructuras &amp;ldquo;complejas&amp;rdquo; como los arboles binarios, que
en mi caso solo los habia visto de lejos con respeto y admiracion en el &amp;ldquo;k&amp;amp;r&amp;rdquo; y
&amp;ldquo;C como programar&amp;rdquo;&lt;/p&gt;

&lt;p&gt;de momento llebo los 4 primeros retos en c (&lt;a href=&#34;https://github.com/nasciiboy/2017Challenges&#34;&gt;aqui&lt;/a&gt;) (aun pendientes de aprobacion los
ultimos 2), cuando tenga mas confianza intentare con go y en algun futuro lejano
quiza con lisp.&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ncurses</title>
      <link>http://nasciiboy.github.io/prog/ncurses/</link>
      <pubDate>Mon, 19 Dec 2016 21:45:05 -0600</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/ncurses/</guid>
      <description>

&lt;h2 id=&#34;que-es-ncurses&#34;&gt;Que es Ncurses&lt;/h2&gt;

&lt;p&gt;Es una libreria (parte del proyecto GNU) que nos permite crear &lt;strong&gt;TUIs&lt;/strong&gt; (Text
User Interface) escrita en lenguaje de programacion &lt;strong&gt;C&lt;/strong&gt; con &lt;em&gt;envoltorios&lt;/em&gt; para
algunos otros lenguajes. Se utiliza principalmente en el sistema GNU/linux y en
los derivados de BSD y probablemente tambien corra en el sistema de las ventanas
mediante minGW (Minimalist GNU for Windows).&lt;/p&gt;

&lt;p&gt;Proporciona funciones para «dibujar» caracteres en la pantalla con hasta 256
colores disponibles (si la terminal lo permite). Despues de conocer &lt;code&gt;mvwprintw&lt;/code&gt;
utilizar &lt;code&gt;printf&lt;/code&gt; es igual a sufrir alguna incapacidad. Tambien nos da la
posibilidad de modificar varios atributos de la tipografia como pueden ser
&lt;strong&gt;negrita&lt;/strong&gt;, &lt;em&gt;italica&lt;/em&gt; o &lt;u&gt;subrayado&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;finalmente nos ofrece la posibilidad de tener acceso completo al teclado y
raton.&lt;/p&gt;

&lt;h2 id=&#34;por-que-programar-tuis&#34;&gt;Por que programar TUIs&lt;/h2&gt;

&lt;p&gt;Bueno, es una foma muy sencilla de crear una interfaz «visual» sin morir en el
intento y como fiel creyente de la iglesia de Emacs creo que &lt;em&gt;el texto es la
unica interfaz verdadera&lt;/em&gt;. Si planeas aprender programacion de videojuegos
tambien encontraras que es mas sencillo interactuar con caracteres en lugar de
con pixeles (aunque en el fondo sean lo mismo)&lt;/p&gt;

&lt;h2 id=&#34;como-aprender-a-programar-con-ncurses&#34;&gt;Como aprender a programar con Ncurses?&lt;/h2&gt;

&lt;p&gt;complicado lo tienes&amp;hellip; solo existe un mini-manual (NCURSES Programming HOWTO) y
un libro (Programmer&amp;rsquo;s Guide to NCurses) (ambos en ingles) para aprender lo
basico del tema.&lt;/p&gt;

&lt;p&gt;Tampoco leer codigo ayuda mucho, sobre todo el codigo fuente de la propia
libreria (es muy raro).&lt;/p&gt;

&lt;p&gt;Hace ya un tiempo dedique algunas tardes a traducir el minimanual, puedes encontrar
lo fundamental en este &lt;a href=&#34;../ncurses-programming-howto.zip&#34;&gt;zip&lt;/a&gt; y el resto en un
repositorio en &lt;a href=&#34;https://github.com/nasciiboy/NCURSES-Programming-HOWTO&#34;&gt;github&lt;/a&gt;.
No ha sido revisado, y la traduccion  se realizo con el &amp;ldquo;traductor de
internet&amp;rdquo;. En el repositorio encontraras los fuentes en formato org-mode de
emacs, en algun momento (o años) le dare alguna revicion y quizo se
actualice. Si te es de &lt;code&gt;interes &amp;amp;&amp;amp; utilidad &amp;amp;&amp;amp; y-lo-mejoras&lt;/code&gt; no dudes en
enviarme el resultado&lt;/p&gt;

&lt;p&gt;quiza en un post/tutorial futuro ponga algun codigo interesante del tipo &amp;ldquo;como
programar un tetris&amp;rdquo; o algo asi&amp;hellip;&lt;/p&gt;

&lt;p&gt;ps: tengo una traduccion (ilegal) de el libro casi terminada&amp;hellip;&lt;/p&gt;

&lt;p&gt;ps 2: actualmente no me gusta ncurses, principalmente por que no entiendo su
codigo fuente, y porque es un &amp;ldquo;todo en uno&amp;rdquo;, preferiria que la interaccion con
el teclado, el mouse e incluso joystick fuesen librerias independientes&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance comparison of regular expression engines</title>
      <link>http://nasciiboy.github.io/prog/Performance-comparison-of-regular-expression-engines/</link>
      <pubDate>Fri, 16 Dec 2016 20:22:03 -0600</pubDate>
      
      <guid>http://nasciiboy.github.io/prog/Performance-comparison-of-regular-expression-engines/</guid>
      <description>&lt;p&gt;Hola gente, hace unos meses tome el codigo de &lt;strong&gt;dark100&lt;/strong&gt; &amp;ldquo;Performance
comparison of regular expression engines&amp;rdquo; (pueden ver el orginal
&lt;a href=&#34;http://sljit.sourceforge.net/regex_perf.html&#34;&gt;aqui&lt;/a&gt;) para hacer algunas pruebas
a un pequeño &lt;a href=&#34;https://github.com/nasciiboy/RecursiveRegexpRaptor&#34;&gt;motor regexp&lt;/a&gt;
que programe en mi tiempo &lt;em&gt;libre?&lt;/em&gt;, bueno &amp;hellip; acabo de actualizar la prueba
(&lt;a href=&#34;https://github.com/nasciiboy/RecursiveRegexpRaptor-vs-Benchmarks&#34;&gt;aqui&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;El proceso fue el siguiente&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Optener el codigo fuente de cada motor (PCRE2, RE2, tre, oniguruma)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compilar cada motor localmente (intel x86-64 celeron 847), es
decir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./autogen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure&lt;/code&gt; (para PCRE con alguna consideracion especifica)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copiar el código fuente al entorno&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intentar con el makefile existente hasta que se logro compilar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modificar levemente el ambiente (no se si compilara en un sistema no GNU)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En realidad no tengo ni idea si este es el proceso adecuado para actualizar el
entorno, pero funciona ¯_(ツ)_/¯. Si conoces una mejor configuracion o como
optimizar alguna prueba sera bien recibida, siempre y cuando los makefiles se
mantengan KISS (aunque solo compile en x86-64)&lt;/p&gt;

&lt;p&gt;Para leer la prueba cómodamente tienes que descagar el fichero &lt;code&gt;readme.html&lt;/code&gt; del
repositorio y visualizarlo en tu navegador.&lt;/p&gt;

&lt;p&gt;por cierto la exprecion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;^( )*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;genera un bucle infinito en pcre, tre, oniguruma, re2. En principio esta fue la
motivacion principal para actualizar el codigo de cada prueba&amp;hellip; alguna pista?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>